-- MySQL dump 10.13  Distrib 8.0.12, for Linux (x86_64)
--
-- Host: localhost    Database: laravel
-- ------------------------------------------------------
-- Server version	8.0.12

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8mb4 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `categories` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent_id` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `sort` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'Solid',0,1,0,'2020-12-06 21:12:49','2020-12-06 21:12:49');
INSERT INTO `categories` VALUES (7,'Php',0,1,1,'2020-12-06 21:12:49','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (8,'Class,object,oop',7,1,0,'2020-12-06 21:12:49','2020-12-06 21:12:49');
INSERT INTO `categories` VALUES (11,'Mysql',0,1,2,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (18,'Git',0,1,3,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (22,'Command line',0,1,4,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (24,'Docker',0,1,5,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (26,'Pattern',0,1,6,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (30,'Classification',26,1,0,'2020-12-06 21:12:50','2020-12-06 21:12:50');
INSERT INTO `categories` VALUES (31,'Creational patterns',30,1,0,'2020-12-06 21:12:50','2020-12-06 21:12:50');
INSERT INTO `categories` VALUES (36,'Structural patterns',30,1,1,'2020-12-06 21:12:50','2021-08-17 10:23:58');
INSERT INTO `categories` VALUES (38,'Behavioral',30,1,2,'2021-08-17 10:23:47','2021-08-17 10:23:58');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `configs`
--

DROP TABLE IF EXISTS `configs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `configs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `configs_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `configs`
--

LOCK TABLES `configs` WRITE;
/*!40000 ALTER TABLE `configs` DISABLE KEYS */;
INSERT INTO `configs` VALUES (1,'Mr. Lucas Mante IV','Autem.','Et tempore sapiente tempore. Officia ullam quis consequatur. Qui sint magni id et reiciendis nemo accusantium dignissimos.','2020-12-06 21:12:50','2020-12-06 21:12:50');
INSERT INTO `configs` VALUES (2,'Marley Erdman','Id qui.','Voluptatibus et rerum fuga velit. Harum aliquid id possimus ratione voluptas. Eveniet et blanditiis id quae quam totam commodi repellendus. Maiores deleniti quia itaque sed repellat et.','2020-12-06 21:12:50','2020-12-06 21:12:50');
INSERT INTO `configs` VALUES (7,'Dr. Katelyn Mitchell Jr.','Veritatis.','Voluptate voluptas corrupti quia soluta quis quos. Facere non dolorem quia eum exercitationem. Et sit beatae unde soluta.','2020-12-06 21:12:50','2020-12-06 21:12:50');
/*!40000 ALTER TABLE `configs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `failed_jobs`
--

DROP TABLE IF EXISTS `failed_jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `failed_jobs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `connection` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `queue` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `payload` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `exception` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `failed_jobs`
--

LOCK TABLES `failed_jobs` WRITE;
/*!40000 ALTER TABLE `failed_jobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `failed_jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `files`
--

DROP TABLE IF EXISTS `files`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `files` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `file_path` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `file_size` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `files`
--

LOCK TABLES `files` WRITE;
/*!40000 ALTER TABLE `files` DISABLE KEYS */;
/*!40000 ALTER TABLE `files` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `infos`
--

DROP TABLE IF EXISTS `infos`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `infos` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `text` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `category_id` bigint(20) unsigned NOT NULL,
  `sort` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `infos_category_id_foreign` (`category_id`),
  CONSTRAINT `infos_category_id_foreign` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `infos`
--

LOCK TABLES `infos` WRITE;
/*!40000 ALTER TABLE `infos` DISABLE KEYS */;
INSERT INTO `infos` VALUES (1,'Single responsibility','<p>\r\n  Итак, в качества примера возьмём довольно популярный и широкоиспользуемый\r\n  пример — интернет-магазин с заказами, товарами и покупателями.\r\n</p>\r\n<p>\r\n  Принцип единственной ответственности гласит — «На каждый объект должна быть\r\n  возложена одна единстdвенная обязанность». Т.е. другими словами — конкретный\r\n  класс должен решать конкретную задачу — ни больше, ни меньше.\r\n</p>\r\n<p>\r\n  Рассмотрим следующее описание класса для представления заказа в\r\n  интернет-магазине:\r\n</p>\r\n<pre><code class=\"hljs\">class Order\r\n{\r\n	public function calculateTotalSum(){/*...*/}\r\n	public function getItems(){/*...*/}\r\n	public function getItemCount(){/*...*/}\r\n	public function addItem($item){/*...*/}\r\n	public function deleteItem($item){/*...*/}\r\n\r\n	public function printOrder(){/*...*/}\r\n	public function showOrder(){/*...*/}\r\n\r\n	public function load(){/*...*/}\r\n	public function save(){/*...*/}\r\n	public function update(){/*...*/}\r\n	public function delete(){/*...*/}\r\n}</code></pre>',1,1,19,'2020-12-06 21:12:49','2021-08-17 11:06:16');
INSERT INTO `infos` VALUES (3,'Open closed','<p>\r\n  Программные сущности (классы, модули, функции) должны быть открыты для\r\n  расширения, но закрыты для модификации.На более простых словах это можно\r\n  описать так — все классы, функции и т.д. должны проектироваться так, чтобы для\r\n  изменения их поведения, нам не нужно было изменять их исходный код.\r\n</p>\r\n<p>\r\n  Рассмотрим пример:\r\n  <a href=\"https://medium.com/webbdev/solid-4ffc018077da\">medium»</a>\r\n</p>\r\n<p>\r\n  Представим, что у нас есть магазин. Мы даём клиентам скидку в 20%, используя\r\n  такой класс :\r\n</p>\r\n<pre><code class=\"language-php\">\r\n/**\r\n * Такой подход нарушает принцип открытости-закрытости. Как видно, здесь, если нам надо дать некоей группе клиентов\r\n * особую скидку, приходится добавлять в класс новый код.\r\n */\r\nclass DiscountWRONG\r\n{\r\n    private $price;\r\n\r\n    private $userRole;\r\n\r\n    public function giveDiscount()\r\n    {\r\n        if ($this->userRole == \'default\') {\r\n            return $this->price * 0.2;\r\n        }\r\n        if ($this->userRole == \'vip\') {\r\n            return $this->price * 0.4;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Для того чтобы переработать этот код в соответствии с принципом открытости-закрытости, добавим в проект новый класс,\r\n * расширяющий класс Discount\r\n * Тут используется расширение возможностей классов, а не их модификация.\r\n */\r\nabstract class discount\r\n{\r\n    protected $price;\r\n\r\n    /**\r\n     * discount constructor.\r\n     * @param $price\r\n     */\r\n    public function __construct($price)\r\n    {\r\n        $this->price = $price;\r\n    }\r\n\r\n    abstract function getDiscount();\r\n}\r\n\r\nclass Vip extends discount\r\n{\r\n    function getDiscount()\r\n    {\r\n        return $this->price * 0.4;\r\n    }\r\n}\r\n\r\nclass Defaul extends discount\r\n{\r\n    function getDiscount()\r\n    {\r\n        return $this->price * 0.2;\r\n    }\r\n}        </code></pre>\r\n<p>\r\n  Рассмотрим еще один пример:\r\n  <a href=\"https://habr.com/ru/post/208442/\">Habr»</a>\r\n</p>\r\n<pre><code class=\"language-php\">\r\n            \r\n\r\nclass OrderRepositoryWRONG\r\n{\r\n    public function load($orderID)\r\n    {\r\n        $pdo = new PDO($this->config->getDsn(), $this->config->getDBUser(), $this->config->getDBPassword());\r\n        $statement = $pdo->prepare(\'SELECT * FROM `orders` WHERE id=:id\');\r\n        $statement->execute([\':id\' => $orderID]);\r\n        return $query->fetchObject(\'Order\');\r\n    }\r\n\r\n    public function save($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function update($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function delete($order)\r\n    {/*...*/\r\n    }\r\n}\r\n\r\n/**\r\n * В данном случае хранилищем у нас является база данных. например, MySQL. Но вдруг мы захотели подгружать наши данные\r\n * о заказах, например, через API стороннего сервера, который, допустим, берёт данные из 1С. Какие изменения нам надо\r\n * будет внести? Есть несколько вариантов, например, непосредственно изменить методы класса OrderRepository, но этот не\r\n * соответствует принципу открытости/закрытости, так как класс закрыт для модификации, да и внесение изменений в уже\r\n * хорошо работающий класс нежелательно. Значит, можно наследоваться от класса OrderRepository и переопределить все\r\n * методы, но это решение не самое лучше, так как при добавлении метода в OrderRepository нам придётся добавить\r\n * аналогичные методы во все его наследники. Поэтому для выполнения принципа открытости/закрытости лучше применить\r\n * следующее решение — создать интерфейc IOrderSource, который будет реализовываться соответствующими классами\r\n * MySQLOrderSource, ApiOrderSource и так далее.\r\n */\r\ninterface IOrderSource\r\n{\r\n    public function load($orderID);\r\n\r\n    public function save($order);\r\n\r\n    public function update($order);\r\n\r\n    public function delete($order);\r\n}\r\n\r\nclass MySQLOrderSource implements IOrderSource\r\n{\r\n    public function load($orderID)\r\n    {\r\n    }\r\n\r\n    public function save($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function update($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function delete($order)\r\n    {/*...*/\r\n    }\r\n}\r\n\r\nclass ApiOrderSource implements IOrderSource\r\n{\r\n    public function load($orderID)\r\n    {/*...*/\r\n    }\r\n\r\n    public function save($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function update($order)\r\n    {/*...*/\r\n    }\r\n\r\n    public function delete($order)\r\n    {/*...*/\r\n    }\r\n}\r\n\r\nclass OrderRepository\r\n{\r\n    /**\r\n     * @var IOrderSource\r\n     */\r\n    private $source;\r\n\r\n    public function setSource(IOrderSource $source)\r\n    {\r\n        $this->source = $source;\r\n    }\r\n\r\n    public function load($orderID)\r\n    {\r\n        return $this->source->load($orderID);\r\n    }\r\n\r\n    public function save($order)\r\n    {\r\n        return $this->source->load($order);\r\n    }\r\n\r\n    public function update($order)\r\n    {\r\n        return $this->source->load($order);\r\n    }\r\n}\r\n/**\r\n * Таким образом, мы можем изменить источник и соответственно поведение для класса OrderRepository, установив нужный\r\n * нам класс реализующий IOrderSource, без изменения класса OrderRepository.\r\n */        </code></pre>',1,1,9,'2020-12-06 21:12:49','2021-08-17 11:07:34');
INSERT INTO `infos` VALUES (7,'Barbara Liskov','<p>\r\n  Объекты в программе могут быть заменены их наследниками без изменения свойств\r\n  программы». Своими словами я бы это сказал так\r\n</p>\r\n<p>\r\n  Поведение наследуемых классов не должно противоречить поведению, заданному\r\n  базовым классом, то есть результат выполнения кода должен быть предсказуем и\r\n  не изменять свойств метод.\r\n</p>\r\n<p>\r\n  Источники» <a href=\"https://habr.com/ru/post/208442/\">Habr</a>\r\n  <a href=\"http://simple-training.com/solid-in-php/solid-3-liskovs-substitution-principle/\">simple-training</a>\r\n  Рассмотрим пример:\r\n</p>\r\n<pre><code class=\"language-php\">\r\nclass Bird\r\n{\r\n    public function fly()\r\n    {\r\n        $flySpeed = 10;\r\n        return $flySpeed;\r\n    }\r\n}\r\n\r\n/**\r\n * Дочерний класс от Bird.\r\n * Не изменяет поведение, но дополняет.\r\n * Не нарушает принцип\r\n */\r\nclass Duck extends Bird\r\n{\r\n    public function fly()\r\n    {\r\n        $flySpeed = 8;\r\n        return $flySpeed;\r\n    }\r\n\r\n    public function swim()\r\n    {\r\n        $swimSpeed = 2;\r\n        return $swimSpeed;\r\n    }\r\n}\r\n\r\n/**\r\n * Дочерний класс от Bird.\r\n * Изменяет поведение.\r\n * Нарушает принцип LSP\r\n */\r\nclass Penguin extends Bird\r\n{\r\n    public function fly()\r\n    {\r\n        /* не типичное поведение - die или exception */\r\n        die(\'i can`t fly (((\');\r\n        /* не типичное поведение - возвращаем string, а не integer */\r\n        return \'i can`t fly (((\'; \r\n    }\r\n\r\n    public function swim()\r\n    {\r\n        $swimSpeed = 4;\r\n        return $swimSpeed;\r\n    }\r\n}\r\n  \r\n\r\nclass BirdRun\r\n{\r\n    private $bird;\r\n\r\n    public function __construct(Bird $bird)\r\n    {\r\n        $this->bird = $bird;\r\n    }\r\n\r\n    public function run()\r\n    {\r\n        $flySpeed = $this->bird->fly();\r\n        // ...\r\n    }\r\n}\r\n\r\n$bird = new Bird();\r\n//$bird = new Duck();\r\n//$bird = new Penguin();\r\n$birdRun = new BirdRun($bird);\r\n$birdRun->run();    </code></pre>',1,1,19,'2020-12-06 21:12:49','2021-08-17 11:14:19');
INSERT INTO `infos` VALUES (9,'Interface segregation','<p>\r\n  Этот принцип направлен на устранение недостатков, связанных с реализацией\r\n  больших интерфейсов.\r\n</p>\r\n<p>\r\n  Данный принцип гласит, что «Много специализированных интерфейсов лучше, чем\r\n  один универсальный»\r\n</p>\r\n<p>\r\n  Соблюдение этого принципа необходимо для того, чтобы классы-клиенты\r\n  использующий/реализующий интерфейс знали только о тех методах, которые они\r\n  используют, что ведёт к уменьшению количества неиспользуемого кода\r\n</p>\r\n<p>\r\n  Источники» <a href=\"https://habr.com/ru/post/208442/\">Habr</a> Рассмотрим\r\n  пример:\r\n</p>\r\n<pre><code class=\"language-php\">\r\ninterface IItemWrong\r\n{\r\n    public function applyDiscount($discount);\r\n\r\n    public function applyPromocode($promocode);\r\n\r\n    public function setColor($color);\r\n\r\n    public function setSize($size);\r\n\r\n    public function setCondition($condition);\r\n\r\n    public function setPrice($price);\r\n}\r\n\r\n/**\r\n * Данный интефейс плох тем, что он включает слишком много методов. \r\n * А что, если наш класс товаров не может иметь скидок или промокодов,\r\n * либо для него нет смысла устанавливать материал из которого сделан (например, для книг).\r\n * Таким образом, чтобы не реализовывать в каждом классе неиспользуемые в нём методы, \r\n * лучше разбить интерфейс на несколько мелких и каждым конкретным классом \r\n * реализовывать нужные интерфейсы.\r\n */\r\ninterface IItem\r\n{\r\n    public function setCondition($condition);\r\n\r\n    public function setPrice($price);\r\n}\r\n\r\ninterface IClothes\r\n{\r\n    public function setColor($color);\r\n\r\n    public function setSize($size);\r\n\r\n    public function setMaterial($material);\r\n}\r\n\r\ninterface IDiscountable\r\n{\r\n    public function applyDiscount($discount);\r\n\r\n    public function applyPromocode($promocode);\r\n}\r\n\r\nclass Book implements IItem, IDiscountable\r\n{\r\n    public function setCondition($condition){/*...*/}\r\n\r\n    public function setPrice($price){/*...*/}\r\n\r\n    public function applyDiscount($discount){/*...*/}\r\n\r\n    public function applyPromocode($promocode){/*...*/}\r\n}\r\n\r\nclass KidsClothes implements IItem, IClothes\r\n{\r\n    public function setCondition($condition){/*...*/}\r\n\r\n    public function setPrice($price){/*...*/}\r\n\r\n    public function setColor($color){/*...*/}\r\n\r\n    public function setSize($size){/*...*/}\r\n\r\n    public function setMaterial($material){/*...*/}\r\n}    </code></pre>',1,1,19,'2020-12-06 21:12:49','2021-08-17 11:17:02');
INSERT INTO `infos` VALUES (12,'Dependency inversion','<p>\r\n  Высокоуровневые модули не должны зависеть от низкоуровневых. Оба вида модулей\r\n  должны зависеть от абстракций.\r\n</p>\r\n<p>\r\n  Абстракции не должны зависеть от подробностей. Подробности должны зависеть от\r\n  абстракций.\r\n</p>\r\n<p>Проще говоря: зависьте от абстракций, а не от чего-то конкретного.</p>\r\n<p>\r\n  Применяя этот принцип, одни модули можно легко заменять другими, всего лишь\r\n  меняя модуль зависимости, и тогда никакие перемены в низкоуровневом модуле не\r\n  повлияют на высокоуровневый.\r\n</p>\r\n<p>\r\n  Источники»\r\n  <a href=\"https://habr.com/ru/company/mailru/blog/412699/\">https://habr.com/ru/company/mailru/blog/412699/</a>\r\n  <a href=\"https://habr.com/ru/post/208442/\">https://habr.com/ru/post/208442/</a>\r\n  Рассмотрим пример:\r\n</p>\r\n<pre><code class=\"language-php\">\r\nclass MySQLConnectionWrong\r\n{\r\n    /*  db connection */\r\n    public function connect()\r\n    {\r\n        var_dump(\'MYSQL Connection\');\r\n    }\r\n}\r\n\r\nclass PasswordReminderWrong\r\n{\r\n    /* @var MySQLConnectionWrong */\r\n    private $dbConnection;\r\n\r\n    public function __construct(MySQLConnectionWrong $dbConnection)\r\n    {\r\n        $this->dbConnection = $dbConnection;\r\n    }\r\n}\r\n\r\n/**\r\n * В приведённом коде, невзирая на то, что класс MySQLConnection был внедрён в класс \r\n * PasswordReminder, последний зависит от MySQLConnection. Более высокуровневый \r\n * PasswordReminder не должен зависеть от более низкуровневого модуля MySQLConnection.\r\n * Если нам нужно изменить подключение с MySQLConnection на MongoDBConnection, то придётся\r\n * менять прописанное в коде внедрение конструктора в класс PasswordReminder.\r\n * Класс PasswordReminder должен зависеть от абстракций, а не от чего-то конкретного.\r\n */\r\ninterface ConnectionInterface\r\n{\r\n    public function connect();\r\n}\r\n\r\nclass DbConnection implements ConnectionInterface\r\n{\r\n    /* db connection */\r\n    public function connect()\r\n    {\r\n        var_dump(\'MYSQL Connection\');\r\n    }\r\n}\r\n\r\nclass PasswordReminder\r\n{\r\n    /*  @var ConnectionInterface */\r\n    private $dbConnection;\r\n\r\n    public function __construct(ConnectionInterface $dbConnection)\r\n    {\r\n        $this->dbConnection = $dbConnection;\r\n    }\r\n}\r\n\r\n/**\r\n * Здесь нам нужно изменить подключение с MySQLConnection на MongoDBConnection. \r\n * Нам не нужно менять внедрение конструктора в класс PasswordReminder, потому что в \r\n * данном случае класс PasswordReminder зависит только от абстракции.\r\n */\r\n\r\nclass CustomerWrong\r\n{\r\n    private $currentOrder = null;\r\n\r\n    public function buyItems()\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            return false;\r\n        }\r\n\r\n        $processor = new OrderProcessorWrong();\r\n        return $processor->checkout($this->currentOrder);\r\n    }\r\n\r\n    public function addItem($item)\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            $this->currentOrder = new Order();\r\n        }\r\n        return $this->currentOrder->addItem($item);\r\n    }\r\n\r\n    public function deleteItem($item)\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            return false;\r\n        }\r\n        return $this->currentOrder->deleteItem($item);\r\n    }\r\n}\r\n\r\nclass OrderProcessorWrong\r\n{\r\n    public function checkout($order)\r\n    {/*...*/\r\n    }\r\n}\r\n\r\n/**\r\n * Всё кажется вполне логичным и закономерным. Но есть одна проблема — класс Customer \r\n * зависит от класса OrderProcessor (мало того, не выполняется и принцип открытости/закрытости). \r\n * Для того, чтобы избавится от зависимости от конкретного класса, надо сделать так чтобы \r\n * Customer зависел от абстракции, т.е. от интерфейса IOrderProcessor. Данную зависимость \r\n * можно внедрить через сеттеры, параметры метода, или Dependency Injection контейнера. Я решил\r\n * остановится на 2 методе и получил следующий код.\r\n */\r\n\r\ninterface IOrderProcessor\r\n{\r\n    public function checkout($order);\r\n}\r\n\r\nclass OrderProcessor implements IOrderProcessor\r\n{\r\n    public function checkout($order)\r\n    {/*...*/\r\n    }\r\n}\r\n\r\nclass Customer\r\n{\r\n    private $currentOrder = null;\r\n\r\n    public function buyItems(IOrderProcessor $processor)\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            return false;\r\n        }\r\n\r\n        return $processor->checkout($this->currentOrder);\r\n    }\r\n\r\n    public function addItem($item)\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            $this->currentOrder = new Order();\r\n        }\r\n        return $this->currentOrder->addItem($item);\r\n    }\r\n\r\n    public function deleteItem($item)\r\n    {\r\n        if (is_null($this->currentOrder)) {\r\n            return false;\r\n        }\r\n        return $this->currentOrder->deleteItem($item);\r\n    }\r\n}\r\n/**\r\n * Таким образом, класс Customer теперь зависит только от абстракции, а \r\n * конкретную реализацию, т.е. детали, ему не так важны.\r\n */    </code></pre>',1,1,4,'2020-12-06 21:12:49','2021-08-17 11:22:10');
INSERT INTO `infos` VALUES (13,'Принципы ООП','<p>Основные принципы ООП, которыми являются <i><strong>инкапсуляция, наследование и полиморфизм</strong></i></p><ul><li><i><strong>инкапсуляция</strong></i> - это свойство объекта/класса регулировать доступ к определенным своим компонентам извне самого объекта/класса.</li><li><i><strong>Наследование</strong></i> - это свойство классов расширяться.</li><li><i><strong>Полиморфизм</strong></i> - это следствие наследования. Это свойство унаследованных классов иметь одинаковые методы, которые будут работать по-разному в контексте объектов. Например, у нас есть класс фигура и классы квадрат, треугольник и трапеция - унаследованные от фигуры. Каждая фигура содержит функционал для вычисления площади, но у каждой фигуры он свой.</li></ul><pre><code class=\"language-php\">\r\n        abstract class Publication {\r\n            // определяем правило, что все публикации должны печататься, т.е. иметь метод do_print()\r\n            abstract protected function do_print();\r\n            // испольузем final чтобы инкапсулировать логику работы данного метода\r\n            final protected function getClassName(){ return __CLASS__; }\r\n        }\r\n\r\n        class News extends Publication {\r\n           // переопределяем абстрактный метод печати\r\n           public function do_print() {\r\n               echo \'Новость\';\r\n           }\r\n        }\r\n        class Announcement extends Publication {\r\n            // переопределяем абстрактный метод печати\r\n            public function do_print() {\r\n                echo \'Объявление\';\r\n            }\r\n        }\r\n\r\n        //Наполняем массив публикаций объектами, производными от Publication\r\n        $publications[] = new News();\r\n        $publications[] = new Announcement();\r\n        // пример полиморфизма:\r\n        foreach ($publications as $publication) {\r\n            if ($publication instanceof Publication) { // Если мы работаем с наследниками Publication\r\n                $publication-&gt;do_print(); // то мы можем смело выводить данные на печать\r\n            } else {\r\n                //исключение или обработка ошибки\r\n            }\r\n        }\r\n        function printPublicationName(Publication $publication){\r\n            // пример использования метода, который инкапсулирован:\r\n            $publication-&gt;getClassName();\r\n        }\r\n        printPublicationName(new News());\r\n        printPublicationName(new Announcement());\r\n    </code></pre>',1,8,10,'2020-12-06 21:12:49','2021-02-08 23:17:19');
INSERT INTO `infos` VALUES (15,'KISS&&DRY','<a href=\"https://ru.wikipedia.org/wiki/KISS_(%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF)\">wikipedia</a>\r\n<p></p>\r\n<p>\r\n  <strong>KISS(«Keep it simple, stupid»)</strong> - принцип проектирвоания.\r\n  Принцип KISS утверждает, что большинство систем работают лучше всего, если они\r\n  остаются простыми, а не усложняются. Поэтому в области проектирования простота\r\n  должна быть одной из ключевых целей, и следует избегать ненужной сложности.\r\n</p>\r\n<ul>\r\n  <li>\r\n    Разбивайте задачи на подзадачи которые не должны по вашему мнению длиться\r\n    более 4-12 часов написания кода\r\n  </li>\r\n  <li>\r\n    Разбивайте задачу на множество более маленьких задач, каждая задача должна\r\n    решаться одним или парой классов\r\n  </li>\r\n  <li>\r\n    Сохраняйте ваши методы маленькими. Каждый метод должен состоять не более чем\r\n    из 30-40 строк. Каждый метод должен решать одну маленькую задачу, а не\r\n    множество случаев. Если в вашем методе множество условий, разбейте его на\r\n    несколько. Это повысит читаемость, позволит легче поддерживать код и быстрее\r\n    находить ошибки в нём. Вы полюбите улучшать код.\r\n  </li>\r\n  <li>\r\n    Сохраняйте ваши классы маленькими. Здесь применяется та же техника что и с\r\n    методами.\r\n  </li>\r\n  <li>\r\n    Придумайте решение задачи сначала, потом напишите код. Никогда не поступайте\r\n    иначе. Многие разработчики придумывают решение задачи во время написания\r\n    кода и в этом нет ничего плохого. Вы можете делать так и при этом\r\n    придерживаться выше обозначенного правила. Если вы можете в уме разбивать\r\n    задачу на более мелкие части, когда вы пишете код, делайте это любыми\r\n    способами. И не бойтесь переписывать код ещё и ещё и ещё… В счёт не идёт\r\n    число строк, до тех пор пока вы считаете что можно ещё меньше/ещё лучше.\r\n  </li>\r\n  <li>\r\n    Не бойтесь избавляться от кода. Изменение старого кода и написание нового\r\n    решения два очень важных момента. Если вы столкнулись с новыми требованиями,\r\n    или не были оповещены о них ранее, тогда порой лучше придумать новое более\r\n    изящное решение решающее и старые и новые задачи.\r\n  </li>\r\n</ul>\r\n<h2>Don’t repeat yourself, DRY</h2>\r\n<p>\r\n  <strong>Don’t repeat yourself, DRY</strong> - это принцип разработки\r\n  программного обеспечения, нацеленный на снижение повторения информации\r\n  различного рода, особенно в системах со множеством слоёв абстрагирования.\r\n  Принцип DRY формулируется как: «Каждая часть знания должна иметь единственное,\r\n  непротиворечивое и авторитетное представление в рамках системы»\r\n</p>',1,7,14,'2020-12-06 21:12:50','2021-08-17 11:27:29');
INSERT INTO `infos` VALUES (16,'Class,object,oop title info','Источники»\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/php-oop/\" role=\"button\">\r\n    devionity\r\n</a>\r\n<h2>Класс и объекты</h2>\r\n<p><b><em>Класс</em></b> - это некий шаблон, экземпляры которого можно создавать. Часто говорят об отдельном классе как\r\n    об отдельном\r\n    типе данных. В классе определены т.н. <em>свойства</em> и <em>методы</em>.\r\n\r\n</p>\r\n<p><b><em>Свойства</em></b> класса - это переменные внутри класса, а <b>методы</b> класса - это функции внутри класса.\r\n</p>\r\n<p>\r\n    <b><em>Объект</em></b> - это экземпляр класса. Часто говорят, что класс - это как тип данных, а объект - это как\r\n    переменная этого\r\n    типа. Соответственно мы может создать много экземпляров одного класса, так же как и создать много переменных одного\r\n    типа\r\n</p>\r\n\r\n<h2>Принципы ООП</h2>\r\n<p>Основные принципы ООП, которыми являются <b><em>инкапсуляция, наследование и полиморфизм</em></b>\r\n</p>\r\n<ul>\r\n    <li><b><em>инкапсуляция</em></b> - это свойство объекта/класса регулировать доступ к определенным своим компонентам\r\n        извне самого объекта/класса.\r\n    </li>\r\n    <li><b><em>Наследование</em></b> - это свойство классов расширяться.</li>\r\n    <li><b><em>Полиморфизм</em></b> - это следствие наследования. Это свойство унаследованных классов иметь одинаковые\r\n        методы, которые будут работать по-разному в контексте объектов. Например, у нас есть класс фигура и классы\r\n        квадрат, треугольник и трапеция - унаследованные от фигуры. Каждая фигура содержит функционал для вычисления\r\n        площади, но у каждой фигуры он свой.\r\n    </li>\r\n</ul>\r\n<pre>    <code class=\"php\">\r\n        abstract class Publication {\r\n            // определяем правило, что все публикации должны печататься, т.е. иметь метод do_print()\r\n            abstract protected function do_print();\r\n            // испольузем final чтобы инкапсулировать логику работы данного метода\r\n            final protected function getClassName(){ return __CLASS__; }\r\n        }\r\n\r\n        class News extends Publication {\r\n           // переопределяем абстрактный метод печати\r\n           public function do_print() {\r\n               echo \'Новость\';\r\n           }\r\n        }\r\n        class Announcement extends Publication {\r\n            // переопределяем абстрактный метод печати\r\n            public function do_print() {\r\n                echo \'Объявление\';\r\n            }\r\n        }\r\n\r\n        //Наполняем массив публикаций объектами, производными от Publication\r\n        $publications[] = new News();\r\n        $publications[] = new Announcement();\r\n        // пример полиморфизма:\r\n        foreach ($publications as $publication) {\r\n            if ($publication instanceof Publication) { // Если мы работаем с наследниками Publication\r\n                $publication-&gt;do_print(); // то мы можем смело выводить данные на печать\r\n            } else {\r\n                //исключение или обработка ошибки\r\n            }\r\n        }\r\n        function printPublicationName(Publication $publication){\r\n            // пример использования метода, который инкапсулирован:\r\n            $publication-&gt;getClassName();\r\n        }\r\n        printPublicationName(new News());\r\n        printPublicationName(new Announcement());\r\n    </code>\r\n</pre>\r\n\r\n<h2>Ссылка на объект ($this)</h2>\r\n<p>\r\n    Переменная <b><em>$this</em></b> - это специальная переменная, которая используется для доступа к объекту класса\r\n    изнутри самогокласса. Фактически, эта переменная будет содержать ссылку на объект класса.\r\n</p>\r\n\r\n<h2>Статические свойства</h2>\r\n<p>\r\n    <b><em>Статические</em></b> свойства класса - это свойства, к которым можно обращаться без создания объекта -\r\n    в контексте самого класса. Статические свойства объявляются при определении класса при помощи специального слова\r\n    static, которое записывается после спецификатора доступа public / protected / private\r\n</p>\r\n<p>\r\n    Для обращения к константам класса, статическим свойствам и статическим методам класса изнутри самого класса (т.е.\r\n    при реализации методов класса) необходимо использовать ключевое слово <b><em>self</em></b>. После этого ключевого\r\n    слова записывается\r\n    оператор :: , который позволяет обратиться к константам, статическим свойствам или статическим методам класса.\r\n</p>\r\n<p>\r\n    Ключевое слово self употребляется исключительно внутри класса и, фактически, является синонимом названия текущего\r\n    класса.\r\n</p>\r\n<p>\r\n    Не путайте $this (обращение к свойствам/методам в контексте объекта) и self (обращение к статическим\r\n    свойствам/методам/константам в контексте класса).\r\n\r\n</p><p>\r\n    При определении дочернего класса, для обращения к константам, статическим свойствам и методам родительского класса\r\n    необходимо использовать ключевое слово parent\r\n</p>\r\n<pre>    <code class=\"php\">\r\nclass A\r\n{\r\n    const SOME_CONSTANT = 512;\r\n    private static $x;\r\n\r\n    public static function setX($str)\r\n    {\r\n        self::$x = $str;\r\n    }\r\n\r\n    public static function getX()\r\n    {\r\n        return self::$x;\r\n    }\r\n}\r\n\r\nclass B extends A\r\n{\r\n    static public function test()\r\n    {\r\n        parent::setX(\'Hello\');\r\n        echo parent::getX();\r\n        echo parent::SOME_CONSTANT;\r\n    }\r\n\r\n}\r\n    </code>\r\n</pre>\r\n<p>\r\n    Ключевое слово static используется для доступа к статическим свойствам и методам из контекста самого класса изнутри\r\n    класса (например как self, parent).\r\n</p>\r\n<pre>    <code class=\"php\">\r\nclass A\r\n{\r\n	public static function test()\r\n	{\r\n		echo 1;\r\n	}\r\n\r\n	public static function get()\r\n	{\r\n		self::test();\r\n	}\r\n}\r\n\r\nclass B extends A\r\n{\r\n	public static function test()\r\n	{\r\n		echo 2;\r\n	}\r\n}\r\n\r\nB::get(); // 1\r\n    </code>\r\n</pre>\r\n<h2>Модификаторы доступа</h2>\r\n<ul>\r\n    <li><b><em>public</em></b> - можно использовать везде.\r\n    </li>\r\n    <li><b><em>protected</em></b> - этот спецификатор означает, что свойства и методы могут использоваться только внутри\r\n        самого класса и внутри дочернего класса..\r\n    </li>\r\n    <li><b><em>private</em></b> - Этот спецификатор доступа говорит о том, что свойство или метод объекта может быть\r\n        использован(о) только внутри методов этого же класса. Т.е. оно является закрытым от внешнего кода.\r\n    </li>\r\n</ul>\r\n\r\n<h2>Клонирование</h2>\r\n<p>Если переменная содержит объект, то на самом деле она содержит ссылку на область памяти, где хранится объект.</p>\r\n<p><b><em>Клонирование объекта</em></b> - это создание еще одного экземпляра класса, идентичного данному объекту. Для\r\n    этого используется\r\n    специальное ключевое слово clone, после которого необходимо указать объект, который будет клонирован. Эта\r\n    конструкция вернет новый экземпляр класса.\r\n</p>\r\n\r\n<h2>Магические методы</h2>\r\n<p><b><em>Магические методы</em></b> - это методы, которые вызываются неявно. А именно - они вызываются автоматически,\r\n    при некоторых условиях\r\n</p>\r\n<p><b><em>Конструкторы и деструкторы</em></b> - это магические методы, которые вызываются при создании объекта и\r\n    удалении его из памяти соответственно. Конструкторы автоматически не вызываються у родительского класса.\r\n</p>\r\n<p><b><em>__clone()</em></b> - будет автоматически вызвана при клонировании объекта, если она определена в\r\n    соответствующем классе..\r\n</p>\r\n<p><b><em>__get($name)</em></b> - будет автоматически вызвана при попытке использования (но не присвоения этому свойству\r\n    значения) private свойства вне класса или просто неопределенного свойства объекта. При этом функция принимает в\r\n    качестве аргумента переменную, в которую будет подставлено название свойства.\r\n</p>\r\n<p><b><em>__clone()</em></b> - будет автоматически вызвана при клонировании объекта, если она определена в\r\n    соответствующем классе..\r\n</p>\r\n<p><b><em>__set($name, $val)</em></b> - будет автоматически вызвана при попытке присвоения значения private свойству вне\r\n    класса или просто неопределенному свойству объекта. При этом функция принимает в качестве аргументов переменные, в\r\n    которые будет подставлено название свойства и его значение.\r\n</p>\r\n<p><b><em>__call($name, $arguments)</em></b> - будет вызван при попытке вызова private метода объекта или\r\n    неопределенного метода в классе. Он принимает аргументы в виде названия метода и переданных значений в этот метод.\r\n</p>\r\n<p><b><em>__callStatic($name, $arguments)</em></b> -будет вызван при попытке вызова статического private метода объекта\r\n    или неопределенного метода в классе в статическом контексте. Он принимает аргументы в виде названия метода и\r\n    переданных значений в этот метод. Также, он должен быть определен как статический.\r\n</p>\r\n<p><b><em>_isset($name), __unset($name)</em></b> -будут автоматически вызваны при попытке применить функции issetили\r\n    unset(соответственно) к privateили неопределенным свойствам объекта.\r\n</p>\r\n<p><b><em>__sleep()</em></b> -будет автоматически вызван перед сериализацией объекта. Этот метод должен вернуть массив\r\n    из названий public свойств объекта, которые будут сериализованы.\r\n</p>\r\n<p><b><em>__wakeup()</em></b> -будет автоматически вызван перед восстановлением объекта после сериализации.\r\n</p>\r\n<p><b><em>__toString()</em></b> - будет вызван автоматически при попытке привести объект к строке.\r\n</p>\r\n<p><b><em>__invoke()</em></b> -будет вызван при попытке использовать объект как функцию- т.е. выполнить вызов.\r\n</p>\r\n\r\n<h2> Магические константы и полезные функции</h2>\r\n<p>\r\n    Константа <b><em>__CLASS__</em></b> содержит название класса, в котором она была использована.\r\n</p>\r\n<p>\r\n    Константа<b><em> __METHOD__</em></b> содержит название метода, в котором она была использована.\r\n</p>\r\n\r\n<p>\r\n    Рассмотрим некоторые полезные функции для работы с классами: <b><em>class_exists(), get_class(), method_exists(),\r\n            property_exists().</em></b>\r\n</p><p>\r\n    Функции class_exists($className), method_exists($className, $methodName), property_exists($className, $varName)\r\n    проверяют, определен ли: класс с указанным названием, определен ли метод с указанным названием в указанном классе,\r\n    определено ли свойство в указанном классе (соответственно).\r\n</p>\r\n<p>\r\n    Функция get_class($obj) возвращает название класса по указанной ссылке на соответствующий объект.\r\n</p>\r\n\r\n<h2> Абстрактные классы и методы</h2>\r\n<p>\r\n    <b><em>Абстрактный класс</em></b> - это класс, для которого не могут быть созданы его экземпляры. Для того, чтоб\r\n    определить класс, как абстрактный, необходимо записать ключевое слово abstract перед словом class.<br>\r\n    Тогда любая попытка создать экземпляр этого класса (при помощи оператора new) будет означать fatal error и работа\r\n    скрипта будет остановлена.\r\n</p>\r\n<p>\r\n    Методы, объявленные абстрактными, несут, по существу, лишь описательный смысл и не могут включать реализацию.\r\n    При наследовании от абстрактного класса, все методы, помеченные абстрактными в родительском классе, должны быть\r\n    определены в дочернем классе; кроме того, область видимости этих методов должна совпадать (или быть менее строгой).\r\n    Например, если абстрактный метод объявлен как protected, то реализация этого метода должна быть protected или\r\n    public, но не private. Более того, объявления методов должны совпадать, то есть контроль типов (type hint) и\r\n    количество обязательных аргументов должно быть одинаковым. К примеру, если в дочернем классе указан необязательный\r\n    параметр, которого нет в объявлении абстрактного класса, то в данном случае конфликта объявлений методов не будет.\r\n</p>\r\n<p>\r\n    <b><em>Для чего это нужно?</em></b> Это дает программистам более качественно моделировать те или иные сущности.\r\n    Например, у нас есть геометрическая фигура и класс Figure. Поскольку, мы еще не знаем, какая именно фигура, то мы не\r\n    можем ее себе представить или нарисовать. Это значит что создавать экземпляр этого класса не имеет смысла и мы можем\r\n    определить соответствующий класс как абстрактный, а классы Triangle, Square, CIrcle как дочерние классы\r\n    геометрической фигуры.\r\n</p>\r\n<h2> Финальные классы и методы</h2>\r\n<p>\r\n    Ключевое слово final перед определением класса означает, что этот класс не может иметь дочерних классов - т.е.\r\n    является финальным в смысле наследования.\r\n    Финальными могут быть также и методы класса. Ключевое слово final в этом случае необходимо записать перед\r\n    определением метода. Это означает, что в дочернем классе соответствующий метод не может быть переопределен.\r\n</p>\r\n\r\n<h2>Интерфейсы</h2>\r\n<p>\r\n    <b><em>Интерфейсы</em></b> объектов позволяют создавать код, который указывает, какие методы должен реализовать\r\n    класс, без необходимости определять, как именно они должны быть реализованы.\r\n</p>\r\n<p>\r\n    Интерфейсы объявляются так же, как и обычные классы, но с использованием ключевого слова interface вместо class.\r\n    Тела методов интерфейсов должны быть пустыми.\r\n</p>\r\n<p>\r\n    Все методы, определенные в интерфейсах должны быть общедоступными, что следует из самой природы интерфейса.\r\n</p>\r\n<p>\r\n    Для реализации интерфейса используется оператор implements. Класс должен реализовать все методы, описанные в\r\n    интерфейсе, иначе произойдет фатальная ошибка. При желании классы могут реализовывать более одного интерфейса,\r\n    разделяя каждый интерфейс запятой.\r\n</p>\r\n<p>\r\n    Интерфейсы могут содержать константы. Константы интерфейсов работают точно так же, как и константы классов, за\r\n    исключением того, что они не могут быть переопределены наследующим классом или интерфейсом.\r\n</p>\r\n<h2>В чем отличие интерфейса от абстрактного класса?</h2>\r\n<p>\r\n Для интерфейсов, как и для абстрактных классов нельзя создать экземпляры. Отличие абстрактного класса от интерфейса\r\n    состоит в том, что в интерфейсе необходимо опускать тело всех методов, а абстрактный метод может содержать\r\n    реализацию отдельных методов. Также для классов невозможно множественное наследование, в отличии от интерфейсов.\r\n</p>\r\n\r\n<h2>Traits</h2>\r\n<p>\r\n    Трейт - это механизм обеспечения повторного использования кода в языках с поддержкой только одиночного наследования,\r\n    таких как PHP. Трейт предназначен для уменьшения некоторых ограничений одиночного наследования, позволяя\r\n    разработчику повторно использовать наборы методов свободно, в нескольких независимых классах и реализованных с\r\n    использованием разных архитектур построения классов. Семантика комбинации трейтов и классов определена таким\r\n    образом, чтобы снизить уровень сложности, а также избежать типичных проблем, связанных с множественным наследованием\r\n    и смешиванием (mixins).\r\n</p>\r\n\r\n<p>\r\n    Трейт очень похож на класс, но предназначен для группирования функционала хорошо структурированым и последовательным\r\n    образом. Невозможно создать самостоятельный экземпляр трейта. Это дополнение к обычному наследованию и позволяет\r\n    сделать горизонтальную композицию поведения, то есть применение членов класса без необходимости наследования.\r\n</p>\r\n<p>\r\n    Если два трейта вставляют метод с одним и тем же именем, это приводит к фатальной ошибке в случае, если конфликт\r\n    явно не разрешен.<br>\r\n    Для разрешения конфликтов именования между трейтами, используемыми в одном и том же классе, необходимо использовать\r\n    оператор insteadof для того, чтобы точно выбрать один из конфликтующих методов.\r\n</p>\r\n<p>\r\n    В этом примере Talker использует трейты A и B. Так как в A и B есть конфликтующие методы, он определяет использовать\r\n    вариант smallTalk из трейта B, а вариант bigTalk - из трейта A.<br>\r\n    Класс Aliased_Talker применяет оператор as чтобы получить возможность использовать имплементацию bigTalk из B под\r\n    дополнительным псевдонимом talk.\r\n</p>\r\n<pre>    <code class=\"php\">\r\n        trait A {\r\n            public function smallTalk() {\r\n                echo \'a\';\r\n            }\r\n            public function bigTalk() {\r\n                echo \'A\';\r\n            }\r\n        }\r\n\r\n        trait B {\r\n            public function smallTalk() {\r\n                echo \'b\';\r\n            }\r\n            public function bigTalk() {\r\n                echo \'B\';\r\n            }\r\n        }\r\n\r\n        class Talker {\r\n            use A, B {\r\n                B::smallTalk insteadof A;\r\n                A::bigTalk insteadof B;\r\n            }\r\n        }\r\n\r\n        class Aliased_Talker {\r\n            use A, B {\r\n                B::smallTalk insteadof A;\r\n                A::bigTalk insteadof B;\r\n                B::bigTalk as talk;\r\n            }\r\n        }\r\n    </code>\r\n</pre>\r\n<p>\r\n    Пример #6 Пример изменения видимости метода\r\n</p>\r\n<pre>    <code class=\"php\">\r\n        trait HelloWorld {\r\n            public function sayHello() {\r\n                echo \'Hello World!\';\r\n            }\r\n        }\r\n\r\n        // Изменение видимости метода sayHello\r\n        class MyClass1 {\r\n            use HelloWorld { sayHello as protected; }\r\n        }\r\n\r\n        // Создание псевдонима метода с измененной видимостью\r\n        // видимость sayHello не изменилась\r\n        class MyClass2 {\r\n            use HelloWorld { sayHello as private myPrivateHello; }\r\n        }\r\n    </code>\r\n</pre>\r\n\r\n<h2>Исключение</h2>\r\n<p>\r\n    <b><em>Исключение</em></b> - это действие, которое не укладывается в работу приложения. Исключения используют для\r\n    того, чтобы\r\n    корректно обрабатывать ошибки, возникающие в коде программы. Как правило к исключениям применяется терминология\r\n    бросить-поймать. Исключение бросается в том месте кода, когда ошибка неизбежна. Это, в свою очередь, означает, что\r\n    оно должно быть поймано - т.е. обработано.\r\n</p>',1,8,19,'2020-12-06 21:12:50','2021-08-17 10:49:47');
INSERT INTO `infos` VALUES (25,'Краткий обзор Индексов таблиц MySQL','<h2>\r\n  <span style=\"font-size: 0.9rem;\">Источники» </span><a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://ruhighload.com/%D0%9A%D0%B0%D0%BA+%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE+%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C+%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D1%8B+%D0%B2+mysql%3F\" role=\"button\">\r\n    ruhighload </a><span style=\"font-size: 0.9rem;\"> </span><a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://ruhighload.com/%D0%98%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D1%8B+%D0%B2+mysql\" role=\"button\">\r\n    ruhighload </a><span style=\"font-size: 0.9rem;\"> </span><a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-fundamentals/normalization\" role=\"button\">\r\n    devionity</a><br>\r\n</h2>\r\n\r\n<p>\r\n  <b>Система управления базами данных</b> - это программное обеспечение для\r\n  работы с самими базами данных. Иными словами это программа. Основное\r\n  предназначение СУБД - это поддержка и разработка баз данных. СУБД, которые\r\n  работают с реляционными базами данных называются реляционными СУБД\r\n</p>\r\n<p>\r\n  <b>Индекс таблицы</b> - это специальный объект БД, который создается СУБД.\r\n  Индекс таблицы позволяет оптимизировать и ускорить работу с таблицей базы\r\n  данных. В самом простом случае, индекс необходимо создавать для тех колонок,\r\n  которые присутствуют в условии WHERE. <br>CREATE INDEX age ON users(age);\r\n</p>\r\n\r\n<h2>Класификация индексов</h2>\r\n<ul>\r\n  <li>\r\n    <b>Primary</b> - это поле, значения которого позволяют отличать разные\r\n    записи друг от друга, делают их уникальными. Значения первичного поля не\r\n    допускают повторений в своих значениях.\r\n  </li>\r\n  <li>\r\n    <b>UNIQUE</b> -Это удобно для колонок, значения в которых должны быть\r\n    уникальными по всей таблице. Такие индексы улучшают эффективность выборки\r\n    для уникальных значений\r\n  </li>\r\n  <li><b>INDEX</b> - простые индексы</li>\r\n</ul>\r\n\r\n<h2>Составные индексы</h2>\r\n<p>\r\n  Индексы могут быть составными, если критерий содержит несколько полей таблицы.\r\n  Очередность колонок в индексе будет играть большую роль\r\n</p>\r\n<p>\r\n  Пример<br><br>\r\n  mysql&gt; SELECT * FROM tbl_name WHERE col1=val1 AND col2=val2<br><br>\r\n  Если по столбцам col1 и col2 существует многостолбцовый индекс, то\r\n  соответствующие строки могут выбираться напрямую. В случае, когда по столбцам\r\n  col1 и col2 существуют раздельные индексы, оптимизатор пытается найти наиболее\r\n  ограничивающий индекс путем определения, какой индекс найдет меньше строк, и\r\n  использует данный индекс для выборки этих строк.\r\n</p>\r\n<p>\r\n  Если данная таблица имеет многостолбцовый индекс, то любой крайний слева\r\n  префикс этого индекса может использоваться оптимизатором для нахождения строк.\r\n  Например, если имеется индекс по трем столбцам (col1,col2,col3), то существует\r\n  потенциальная возможность индексированного поиска по (col1), (col1,col2) и\r\n  (col1,col2,col3).\r\n</p>\r\n\r\n<h2>Селективность индексов</h2>\r\n<pre>    <code>\r\n        mysql&gt; select age, count(*) from users group by age;\r\n        +------+----------+\r\n        | age  | count(*) |\r\n        +------+----------+\r\n        |   15 |      160 |\r\n        |   16 |      250 |\r\n        |        ...      |\r\n        |   76 |      210 |\r\n        |   85 |      230 |\r\n        +------+----------+\r\n        68 rows in set (0.00 sec)\r\n\r\n        mysql&gt; select gender, count(*) from users group by gender;\r\n        +--------+----------+\r\n        | gender | count(*) |\r\n        +--------+----------+\r\n        | female |     8740 |\r\n        | male   |     4500 |\r\n        +--------+----------+\r\n    </code>\r\n</pre>\r\n<p>\r\n  Эта информация говорит нам вот о чем:\r\n</p>\r\n<ul>\r\n  <li>Любое значение колонки age обычно содержит около 200 записей.</li>\r\n  <li>Любое значение колонки gender — около 6000 записей.</li>\r\n</ul>\r\n<p>\r\n  Если колонка age будет идти первой в индексе, тогда MySQL после первой части\r\n  индекса сократит количество записей до 200. Останется сделать выборку по ним.\r\n  Если же колонка gender будет идти первой, то количество записей будет\r\n  сокращено до 6000 после первой части индекса. Т.е. на порядок больше, чем в\r\n  случае age.\r\n</p>\r\n<p>Это значит, что индекс age_gender будет работать лучше, чем gender_age.</p>\r\n<p>\r\n  <b>Селективность</b> колонки определяется количеством записей в таблице с\r\n  одинаковыми значениями. Когда записей с одинаковым значением мало —\r\n  селективность высокая. Такие колонки необходимо использовать первыми в\r\n  составных индексах.\r\n</p>\r\n\r\n<h2>Когда создавать индексы?</h2>\r\n<ul>\r\n  <li>\r\n    Индексы следует создавать по мере обнаружения медленных запросов. В этом\r\n    поможет slow log в MySQL. Запросы, которые выполняются более 1 секунды\r\n    являются первыми кандидатами на оптимизацию.\r\n  </li>\r\n  <li>\r\n    Начинайте создание индексов с самых частых запросов. Запрос, выполняющийся\r\n    секунду, но 1000 раз в день наносит больше ущерба, чем 10-секундный запрос,\r\n    который выполняется несколько раз в день.\r\n  </li>\r\n  <li>\r\n    Не создавайте индексы на таблицах, число записей в которых меньше нескольких\r\n    тысяч. Для таких размеров выигрыш от использования индекса будет почти\r\n    незаметен.\r\n  </li>\r\n  <li>\r\n    Не создавайте индексы заранее, например, в среде разработки. Индексы должны\r\n    устанавливаться исключительно под форму и тип нагрузки работающей системы.\r\n  </li>\r\n  <li>Удаляйте неиспользуемые индексы.</li>\r\n</ul>\r\n\r\n<h2>Создание индексов</h2>\r\n<pre>    <code>\r\n    ALTER TABLE student ADD INDEX(age);\r\n    </code>\r\n</pre>\r\n<p>Для просмотра информации по индексам необходимо исполнить запрос</p>\r\n<pre>    <code>\r\n    SHOW INDEX FROM student;\r\n    </code>\r\n</pre>\r\n<p>Для удаления индекса необходимо исполнить запрос</p>\r\n<pre>    <code>\r\n    DROP INDEX age ON student;\r\n    </code>\r\n</pre>\r\n\r\n<h2>Внешний ключ</h2>\r\n<p>\r\n  Это поле (или набор полей), значения которого берутся из другой таблицы. Таким\r\n  образом устанавливается связь между разными таблицами. Основным\r\n  предназначением внешнего ключа является поддержка целостности данных, которые\r\n  сохранены в разных таблицах.\r\n</p>\r\n<p>\r\n  Внешние ключи позволяют установить связи между таблицами. Внешний ключ\r\n  устанавливается для столбцов из зависимой, подчиненной таблицы, и указывает на\r\n  один из столбцов из главной таблицы. Как правило, внешний ключ указывает на\r\n  первичный ключ из связанной главной таблицы.\r\n</p>\r\n\r\n<h2>Создание внешних ключей</h2>\r\n<p>\r\n  Общий синтаксис установки внешнего ключа на уровне таблицы:\r\n</p>\r\n<pre>    <code>\r\n    [CONSTRAINT имя_ограничения]\r\n    FOREIGN KEY (col1, col12, ... col1N)<br>    REFERENCES главная_таблица (col1, col12, ... col1N)<br>    [ON DELETE действие]\r\n    [ON UPDATE действие]\r\n    </code>\r\n</pre>\r\n<p>\r\n  Для создания ограничения внешнего ключа после <b>FOREIGN KEY</b> указывается\r\n  столбец таблицы, который будет представляет внешний ключ. А после ключевого\r\n  слова <b>REFERENCES</b> указывается имя связанной таблицы, а затем в скобках\r\n  имя связанного столбца, на который будет указывать внешний ключ. После\r\n  выражения <b>REFERENCES</b> идут выражения <b>ON DELETE</b> и\r\n  <b>ON UPDATE</b>, которые задают действие при удалении и обновлении строки из\r\n  главной таблицы соответственно.\r\n</p>\r\n<p>\r\n  Например, определим две таблицы и свяжем их посредством внешнего ключа:\r\n</p>\r\n<pre>    <code>\r\n    CREATE TABLE Customers\r\n    (\r\n        Id INT PRIMARY KEY AUTO_INCREMENT,\r\n        Age INT,\r\n        FirstName VARCHAR(20) NOT NULL,\r\n        LastName VARCHAR(20) NOT NULL,\r\n        Phone VARCHAR(20) NOT NULL UNIQUE\r\n    );\r\n\r\n    CREATE TABLE Orders\r\n    (\r\n        Id INT PRIMARY KEY AUTO_INCREMENT,\r\n        CustomerId INT,\r\n        CreatedAt Date,\r\n        FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)\r\n    );\r\n    </code>\r\n</pre>\r\n\r\n<p>\r\n  В данном случае определены таблицы Customers и Orders. Customers является\r\n  главной и представляет клиента. Orders является зависимой и представляет\r\n  заказ, сделанный клиентом. Таблица Orders через столбец CustomerId связана с\r\n  таблицей Customers и ее столбцом Id. То есть столбец CustomerId является\r\n  внешним ключом, который указывает на столбец Id из таблицы Customers\r\n</p>\r\n\r\n<p>\r\n  С помощью оператора <b>CONSTRAINT</b> можно задать имя для ограничения\r\n  внешнего ключа:\r\n</p>\r\n<pre>    <code>\r\n    CREATE TABLE Orders\r\n    (\r\n        Id INT PRIMARY KEY AUTO_INCREMENT,\r\n        CustomerId INT,\r\n        CreatedAt Date,\r\n        CONSTRAINT orders_custonmers_fk\r\n        FOREIGN KEY (CustomerId)  REFERENCES Customers (Id)\r\n    );\r\n    </code>\r\n</pre>\r\n\r\n<h3>ON DELETE и ON UPDATE</h3>\r\n<p>\r\n  С помощью выражений ON DELETE и ON UPDATE можно установить действия, которые\r\n  выполняются соответственно при удалении и изменении связанной строки из\r\n  главной таблицы. В качестве действия могут использоваться следующие опции:\r\n</p>\r\n<ul>\r\n  <li>\r\n    <b>CASCADE</b>: автоматически удаляет или изменяет строки из зависимой\r\n    таблицы при удалении или изменении связанных строк в главной таблице.\r\n  </li>\r\n  <li>\r\n    <b>SET NULL</b>: при удалении или обновлении связанной строки из главной\r\n    таблицы устанавливает для столбца внешнего ключа значение NULL. (В этом\r\n    случае столбец внешнего ключа должен поддерживать установку NULL)\r\n  </li>\r\n  <li><b>NO ACTION</b>: то же самое, что и RESTRICT.</li>\r\n  <li>\r\n    <b>RESTRICT</b>: отклоняет удаление или изменение строк в главной таблице\r\n    при наличии связанных строк в зависимой таблице.\r\n  </li>\r\n  <li>\r\n    <b>SET DEFAULT</b>: при удалении связанной строки из главной таблицы\r\n    устанавливает для столбца внешнего ключа значение по умолчанию, которое\r\n    задается с помощью атрибуты DEFAULT. Несмотря на то, что данная опция в\r\n    принципе доступна, однако движок InnoDB не поддерживает данное выражение.\r\n  </li>\r\n</ul>\r\n\r\n<h3>Каскадное удаление</h3>\r\n<p>\r\n  Каскадное удаление позволяет при удалении строки из главной таблицы\r\n  автоматически удалить все связанные строки из зависимой таблицы. Для этого\r\n  применяется опция <b>CASCADE:</b>\r\n</p>\r\n\r\n<pre>    <code>\r\n    CREATE TABLE Orders\r\n    (\r\n        Id INT PRIMARY KEY AUTO_INCREMENT,\r\n        CustomerId INT,\r\n        CreatedAt Date,\r\n        FOREIGN KEY (CustomerId) REFERENCES Customers (Id) ON DELETE CASCADE\r\n    );\r\n    </code>\r\n</pre>\r\n\r\n<p>\r\n  Подобным образом работает и выражение <b>ON UPDATE CASCADE</b>. При изменении\r\n  значения первичного ключа автоматически изменится значение связанного с ним\r\n  внешнего ключа. Однако поскольку первичные ключи изменяются очень редко, да и\r\n  с принципе не рекомендуется использовать в качестве первичных ключей столбцы с\r\n  изменяемыми значениями, то на практике выражение ON UPDATE используется редко.\r\n</p>\r\n\r\n<h3>Установка NULL</h3>\r\n<p>\r\n  При установки для внешнего ключа опции SET NULL необходимо, чтобы столбец\r\n  внешнего ключа допускал значение NULL:\r\n</p>\r\n<pre>    <code>\r\n    CREATE TABLE Orders\r\n    (\r\n        Id INT PRIMARY KEY AUTO_INCREMENT,\r\n        CustomerId INT,\r\n        CreatedAt Date,\r\n        FOREIGN KEY (CustomerId) REFERENCES Customers (Id) ON DELETE SET NULL\r\n    );\r\n    </code>\r\n</pre>',1,11,17,'2020-12-06 21:12:50','2021-08-17 09:59:39');
INSERT INTO `infos` VALUES (27,'Типы связей','<p>\r\n  Источники»\r\n  <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-fundamentals/1-1-relation\" role=\"button\">\r\n    devionity\r\n  </a>\r\n</p>\r\n<p>Связи таблиц могут быть трех типов:</p>\r\n<ul>\r\n  <li>\r\n    один к одному\r\n  </li>\r\n  <li>один ко многим</li>\r\n  <li>многие ко многим</li>\r\n</ul>\r\n\r\n<h2>Один к одному</h2>\r\n<p>\r\n  Этот тип связи означает, что одной записи из таблицы А может соответствовать 0\r\n  или 1 запись из таблицы B.\r\n</p>\r\n<p>\r\n  Рассмотрим пример. Пусть необходимо составить распределение водителей по\r\n  машинам - какой водитель будет водить какую машину (за время одной смены).\r\n  Ясно, что водитель может либо быть выходным (без машины), либо получить в свое\r\n  распоряжение лишь одну. Он не может водить две машины одновременно.\r\n</p>\r\n<pre>    <code>\r\n        drivers\r\n        +----+--------+\r\n        | id | driver |\r\n        +----+--------+\r\n        |  1 | Mike   |\r\n        |  2 | Bob    |\r\n        |  3 | Tod    |\r\n        |  4 | Johnny |\r\n        |  5 | Steve  |\r\n        +----+--------+\r\n\r\n        cars\r\n        +----+------------+-----------+\r\n        | id | car        | driver_id |\r\n        +----+------------+-----------+\r\n        |  1 | Ford Focus |         5 |\r\n        |  2 | Kia Ceed   |         3 |\r\n        |  3 | BMW 7      |         4 |\r\n        |  4 | Smart      |         1 |\r\n        +----+------------+-----------+\r\n    </code>\r\n</pre>\r\n<h2>Один ко многим</h2>\r\n<p>\r\n  Связь один ко многим означает, что отдельной записи в таблице А может\r\n  соответствовать 0 или более записей в таблице В.\r\n</p>\r\n<p>\r\n  Рассмотрим пример. В таблице brands мы сохраним список брендов, а в таблице\r\n  cars_stock мы сохраним список машин, которые в данным момент есть в наличии\r\n  для продажи. Наполненные таблицы будут иметь следующий вид\r\n</p>\r\n<pre>    <code>\r\n        brands\r\n        +----+----------+\r\n        | id | brand    |\r\n        +----+----------+\r\n        |  1 | BMW      |\r\n        |  2 | Audi     |\r\n        |  3 | Kia      |\r\n        |  4 | Mercedes |\r\n        +----+----------+\r\n\r\n        cars_stock\r\n        +----+---------+----------+\r\n        | id | model   | brand_id |\r\n        +----+---------+----------+\r\n        |  1 | Ceed    |        3 |\r\n        |  2 | A6      |        2 |\r\n        |  3 | B class |        4 |\r\n        |  4 | A class |        4 |\r\n        |  5 | Q7      |        2 |\r\n        +----+---------+----------+\r\n    </code>\r\n</pre>\r\n<p>\r\n  Как видно из этого примера, каждому бренду может соответствовать несколько\r\n  моделей. Это и есть связь один ко многим.\r\n</p>\r\n<h2>Многие ко многим</h2>\r\n<p>\r\n  Связь многие ко многим означает, что одной записи в таблице А может\r\n  соответствовать 0 или более записей из таблицы В, и наоборот - одной записи в\r\n  таблице B может соответствовать 0 или более записей из таблицы А. Сразу\r\n  необходимо отметить, чтодля моделирования связи многие ко многим необходимо\r\n  использовать три таблицы, а не две (как для 1-1 и 1-многим).\r\n</p>\r\n<p>\r\n  Рассмотрим пример. Пусть нам необходимо смоделировать учет студентов, которые\r\n  посещают курсы языков программирования. Каждый студент может посещать любое\r\n  количество курсов. Это значит, что нам необходимо сохранить все возможные\r\n  комбинации: какие курсы посещает каждый студент.\r\n</p>\r\n<pre>    <code>\r\n        student\r\n        +----+-------+\r\n        | id | name  |\r\n        +----+-------+\r\n        |  1 | Andy  |\r\n        |  2 | John  |\r\n        |  3 | Bob   |\r\n        |  4 | Marie |\r\n        +----+-------+\r\n\r\n        Создадим таблицу с курсами:\r\n\r\n        course\r\n        +----+--------+\r\n        | id | name   |\r\n        +----+--------+\r\n        |  1 | Python |\r\n        |  2 | PHP    |\r\n        |  3 | Ruby   |\r\n        |  4 | C++    |\r\n        +----+--------+\r\n\r\n        Для учета того, какой студент куда ходит, создадим таблицу с комбинациями:\r\n\r\n        student_course\r\n        +----+------------+-----------+\r\n        | id | student_id | course_id |\r\n        +----+------------+-----------+\r\n        |  1 |          1 |         2 |\r\n        |  2 |          1 |         1 |\r\n        |  3 |          2 |         4 |\r\n        |  4 |          4 |         2 |\r\n        |  5 |          4 |         4 |\r\n        +----+------------+-----------+\r\n    </code>\r\n</pre>',1,11,12,'2020-12-06 21:12:50','2021-08-17 10:04:56');
INSERT INTO `infos` VALUES (29,'Query','Источники»\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-fundamentals\" role=\"button\">\r\n  devionity\r\n</a>\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://metanit.com/sql/mysql/2.5.php\" role=\"button\">\r\n  metanit\r\n</a>\r\n<h2>Создание БД</h2>\r\n\r\n<p>\r\n  <code>CREATE DATABASE my_db CHARACTER SET utf8 COLLATE utf8_general_ci ;\r\n  </code>\r\n</p>\r\n\r\n<h2>Создание таблицы</h2>\r\n<p></p>\r\n<pre>    <code>\r\n        CREATE TABLE student (\r\n        id INT AUTO_INCREMENT,\r\n        name VARCHAR(30),\r\n        age TINYINT,\r\n        phone VARCHAR(15),\r\n        PRIMARY KEY (id)\r\n        );\r\n    </code>\r\n    </pre>\r\nДля получения информации от созданной таблице используется оператор DESCRIBE:\r\n<pre>    <code>\r\n        DESCRIBE student ;\r\n    </code>\r\n</pre>\r\n<p></p>\r\n\r\n<h2>Удаление БД</h2>\r\n<pre>    <code>\r\n       DROP DATABASE my_db ; - удаление базы данных my_db\r\n       DROP TABLE my_table ; - удаление таблицы my_table\r\n    </code>\r\n</pre>\r\n\r\n<h2>Вставка данных: оператор INSERT</h2>\r\n<pre>    <code>\r\n      INSERT INTO &lt;таблица&gt;  [ ( &lt;названия полей&gt; ) ]  VALUES ( &lt;значения&gt; ) ;\r\n      INSERT INTO student VALUES ( NULL, \'Mike\', 25, \'345-65-78\' ) ;\r\n    </code>\r\n</pre>\r\nПри включении названий полей в запрос, можно ограничится теми, для которых\r\nнеобходимо задавать значения, например:\r\n<pre>    <code>\r\n      INSERT INTO student (name, age, phone) VALUES ( \'Mike\', 25, \'345-65-78\' ) ;\r\n    </code>\r\n</pre>\r\nДля вставки нескольких записей, можно указать несколько наборов значений:\r\n<pre>    <code>\r\n      INSERT INTO student (name, age, phone)\r\n      VALUES ( \'John\', 27, \'123-65-12\' ), ( \'Bob\', 23, \'456-12-55\' ) ;\r\n    </code>\r\n</pre>\r\n\r\n<h2>Агрегатные функции</h2>\r\n<ul>\r\n  <li>\r\n    <b><em>MIN(), MAX()</em></b> - минимальное максимальное значение\r\n  </li>\r\n  <li>\r\n    <b><em>SUM()</em></b> - сумма значений\r\n  </li>\r\n  <li>\r\n    <b><em>AVG()</em></b> - среднее значение\r\n  </li>\r\n  <li>\r\n    <b><em>COUNT()</em></b> - количество значений\r\n  </li>\r\n</ul>\r\n<p>\r\n  Оператор <b>HAVING</b> - это аналог WHERE, но для групп. Предложение HAVING\r\n  записывается после определения группы GROUP BY.\r\n</p>\r\n\r\n<h2>Оператор LIMIT</h2>\r\n<p>\r\n  Для управления количеством записей в результирующей таблице используется\r\n  оператор LIMIT. Этот оператор записывается в самом конце запроса и имеет\r\n  следующую конструкцию:\r\n</p>\r\n<pre>    <code>\r\n      SELECT ... ... ... LIMIT [offset, ] count\r\n    </code>\r\n</pre>\r\n<p>\r\n  Тут используются два параметра:\r\n</p>\r\n<ul>\r\n  <li>\r\n    <b><em>offset</em></b> - это номер строки в результирующей таблицы (от 0),\r\n    от которой необходимо отсчитывать записи\r\n  </li>\r\n  <li>\r\n    <b><em>count</em></b> - это число, которое означает то, сколько записей из\r\n    результирующей таблицы необходимо отобрать, начиная от offset.\r\n  </li>\r\n</ul>\r\n<p>\r\n  Параметр offset не является обязательным, если его не записывать, то отсчет\r\n  записей в таблице будет стартовать с нуля.\r\n</p>\r\n\r\n<h2>Общая конструкция SELECT</h2>\r\n<pre>    <code>\r\n      SELECT &lt;поля&gt;\r\n        FROM &lt;таблица (или таблицы)&gt;\r\n        WHERE &lt;критерий&gt;\r\n        GROUP BY &lt;поля для группировки&gt;\r\n        HAVING &lt;условия для групп&gt;\r\n        ORDER BY &lt;поля для сортировки&gt;\r\n        LIMIT &lt;параметры отбора записей&gt;\r\n    </code>\r\n</pre>\r\n\r\n<h2>Обновление данных: оператор UPDATE</h2><pre><code><pre><code class=\"hljs\">    UPDATE table SET col_1 = val_1, col_n = val_n, ... WHERE...</code></pre></code></pre>\r\n\r\n<h2>Удаление данных: оператор DELETE</h2>\r\n<pre>    <code>\r\n     DELETE FROM таблица WHERE критерий\r\n    </code>\r\n</pre>\r\n\r\n<h2>Редактирование структуры таблицы</h2>\r\n<p>\r\n  Для того, чтобы управлять структурой таблицы необходимо использовать\r\n  предложение <b>ALTER TABLE</b>, которое дает возможность добавлять, удалять\r\n  или редактировать столбцы таблицы.<br>\r\n  Для создания новых столбцов в предложении <b>ALTER TABLE</b> используется\r\n  оператор ADD после которого необходимо указать название столбца, его тип и\r\n  дополнительные атрибуты, например значение поля по умолчанию.\r\n</p>\r\n<pre>    <code>\r\n    ALTER TABLE student CHANGE COLUMN test_row tr TEXT;\r\n    ALTER TABLE student DROP COLUMN tr;\r\n    ALTER TABLE student DROP COLUMN test_row_2;\r\n    </code>\r\n</pre>\r\n\r\n<h2>Таблица по выборке</h2>\r\n<p>\r\n  Иногда бывает необходимо сохранить результирующую таблицу как отдельную\r\n  таблицу с конкретным названием. Для этого, фактически, необходимо совместить\r\n  операторы CREATE TABLE и SELECT - первый создаст таблицу, а второй предоставит\r\n  результирующую таблицу как основу\r\n</p>\r\n<pre>    <code>\r\n     CREATE TABLE my_new_table AS (SELECT ... )\r\n     CREATE TABLE test_table_2 AS (\r\n     SELECT c.id client_id, c.name as client, GROUP_CONCAT(DISTINCT pl.name)\r\n     FROM customers c\r\n     JOIN orders o ON c.id = o.customer_id\r\n     JOIN order_details od ON od.order_id = o.id\r\n     JOIN products p ON p.id = od.product_id\r\n     JOIN product_lines pl ON pl.id = p.product_line_id GROUP BY c.id\r\n     )\r\n    </code>\r\n</pre>\r\n<p>\r\n  Таким образом получим таблицу под названием test_table_2 в которой будут\r\n  сохранены клиенты и линейки товаров, которые они заказывали\r\n</p>\r\n\r\n<h2>Добавляем запись по выборке</h2>\r\n<pre>    <code>\r\n    INSERT INTO таблица [(поле-1, поле-2, ...)] SELECT ...\r\n    INSERT INTO test_table_2 (client_id, client) SELECT 634, \'Some guy\'\r\n    </code>\r\n</pre>\r\n\r\n<h2>Работа с представлениями</h2>\r\n<p>\r\n  Представления (Views) - это объект базы данных, который часто называют\r\n  \"виртуальной таблицей\". В одном из предыдущих уроков мы рассматривали вопрос\r\n  создания таблицы на основе выборки. Представление - это почти как отдельная\r\n  таблица с результатом выборки, но она на самом деле не содержит данных. При\r\n  обращении к представлению, данные извлекаются из обычных таблиц, но работа с\r\n  представлениями происходит как с обычными таблицами.<br>\r\n  Это удобно, если, к примеру, необходимо часто работать с определенными\r\n  записями таблицы или же работать с соединенными таблицами, не записывая каждый\r\n  раз само соединение в запросе выборки.\r\n</p>\r\n<pre>    <code>\r\n    CREATE VIEW customer_product_lines AS\r\n    SELECT c.id client_id, c.name as client, GROUP_CONCAT(DISTINCT pl.name)\r\n    FROM customers c\r\n    JOIN orders o ON c.id = o.customer_id\r\n    JOIN order_details od ON od.order_id = o.id\r\n    JOIN products p ON p.id = od.product_id\r\n    JOIN product_lines pl ON pl.id = p.product_line_id\r\n    GROUP BY c.id\r\n    </code>\r\n</pre>\r\n<p>\r\n  Удобство заключается в том, что теперь для получения данных про заказчиков и\r\n  их продуктовых линий мы можем написать запрос:\r\n</p>\r\n<pre>    <code>\r\n    SELECT * FROM customer_product_lines\r\n    </code>\r\n</pre>\r\n\r\n<h2>Использование JOIN</h2>\r\n<p>\r\n  Оператор <b>JOIN</b> позволяет объединять две и более таблиц в одну\r\n  (временную) таблицу для извлечения данных одним запросом. Для избегания\r\n  избыточности и дублирования данные в базе хранятся в разных таблицах. Получить\r\n  их одним запросом без объединения таблиц невозможно. А использование\r\n  нескольких запросов — не вариант — значительно увеличивает время загрузки\r\n  страницы. Кроме того, усложняет процесс обработки полученных данных.\r\n</p>\r\n\r\n<h2>INNER JOIN</h2>\r\n<p>\r\n  <b>INNER JOIN</b> тоже самое что и <b>JOIN</b><br>Ключевое слово\r\n  <b>&gt;INNER JOIN</b> возвращает строки, если есть хотя бы одно совпадение в\r\n  двух таблицах\r\n</p>\r\n<p>Синтаксис<br></p>\r\n<pre>    <code>\r\n        SELECT column_names [,....n]\r\n        FROM table1\r\n        INNER JOIN table2\r\n        ON table1.column_name = table2.column_name\r\n    </code>\r\n</pre>\r\n<p></p>\r\n<p>Мы хотим получить список всех лиц,имеющих любые заказы. Пример:</p>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-xl-2\">\r\n    Persons\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">id</th>\r\n          <th scope=\"col\">LastName</th>\r\n          <th scope=\"col\">FirstName</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th scope=\"row\">1</th>\r\n          <td>Jameson</td>\r\n          <td>John</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">2</th>\r\n          <td>Smith</td>\r\n          <td>Kate</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">3</th>\r\n          <td>Kristen</td>\r\n          <td>Olya</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div class=\"col-xl-2\">\r\n    Orders\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">id</th>\r\n          <th scope=\"col\">order</th>\r\n          <th scope=\"col\">person_id</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th scope=\"row\">1</th>\r\n          <td>77895</td>\r\n          <td>3</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">2</th>\r\n          <td>44678</td>\r\n          <td>3</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">3</th>\r\n          <td>22456</td>\r\n          <td>1</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">4</th>\r\n          <td>24562</td>\r\n          <td>1</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">5</th>\r\n          <td>34764</td>\r\n          <td>1</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div class=\"col-xl-5\">\r\n    Запрос\r\n    <pre>            <code>\r\n            SELECT Persons.LastName, Persons.FirstName, Orders.Order\r\n            FROM Persons\r\n            INNER JOIN Orders ON Persons.id=Orders.persons_id\r\n            ORDER BY Persons.LastName\r\n            </code>\r\n        </pre>\r\n  </div>\r\n  <div class=\"col-xl-3\">\r\n    Результат\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">LastName</th>\r\n          <th scope=\"col\">FirstName</th>\r\n          <th scope=\"col\">Order</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>22456</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>24562</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>77895</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>44678</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n<h2>LEFT JOIN</h2>\r\n<p>\r\n  Ключевое слово <b>LEFT JOIN</b> возвращает все строки из левой таблицы\r\n  (table1), даже если нет совпадаений из справой таблицы(table2)\r\n</p>\r\n<pre>    <code>\r\n        SELECT column_names [,... n]\r\n        FROM table1\r\n        LEFT JOIN table2 ON table1.column_name = table2.column_name\r\n    </code>\r\n</pre>\r\n\r\n<p>\r\n  Мы хотим получить список всех персон и их заказов -если таковы имеються.\r\n  Пример на предудщих таблицах orders i persons:\r\n</p>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-xl-5\">\r\n    Запрос\r\n    <pre>            <code>\r\n            SELECT Persons.LastName, Persons.FirstName, Orders.Order\r\n            FROM Persons\r\n            LEFT JOIN Orders ON Persons.id=Orders.persons_id\r\n            ORDER BY Persons.LastName\r\n            </code>\r\n        </pre>\r\n  </div>\r\n  <div class=\"col-xl-3\">\r\n    Результат\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">LastName</th>\r\n          <th scope=\"col\">FirstName</th>\r\n          <th scope=\"col\">Order</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>22456</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>24562</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>77895</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>44678</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Smith</th>\r\n          <td>kate</td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n<h2>RIGHT JOIN</h2>\r\n<p>\r\n  Ключевое слово <b>RIGHT JOIN</b> возвращает все строки из правой таблицы\r\n  (table2), даже если нет совпадаений из левой таблицы(table1)\r\n</p>\r\n<pre>    <code>\r\n        SELECT column_names [,... n]\r\n        FROM table1\r\n        RIGHT JOIN table2 ON table1.column_name = table2.column_name\r\n    </code>\r\n</pre>\r\n\r\n<p>\r\n  Мы хотим получить список всех заказов и персон, сделавших эти заказы,- если\r\n  таковы имеются. Пример на предудщих таблицах orders i persons:\r\n</p>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-xl-5\">\r\n    Запрос\r\n    <pre>            <code>\r\n            SELECT Persons.LastName, Persons.FirstName, Orders.Order\r\n            FROM Persons\r\n            RIGHT JOIN Orders ON Persons.id=Orders.persons_id\r\n            ORDER BY Persons.LastName\r\n            </code>\r\n        </pre>\r\n  </div>\r\n  <div class=\"col-xl-3\">\r\n    Результат\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">LastName</th>\r\n          <th scope=\"col\">FirstName</th>\r\n          <th scope=\"col\">Order</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>22456</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Jameson</th>\r\n          <td>John</td>\r\n          <td>24562</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>77895</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Kristen</th>\r\n          <td>Olya</td>\r\n          <td>44678</td>\r\n        </tr>\r\n        <tr>\r\n          <th></th>\r\n          <td></td>\r\n          <td>34764</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n<h2>Обьединение таблиц UNION</h2>\r\n<p>\r\n  Оператор <b>UNION</b> служит для объединения таблиц, а именно для того, чтобы\r\n  \"дорисовать\" одну результирующую таблицу под другой. Фактически это\r\n  объединение двух запросов в один.\r\n</p>\r\n<pre>    <code>\r\n    SELECT name FROM student\r\n    UNION\r\n    SELECT name FROM teacher;\r\n    </code>\r\n</pre>',1,11,6,'2020-12-06 21:12:50','2021-08-17 10:04:04');
INSERT INTO `infos` VALUES (31,'Joins','Источники»\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-fundamentals/join\" role=\"button\">\r\n    devionity\r\n</a>\r\nhttps://devionity.com/ru/courses/mysql-fundamentals/join',1,11,6,'2020-12-06 21:12:50','2021-08-17 10:00:17');
INSERT INTO `infos` VALUES (37,'Rebase','<h2>Git Rebase: руководство по использованию</h2>\r\n<p>Источники»\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://habr.com/ru/post/161009/\">\r\n        habr\r\n    </a>\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://learn.javascript.ru/screencast/git\">\r\n        javascript\r\n    </a>\r\n</p>\r\n<p>\r\n    <b>Rebase</b> — с ее помощью можно переписывать историю объединить,редактировать коммиты.\r\n</p>\r\n<h2>REBASE -i</h2>\r\n<p>\r\n    Изменение коммитов - удаление,изменения,изменения порядка\r\n</p><ul>\r\n    <li>\r\n        <b>pick,p</b> - скопировать коммит\r\n    </li>\r\n    <li>\r\n        <b>reword,r</b> - изменить сообщение коммита(в редакторе который ребейз вызовет позже)\r\n    </li>\r\n    <li>\r\n        <b>edit,e</b> - разширенное возможность по редактированию коммита(ребейз копирует коммиты по очереди,а edit\r\n        заставить ребейз остановиться после копи етого коммита и можно будет редактировать)\r\n    </li>\r\n    <li>\r\n        <b>squash,s</b> - изменения слить с предыдущим(обьединить). Не должен быть в первой строке\r\n    </li>\r\n    <li>\r\n        <b>fixup,f</b> -тоже что и squash, но сообщение коммита при етом отбрасывается\r\n    </li>\r\n    <li>\r\n        <b>exec,f</b> - -x < make test>\r\n    </li>\r\n    <li>\r\n        <b>drop,d</b> - пропустить коммит\r\n    </li>\r\n</ul>\r\n<p></p>\r\n\r\n<h2>MERGE vs REBASE</h2>\r\n<ul>\r\n    <li>\r\n        Порядок коммиттов при ребейз(при мердже в очередности в той последовательности,-слияние, в котором комитилось)\r\n    </li>\r\n    <li>\r\n        не сохраняет(перезаписывает) историю коммитов\r\n    </li>\r\n</ul>\r\n\r\n<p>\r\n    У нас есть две ветки — master и feature, обе локальные, feature была создана от master в состоянии A и содержит в\r\n    себе коммиты C, D и E. В ветку master после отделения от нее ветки feature был сделан 1 коммит B.\r\n</p>\r\n\r\n<p>\r\n    После применения операции rebase master в ветке feature, дерево коммитов будет иметь вид:\r\n</p>\r\n\r\n<p>\r\n    Обратите внимание, что коммиты C\', D\' и E\' — не равны C, D и E, они имеют другие хеши, но изменения (дельты),\r\n    которые они в себе несут, в идеале точно такие же. Отличие в коммитах обусловлено тем, что они имеют другую базу (в\r\n    первом случае — A, во втором — B), отличия в дельтах, если они есть, обусловлены разрешением конфликтных ситуаций,\r\n    возникших при rebase. Об этом чуть подробнее далее.\r\n</p>\r\n\r\n<p>\r\n    Процесс rebase-а детально<br><br>\r\n    Давайте теперь разберемся с механикой этого процесса, как именно дерево 1 превратилось в дерево 2?<br><br>\r\n    Напомню, перед rebase вы находтесь в ветке feature, то есть ваш HEAD смотрит на указатель feature, который в свою\r\n    очередь смотрит на коммит E. Идентификатор ветки master вы передаете в команду как аргумент:<br><br>\r\n    git rebase master<br><br>\r\n    Для начала git находит базовый коммит — общий родитель этих двух состояний. В данном случае это коммит A. Далее\r\n    двигаясь в направлении вашего текущего HEAD git вычисляет разницу для каждой пары коммитов, на первом шаге между A и\r\n    С, назовем ее ΔAC. Эта дельта применяется к текущему состоянию ветки master. Если при этом не возникает конфликтное\r\n    состояние, создается коммит C\', таким образом C\' = B + ΔAC. Ветки master и feature при этом не смещаются, однако,\r\n    HEAD перемещается на новый коммит (C\'), приводя ваш репозитарий состояние «отделеной головы» (detached HEAD).\r\n</p>',1,18,1,'2020-12-06 21:12:50','2021-08-17 09:50:27');
INSERT INTO `infos` VALUES (39,'Merge','<p>Источники»\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://itif.ru/otlichiya-myisam-innodb/\" role=\"button\">\r\n        itif.ru\r\n    </a>\r\n</p>',1,18,1,'2020-12-06 21:12:50','2021-08-17 09:47:53');
INSERT INTO `infos` VALUES (41,'Cherry pick','<h2><span style=\"font-size: 0.9rem;\">Источники»\r\n    </span><a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://learn.javascript.ru/screencast/git#copy-cherry-pick\" role=\"button\">\r\n        learn.javascript.ru</a><br></h2>',1,18,10,'2020-12-06 21:12:50','2021-08-17 09:47:31');
INSERT INTO `infos` VALUES (45,'Chmod','<div>\r\n  <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://ru.wikipedia.org/wiki/Chmod\" role=\"button\">\r\n    https://ru.wikipedia.org/wiki/Chmod</a><pre><code>chmod [options] [permissions] [file]</code></pre>\r\n  Опции:\r\n  <ul>\r\n    <li>\r\n      <b>-R</b> рекурсивное изменение прав доступа для каталогов и их\r\n      содержимого\r\n    </li>\r\n    <li>\r\n      <b>-f</b> не выдавать сообщения об ошибке для файлов, чьи права не могут\r\n      быть изменены.\r\n    </li>\r\n    <li>\r\n      <b>-v</b> подробно описывать действие или отсутствие действия для каждого\r\n      файла.\r\n    </li>\r\n  </ul>\r\n</div>\r\n<div>\r\n  <h2>Использование команды в числовом виде</h2>\r\n  <pre><code>chmod 755 [permissions] [file]</code></pre>\r\n  <table class=\"table table-bordered\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">владелец</th>\r\n        <th scope=\"col\">группа</th>\r\n        <th scope=\"col\">остальные</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <th scope=\"row\">восьмеричное значение</th>\r\n        <td>7</td>\r\n        <td>5</td>\r\n        <td>5</td>\r\n      </tr>\r\n      <tr>\r\n        <th>символьная запись</th>\r\n        <td>rwx</td>\r\n        <td>r-x</td>\r\n        <td>r-x</td>\r\n      </tr>\r\n      <tr>\r\n        <th>обозначение типа пользователя</th>\r\n        <td>u</td>\r\n        <td>g</td>\r\n        <td>o</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <table class=\"table table-bordered\" style=\"text-align:center\">\r\n    <caption>\r\n      Три варианта записи прав пользователя\r\n    </caption>\r\n    <thead>\r\n      <tr>\r\n        <th>двоичная</th>\r\n        <th>восьмеричная</th>\r\n        <th>символьная</th>\r\n        <th>права на файл</th>\r\n        <th>права на каталог</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>000</td>\r\n        <td>0</td>\r\n        <td><tt>---</tt></td>\r\n        <td>нет</td>\r\n        <td>нет</td>\r\n      </tr>\r\n      <tr>\r\n        <td>001</td>\r\n        <td>1</td>\r\n        <td><tt>--x</tt></td>\r\n        <td>выполнение</td>\r\n        <td>чтение файлов и их свойств</td>\r\n      </tr>\r\n      <tr>\r\n        <td>010</td>\r\n        <td>2</td>\r\n        <td><tt>-w-</tt></td>\r\n        <td>запись</td>\r\n        <td>нет</td>\r\n      </tr>\r\n      <tr>\r\n        <td>011</td>\r\n        <td>3</td>\r\n        <td><tt>-wx</tt></td>\r\n        <td>запись и выполнение</td>\r\n        <td>всё, кроме чтения списка файлов</td>\r\n      </tr>\r\n      <tr>\r\n        <td>100</td>\r\n        <td>4</td>\r\n        <td><tt>r--</tt></td>\r\n        <td>чтение</td>\r\n        <td>чтение имён файлов</td>\r\n      </tr>\r\n      <tr>\r\n        <td>101</td>\r\n        <td>5</td>\r\n        <td><tt>r-x</tt></td>\r\n        <td>чтение и выполнение</td>\r\n        <td>доступ на чтение</td>\r\n      </tr>\r\n      <tr>\r\n        <td>110</td>\r\n        <td>6</td>\r\n        <td><tt>rw-</tt></td>\r\n        <td>чтение и запись</td>\r\n        <td>чтение имён файлов</td>\r\n      </tr>\r\n      <tr>\r\n        <td>111</td>\r\n        <td>7</td>\r\n        <td><tt>rwx</tt></td>\r\n        <td>все права</td>\r\n        <td>все права</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h2>Популярные значения</h2>\r\n  <pre>        <code>\r\n    400 (-r--------)\r\n    Владелец имеет право чтения; никто другой не имеет права выполнять никакие действия\r\n    644 (-rw-r--r--)\r\n    Все пользователи имеют право чтения; владелец может редактировать\r\n    660 (-rw-rw----)\r\n    Владелец и группа могут читать и редактировать; остальные не имеют права выполнять никаких действий\r\n    664 (-rw-rw-r--)\r\n    Все пользователи имеют право чтения; владелец и группа могут редактировать\r\n    666 (-rw-rw-rw-)\r\n    Все пользователи могут читать и редактировать\r\n    700 (-rwx------)\r\n    Владелец может читать, записывать и запускать на выполнение; никто другой не имеет права выполнять никакие действия\r\n    744 (-rwxr--r--)\r\n    Каждый пользователь может читать, владелец имеет право редактировать и запускать на выполнение\r\n    755 (-rwxr-xr-x)\r\n    Каждый пользователь имеет право читать и запускать на выполнение; владелец может редактировать\r\n    777 (-rwxrwxrwx)\r\n    Каждый пользователь может читать, редактировать и запускать на выполнение\r\n    1555 (-r-xr-xr-t)\r\n    Каждый пользователь имеет право читать и запускать на выполнение; удалить файл может только владелец этого файла\r\n    2555 (-r-xr-sr-x)\r\n    Каждый пользователь имеет право читать и запускать на выполнение с правами группы (user group) владельца файла\r\n    0440 (-r--r-----)\r\n    Владелец и группа имеет право чтения никто другой не имеет права выполнять никакие действия\r\n    4555 (-r-sr-xr-x)\r\n    Каждый пользователь имеет право читать и запускать на выполнение с правами владельца файла\r\n        </code>\r\n    </pre>\r\n</div>\r\n<div>\r\n  <h2>Использование команды в символьном виде</h2>\r\n  <pre><code> $ chmod [references][operator][permission] file ...</code></pre>\r\n  <div class=\"row\">\r\n    <div class=\"col-xl-4 col-lg-4 col-md-4\">\r\n      <table class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Reference</th>\r\n            <th scope=\"col\">Class</th>\r\n            <th scope=\"col\">Описание</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">u</th>\r\n            <td>7</td>\r\n            <td>5</td>\r\n          </tr>\r\n          <tr>\r\n            <th>символьная запись</th>\r\n            <td>user</td>\r\n            <td>Владелец файла</td>\r\n          </tr>\r\n          <tr>\r\n            <th>g</th>\r\n            <td>group</td>\r\n            <td>Пользователи, входящие в группу владельца файла</td>\r\n          </tr>\r\n          <tr>\r\n            <th>o</th>\r\n            <td>others</td>\r\n            <td>Остальные пользователи</td>\r\n          </tr>\r\n          <tr>\r\n            <th>a</th>\r\n            <td>all</td>\r\n            <td>Все пользователи (или ugo)</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"col-xl-4 col-lg-4 col-md-4\">\r\n      <table class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Operator</th>\r\n            <th scope=\"col\">Описание</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">+</th>\r\n            <td>добавить определенные права</td>\r\n          </tr>\r\n          <tr>\r\n            <th>-</th>\r\n            <td>удалить определенные права</td>\r\n          </tr>\r\n          <tr>\r\n            <th>=</th>\r\n            <td>установить определенные права</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"col-xl-4 col-lg-4 col-md-4\">\r\n      <table class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Mode</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Описание</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">r</th>\r\n            <td>read</td>\r\n            <td>чтение файла или содержимого каталога</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">w</th>\r\n            <td>write</td>\r\n            <td>запись в файл или в каталог</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">x</th>\r\n            <td>execute</td>\r\n            <td>выполнение файла или чтение содержимого каталога</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <h2>Примеры использования команды в символьном виде</h2>\r\n  Установить права «rwxr-xr-x» (0755) для файла:\r\n</div>\r\n<p></p><pre><code class=\"hljs\">chmod u=rwx,g=rx,o=rx filename</code></pre><p></p>\r\n<p>\r\n  Установить права на выполнение для владельца файла, удалить права на\r\n  выполнение у группы, удалить права на запись и выполнение у остальных\r\n  пользователей:\r\n</p>\r\n<p></p><pre><code class=\"hljs\">chmod u+x,g-x,o-wx filename</code></pre><p></p>\r\n<p>Установить рекурсивно права на чтение для всех пользователей:</p>\r\n<p></p><pre><code class=\"hljs\">chmod -R a+r directory</code></pre><p></p>',1,22,10,'2020-12-06 21:12:50','2021-08-17 09:06:04');
INSERT INTO `infos` VALUES (49,'Main','<h2>Docker Терминология</h2>\r\n<ul>\r\n    <li>\r\n        <b>Контейнер</b> – это исполняемый экземпляр, который инкапсулирует\r\n        требуемое программное обеспечение. Он состоит из образов. Его можно легко\r\n        удалить и снова создать за короткий промежуток времени.\r\n    </li>\r\n    <li>\r\n        <b>Образ</b> – базовый элемент каждого контейнера. В зависимости от образа,\r\n        может потребоваться некоторое время для его создания.\r\n    </li>\r\n    <li>\r\n        <b>Порт</b> – это порт TCP/UDP в своем первоначальном значении. Чтобы все\r\n        было просто, предположим, что порты могут быть открыты во внешнем мире или\r\n        подключены к контейнерам (доступны только из этих контейнеров и невидимы для\r\n        внешнего мира).\r\n    </li>\r\n    <li>\r\n        <b>Том</b> – описывается как общая папка. Тома инициализируются при создании\r\n        контейнера и предназначены для сохранения данных, независимо от жизненного\r\n        цикла контейнера.\r\n    </li>\r\n    <li>\r\n        <b>Реестр</b> – это сервер, на котором хранятся образы. Сравним его с\r\n        GitHub: вы можете вытащить образ из реестра, чтобы развернуть его локально,\r\n        и так же локально можете вносить в реестр созданные образы.\r\n    </li>\r\n    <li>\r\n        <b>Docker Hub</b> – публичный репозиторий с интерфейсом, предоставляемый\r\n        Докер Inc. Он хранит множество образов. Ресурс является источником\r\n        «официальных» образов, сделанных командой Докер или созданных в\r\n        сотрудничестве с разработчиком ПО. Для официальных образов перечислены их\r\n        потенциальные уязвимости. Эта информация открыта для любого\r\n        зарегистрированного пользователя. Доступны как бесплатные, так и платные\r\n        аккаунты.\r\n    </li>\r\n</ul>\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://proglib.io/p/docker/\" role=\"button\">\r\n    https://proglib.io/p/docker/\r\n</a>\r\n<a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://docs.docker.com/get-started/\" role=\"button\">\r\n    Install\r\n</a>\r\n\r\n<h2>Пример 1: Hello World</h2>\r\n<pre><code>docker run ubuntu /bin/echo \'Hello world\'</code></pre>\r\n<ul>\r\n    <li>docker run – это команда запуска контейнера.</li>\r\n    <li>\r\n        ubuntu – образ, который вы запускаете (например, образ операционной системы\r\n        Ubuntu). Когда вы его указываете, Докер сначала анализирует элемент в\r\n        разрезе хоста.\r\n    </li>\r\n    <li>\r\n        /bin/echo ‘Hello world’ – команда, которая будет запускаться внутри нового\r\n        контейнера. Данный контейнер просто выводит «Hello world» и останавливает\r\n        выполнение.\r\n    </li>\r\n</ul>\r\n<p>\r\n    Теперь попробуем создать интерактивную оболочку внутри контейнера:\r\n</p>\r\n<pre><code>docker run -i -t --rm ubuntu /bin/bash</code> </pre>\r\n<ul>\r\n    <li>\r\n        -i позволяет создавать интерактивное соединение, захватывая стандартный вход\r\n        (STDIN) контейнера.\r\n    </li>\r\n    <li>-t присваивает псевдо-tty или терминал внутри нового контейнера.</li>\r\n    <li>\r\n        —rm требуется для автоматического удаления контейнера при выходе из\r\n        процесса. По умолчанию контейнеры не удаляются.\r\n    </li>\r\n</ul>\r\n<p>\r\n    Если вы хотите, чтобы контейнер работал после окончания сеанса, вам необходимо\r\n    его «демонизировать»\r\n</p>\r\n<pre><code> docker run --name daemon -d ubuntu /bin/sh -c \"while true; do echo hello world; sleep 1; done\"</code></pre>\r\nДавайте посмотрим, какие контейнеры у нас есть на данный момент:\r\n<pre><code> ocker ps -a </code> </pre>\r\n<ul>\r\n    <li>docker ps – команда для перечисления контейнеров.</li>\r\n    <li>\r\n        -a показывает все контейнеры (без -a ps покажет только запущенные\r\n        контейнеры).\r\n    </li>\r\n</ul>\r\n<p>\r\n    Примечание: второй контейнер (с интерактивной оболочкой) отсутствует, потому\r\n    что мы устанавливаем параметр -rm, в результате чего этот контейнер\r\n    автоматически удаляется после выполнения.\r\n</p>\r\n<p>\r\n    Давайте проверим журналы и посмотрим, что делает контейнер-демон прямо сейчас:\r\n</p>\r\n<pre><code>docker logs -f daemon</code></pre>\r\n<p>\r\n    Теперь давайте остановим\\запустим контейнер-демон:\r\n</p>\r\n<pre><code>docker stop daemon\r\ndocker start daemon\r\n</code></pre>\r\n<p>Теперь остановим его и удалим все контейнеры вручную:</p>\r\n<pre> <code>\r\ndocker stop daemon\r\ndocker rm < your first container name >\r\ndocker rm daemon\r\n</code></pre>\r\n\r\n<h2>Запись Dockerfile</h2>\r\n<p>\r\n    Чтобы создать свой образ, сперва вам нужно создать Dockerfile: это текстовый\r\n    файл с инструкциями и аргументами. Краткое описание инструкций, которые мы\r\n    собираемся использовать в примере:\r\n</p>\r\n\r\n<h2>Заметки</h2>\r\n<p>DockerHub -лежат все образы</p>\r\n<p>скачать образ и запустить образ</p>\r\n<pre><code>docker run [image]</code></pre>\r\n<p>список образов</p>\r\n<pre><code>docker images</code></pre>\r\n<p>показывает список подходящих по поиску образов,ищет на dockerHub</p>\r\n<pre><code>docker search [image name]</code></pre>\r\n<p>скачать образ</p>\r\n<pre><code>docker pull [image name] </code></pre>\r\n<p>d - в бекраунде i -интерактивно p -перенаправление портов, - 8080 контейнер dockerPort,1234 - на локальном компе</p>\r\n<pre><code>docker -d -it -p 1234:8080  [image]</code></pre>\r\n<p>delete container</p>\r\n<pre><code>docker rm  [container] </code></pre>\r\n<p>delete image</p>\r\n<pre><code>docker rmi  [image] </code></pre>\r\n<p>создать образ test с тагом(-t) v1 локально(.)</p>\r\n<pre><code>docker build -t test:v1 . </code></pre>\r\n<p>Зайти в консоль контейнера</p>\r\n<pre><code>docker exec -it [containerID] /bin/bash</code></pre>\r\n<p> Сохранить изменения контейнера dca8b8fe8685(зайти итерактивно и что-то изменить) в образ test:v2 </p>\r\n<pre><code>docker commit dca8b8fe8685 test:v2</code></pre>\r\n\r\n<h3>Docker Build</h3>\r\n<p>Контейнер собирается из файла <b>Dockerfile</b>. Пример:</p>\r\n<pre><code>\r\n FROM ubuntu:18.04\r\n MAINTAINER vitaliy ilinov\r\n ENV DEBIAN_FRONTEND=noninteractive \\\r\n     ONE =1\r\n ARG PHP_VERSION=7.2\r\n RUN apt-get update && apt-get install\r\n COPY from/path /to/path/\r\n WORKDIR /var/www/app/\r\n CMD /to/path/entrypoint.sh\r\n    </code></pre>\r\n\r\n<ul>\r\n    <li><b>FROM</b> – задать базовый образ</li>\r\n    <li><b>MAINTAINER</b> – Владелец</li>\r\n    <li><b>RUN</b> – выполнить команду в контейнере</li>\r\n    <li><b>ENV</b> – задать переменную среды</li>\r\n    <li><b>ARG</b> – Аргументы при билде,с дефолтным значением.</li>\r\n    <li><b>COPY</b> – Копирует данные в контейнер</li>\r\n    <li><b>WORKDIR</b> – установить рабочий каталог</li>\r\n    <li><b>CMD</b> – установить исполняемый файл для контейнера</li>\r\n</ul>\r\n<p></p>\r\n<p>\r\n    Запуск построения контейнера происходит с помощью:\r\n</p>\r\n<pre>\r\n    <code>\r\n         docker build \\\r\n        --build-arg PHP_VERSION=$(PHP_VERSION) \\\r\n        --force-rm  \\\r\n        -t $(IMAGE_NAME) . \\\r\n     	--no-cache\r\n    </code>\r\n</pre>\r\n\r\n<ul>\r\n    <li><b>build-arg</b> – аргументы при билде контейнера</li>\r\n    <li><b>t</b> – Тег билда</li>\r\n    <li><b>force-rm</b> – Always remove intermediate containers</li>\r\n    <li><b>--no-cache</b> – Do not use cache when building the image</li>\r\n</ul>\r\n<p></p>\r\n\r\n<h3>Docker контейнер</h3>\r\n<p>Контейнер собирается из файла <b>Dockerfile</b>. Пример:</p>\r\n<pre>\r\n    <code>\r\n        docker run -d \\\r\n        --name $(IMAGE_NAME) \\\r\n        -v ${PWD}:/var/www/app/ \\\r\n        -p 80:80 \\\r\n        $(IMAGE_NAME)\r\n \r\n        docker exec -ti $(IMAGE_NAME) bash\r\n \r\n       @docker logs $(IMAGE_NAME)\r\n    </code>\r\n</pre>\r\n\r\n<ul>\r\n    <li><b>t</b> – Allocate a pseudo-TTY</li>\r\n    <li><b>i</b> – Keep STDIN open even if not attached</li>\r\n    <li><b>d</b> – Run container in background and print container ID</li>\r\n    <li><b>--name</b> – Имя контейнера</li>\r\n    <li><b>p</b> – Publish a container\'s port(s) to the host</li>\r\n    <li><b>-v, --volume list </b> – Bind mount a volume</li>\r\n    <li><b>$(IMAGE_NAME)</b> – container name</li>\r\n</ul>',1,24,1,'2020-12-06 21:12:50','2021-08-17 09:45:34');
INSERT INTO `infos` VALUES (68,'Builder','<h2>\r\n  Строитель\r\n  <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/builder\">\r\n    refactoring.guru\r\n  </a>\r\n  <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://tproger.ru/translations/design-patterns-simple-words-1/#14\">\r\n    Интересный пример\r\n  </a>\r\n</h2>\r\n<p>\r\n  <b>Строитель</b> — это порождающий паттерн проектирования, который позволяет\r\n  создавать сложные объекты пошагово. Строитель даёт возможность использовать\r\n  один и тот же код строительства для получения разных представлений объектов.\r\n</p>\r\n<p>\r\n  <b>Проблема</b>давайте подумаем о том, как создать объект Дом. Чтобы построить\r\n  стандартный дом, нужно поставить 4 стены, установить двери, вставить пару окон\r\n  и положить крышу. Но что, если вы хотите дом побольше да посветлее, имеющий\r\n  сад, бассейн и прочее добро?\r\n</p>\r\n<p>\r\n  Самое простое решение — расширить класс Дом, создав подклассы для всех\r\n  комбинаций параметров дома. Проблема такого подхода — это громадное количество\r\n  классов, которые вам придётся создать.\r\n</p>\r\n<p>\r\n  Чтобы не плодить подклассы, вы можете подойти к решению с другой стороны. Вы\r\n  можете создать гигантский конструктор Дома, принимающий уйму параметров для\r\n  контроля над создаваемым продуктом. Действительно, это избавит вас от\r\n  подклассов, но приведёт к другой проблеме.\r\n</p>\r\n<pre>    <code class=\"php\">\r\n        new House(4,2,4,true,null,null,null,...);\r\n        new House(4,2,4,true,true,true,true,...);\r\n    </code>\r\n</pre>\r\n<p>\r\n  Большая часть этих параметров будет простаивать, а вызовы конструктора будут\r\n  выглядеть монструозно из-за длинного списка параметров. К примеру, далеко не\r\n  каждый дом имеет бассейн, поэтому параметры, связанные с бассейнами, будут\r\n  простаивать бесполезно в 99% случаев.\r\n</p>\r\n<p>\r\n  <b>Решение</b> Паттерн Строитель предлагает вынести конструирование объекта за\r\n  пределы его собственного класса, разбить процесс конструирования объекта на\r\n  отдельные шаги (например, построитьСтены, вставитьДвери и другие). Чтобы\r\n  создать объект, вам нужно поочерёдно вызывать методы строителя. Причём не\r\n  нужно запускать все шаги, а только те, что нужны для производства объекта\r\n  определённой конфигурации.\r\n</p>\r\n<p>\r\n  Зачастую один и тот же шаг строительства может отличаться для разных вариаций\r\n  производимых объектов. Например, деревянный дом потребует строительства стен\r\n  из дерева, а каменный — из камня.\r\n</p>\r\n<p>\r\n  В этом случае вы можете создать несколько классов строителей, выполняющих одни\r\n  и те же шаги по-разному. Используя этих строителей в одном и том же\r\n  строительном процессе, вы сможете получать на выходе различные объекты.\r\n</p>\r\n\r\n<p>\r\n  Например, один строитель делает стены из дерева и стекла, другой из камня и\r\n  железа, третий из золота и бриллиантов. Вызвав одни и те же шаги\r\n  строительства, в первом случае вы получите обычный жилой дом, во втором —\r\n  маленькую крепость, а в третьем — роскошное жилище. Замечу, что код, который\r\n  вызывает шаги строительства, должен работать со строителями через общий\r\n  интерфейс, чтобы их можно было свободно взаимозаменять.\r\n</p>\r\n\r\n<p>\r\n  Вы можете пойти дальше и выделить вызовы методов строителя в отдельный класс,\r\n  называемый директором. В этом случае директор будет задавать порядок шагов\r\n  строительства, а строитель — выполнять их. Директор знает, какие шаги должен\r\n  выполнить объект-строитель, чтобы произвести продукт. Отдельный класс\r\n  директора не является строго обязательным. Вы можете вызывать методы строителя\r\n  и напрямую из клиентского кода. Тем не менее, директор полезен, если у вас\r\n  есть несколько способов конструирования продуктов, отличающихся порядком и\r\n  наличием шагов конструирования. В этом случае вы сможете объединить всю эту\r\n  логику в одном классе. Такая структура классов полностью скроет от клиентского\r\n  кода процесс конструирования объектов. Клиенту останется только привязать\r\n  желаемого строителя к директору, а затем получить у строителя готовый\r\n  результат.\r\n</p>\r\n\r\n<h3>Пример из реальной жизни</h3>\r\n<p>\r\n  Одним из лучших применений паттерна <b>Строитель</b> является конструктор\r\n  запросов SQL. Интерфейс Строителя определяет общие шаги, необходимые для\r\n  построения основного SQL-запроса. В тоже время Конкретные Строители,\r\n  соответствующие различным диалектам SQL, реализуют эти шаги, возвращая части\r\n  SQL-запросов, которые могут быть выполнены в данном движке базы данных.\r\n</p>\r\n\r\n<pre>    <code class=\"php\">\r\n  /**\r\n * Интерфейс Строителя объявляет набор методов для сборки SQL-запроса.\r\n * Все шаги построения возвращают текущий объект строителя, чтобы обеспечить\r\n * цепочку: $builder->select(...)->where(...)\r\n */\r\n\r\ninterface SQLQueryBuilder\r\n{\r\n    public function select(string $table, array $fields): SQLQueryBuilder;\r\n\r\n    public function where(string $field, string $value, string $operator = \'=\'): SQLQueryBuilder;\r\n\r\n    public function limit(int $start, int $offset): SQLQueryBuilder;\r\n\r\n    // +100 других методов синтаксиса SQL...\r\n\r\n    public function getSQL(): string;\r\n}\r\n\r\n/**\r\n * Каждый Конкретный Строитель соответствует определённому диалекту SQL и может\r\n * реализовать шаги построения немного иначе, чем остальные.\r\n * Этот Конкретный Строитель может создавать SQL-запросы, совместимые с MySQL.\r\n */\r\nclass MysqlQueryBuilder implements SQLQueryBuilder\r\n{\r\n    protected $query;\r\n\r\n    protected function reset(): void\r\n    {\r\n        $this->query = new \\stdClass;\r\n    }\r\n\r\n    /**\r\n     * Построение базового запроса SELECT.\r\n     */\r\n    public function select(string $table, array $fields): SQLQueryBuilder\r\n    {\r\n        $this->reset();\r\n        $this->query->base = \"SELECT \" . implode(\", \", $fields) . \" FROM \" . $table;\r\n        $this->query->type = \'select\';\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Добавление условия WHERE.\r\n     */\r\n    public function where(string $field, string $value, string $operator = \'=\'): SQLQueryBuilder\r\n    {\r\n        if (!in_array($this->query->type, [\'select\', \'update\', \'delete\'])) {\r\n            throw new \\Exception(\"WHERE can only be added to SELECT, UPDATE OR DELETE\");\r\n        }\r\n        $this->query->where[] = \"$field $operator \'$value\'\";\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Добавление ограничения LIMIT.\r\n     */\r\n    public function limit(int $start, int $offset): SQLQueryBuilder\r\n    {\r\n        if (!in_array($this->query->type, [\'select\'])) {\r\n            throw new \\Exception(\"LIMIT can only be added to SELECT\");\r\n        }\r\n        $this->query->limit = \" LIMIT \" . $start . \", \" . $offset;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Получение окончательной строки запроса.\r\n     */\r\n    public function getSQL(): string\r\n    {\r\n        $query = $this->query;\r\n        $sql = $query->base;\r\n        if (!empty($query->where)) {\r\n            $sql .= \" WHERE \" . implode(\' AND \', $query->where);\r\n        }\r\n        if (isset($query->limit)) {\r\n            $sql .= $query->limit;\r\n        }\r\n        $sql .= \";\";\r\n        return $sql;\r\n    }\r\n}\r\n\r\n/**\r\n * Этот Конкретный Строитель совместим с PostgreSQL. Хотя Postgres очень похож\r\n * на Mysql, в нем всё же есть ряд отличий. Чтобы повторно использовать общий\r\n * код, мы расширяем его от строителя MySQL, переопределяя некоторые шаги\r\n * построения.\r\n */\r\nclass PostgresQueryBuilder extends MysqlQueryBuilder\r\n{\r\n    /**\r\n     * Помимо прочего, PostgreSQL имеет несколько иной синтаксис LIMIT.\r\n     */\r\n    public function limit(int $start, int $offset): SQLQueryBuilder\r\n    {\r\n        parent::limit($start, $offset);\r\n\r\n        $this->query->limit = \" LIMIT \" . $start . \" OFFSET \" . $offset;\r\n\r\n        return $this;\r\n    }\r\n    // + тонны других переопределений...\r\n}\r\n\r\n/**\r\n * Обратите внимание, что клиентский код непосредственно использует объект\r\n * строителя. Назначенный класс Директора в этом случае не нужен, потому что\r\n * клиентский код практически всегда нуждается в различных запросах, поэтому\r\n * последовательность шагов конструирования непросто повторно использовать.\r\n * Поскольку все наши строители запросов создают продукты одного типа (это\r\n * строка), мы можем взаимодействовать со всеми строителями, используя их общий\r\n * интерфейс. Позднее, если мы реализуем новый класс Строителя, мы сможем\r\n * передать его экземпляр существующему клиентскому коду, не нарушая его,\r\n * благодаря интерфейсу SQLQueryBuilder.\r\n */\r\nfunction clientCode(SQLQueryBuilder $queryBuilder)\r\n{\r\n    // ...\r\n\r\n    $query = $queryBuilder\r\n        ->select(\"users\", [\"name\", \"email\", \"password\"])\r\n        ->where(\"age\", 18, \">\")\r\n        ->where(\"age\", 30, \"\")\r\n        ->limit(10, 20)\r\n        ->getSQL();\r\n\r\n    echo $query;\r\n\r\n    // ...\r\n}\r\n\r\n/**\r\n * Приложение выбирает подходящий тип строителя запроса в зависимости от текущей\r\n * конфигурации или настроек среды.\r\n */\r\n// if ($_ENV[\'database_type\'] == \'postgres\') {\r\n//     $builder = new PostgresQueryBuilder(); } else {\r\n//     $builder = new MysqlQueryBuilder; }\r\n//\r\n// clientCode($builder);\r\n\r\necho \"Testing MySQL query builder:\\n\";\r\nclientCode(new MysqlQueryBuilder);\r\n\r\necho \"\\n\\n\";\r\n\r\necho \"Testing PostgresSQL query builder:\\n\";\r\nclientCode(new PostgresQueryBuilder);\r\n    </code>\r\n</pre>\r\n\r\n<h3>Пример из реальной жизни</h3>\r\n<p>\r\n  Представьте, что вы пришли в McDonalds и заказали конкретный продукт,\r\n  например, БигМак, и вам готовят его без лишних вопросов. Это пример простой\r\n  фабрики. Но есть случаи, когда логика создания может включать в себя больше\r\n  шагов. Например, вы хотите индивидуальный сэндвич в Subway: у вас есть\r\n  несколько вариантов того, как он будет сделан. Какой хлеб вы хотите? Какие\r\n  соусы использовать? Какой сыр? В таких случаях на помощь приходит шаблон\r\n  «Строитель».\r\n</p>\r\n\r\n<p>\r\n  <b>Простыми словами:</b> Шаблон позволяет вам создавать различные виды\r\n  объекта, избегая засорения конструктора. Он полезен, когда может быть\r\n  несколько видов объекта или когда необходимо множество шагов, связанных с его\r\n  созданием.\r\n</p>\r\n\r\n<pre>    <code class=\"php\">\r\n/**\r\n * Интерфейс Строителя объявляет набор методов для сборки SQL-запроса.\r\n *\r\n * Все шаги построения возвращают текущий объект строителя, чтобы обеспечить\r\n * цепочку: $builder->select(...)->where(...)\r\n */\r\n\r\ninterface SQLQueryBuilder\r\n{\r\n    public function select(string $table, array $fields): SQLQueryBuilder;\r\n\r\n    public function where(string $field, string $value, string $operator = \'=\'): SQLQueryBuilder;\r\n\r\n    public function limit(int $start, int $offset): SQLQueryBuilder;\r\n\r\n    // +100 других методов синтаксиса SQL...\r\n\r\n    public function getSQL(): string;\r\n}\r\n\r\n\r\nclass Burger\r\n{\r\n    protected $size;\r\n\r\n    protected $cheese = false;\r\n\r\n    protected $pepperoni = false;\r\n\r\n    protected $lettuce = false;\r\n\r\n    protected $tomato = false;\r\n\r\n    public function __construct(BurgerBuilder $builder)\r\n    {\r\n        $this->size = $builder->size;\r\n        $this->cheese = $builder->cheese;\r\n        $this->pepperoni = $builder->pepperoni;\r\n        $this->lettuce = $builder->lettuce;\r\n        $this->tomato = $builder->tomato;\r\n    }\r\n}\r\n\r\nclass BurgerBuilder\r\n{\r\n    public $size;\r\n\r\n    public $cheese = false;\r\n\r\n    public $pepperoni = false;\r\n\r\n    public $lettuce = false;\r\n\r\n    public $tomato = false;\r\n\r\n    public function __construct(int $size)\r\n    {\r\n        $this->size = $size;\r\n    }\r\n\r\n    public function addPepperoni()\r\n    {\r\n        $this->pepperoni = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addLettuce()\r\n    {\r\n        $this->lettuce = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addCheese()\r\n    {\r\n        $this->cheese = true;\r\n        return $this;\r\n    }\r\n\r\n    public function addTomato()\r\n    {\r\n        $this->tomato = true;\r\n        return $this;\r\n    }\r\n\r\n    public function build(): Burger\r\n    {\r\n        return new Burger($this);\r\n    }\r\n}\r\n\r\n//example:\r\n$burger = (new BurgerBuilder(14))\r\n    ->addPepperoni()\r\n    ->addLettuce()\r\n    ->addTomato()\r\n    ->build();\r\n    </code>\r\n</pre>',1,31,5,'2020-12-06 21:12:50','2021-08-17 10:42:04');
INSERT INTO `infos` VALUES (73,'Install mysql on ubuntu','<pre><code class=\"hljs \">sudo apt update</code></pre>\r\n<p>\r\n  Затем установите необходимые пакеты:\r\n</p>\r\n<pre><code class=\"hljs \">sudo apt install mysql-server mysql-client</code></pre>\r\n<p>\r\n  Кроме того, желательно проверить, запущенна ли служба MySQL:\r\n</p>\r\n<pre><code class=\"hljs \">sudo systemctl status mysql</code></pre>\r\n<h2>Настройка MySQL</h2>\r\n<p>\r\n  В случае новой установки MySQL вам необходимо выполнить скрипт безопасности.\r\n  Он изменяет некоторыенастройки по умолчанию на более безопасные, например,\r\n  удалённый вход для пользователей root и пользователи, созданные по умолчанию.\r\n  В старых версиях MySQL вам было необходимо также инициализировать директорию\r\n  данных вручную, теперь это делается автоматически.\r\n</p>\r\n<p>\r\n  Выполните скрипт безопасности командой:\r\n</p>\r\n<pre><code class=\"hljs \">sudo mysql_secure_installation</code></pre>\r\n<p>\r\n  В результате выполнения этого скрипта вам будет предложено внести изменения в\r\n  настройки безопасности вашей MySQL. Сначала вам будет предложено установить\r\n  плагин валидации паролей (Validate Password Plugin), который позволяет\r\n  тестировать надёжность паролей MySQL. Далее вам предложат задать пароль для\r\n  пользователя;root вашей установки MySQL. Выберите надёжный пароль и введите\r\n  его два раза.\r\n</p>\r\n<p>\r\n  Далее вы можете выбирать Y и нажимать ENTER для всех последующих вопросов. При\r\n  этом будут удалены некоторые анонимные пользователи и тестовые базы данных,\r\n  будет отключена возможность удалённого входа для root пользователей, после\r\n  чего все внесённые изменения будут применены к вашей установке MySQL.\r\n</p>\r\n<h2>Настройка аутентификации и привилегий</h2>\r\n<p>\r\n  На серверах с Ubuntu, использующей MySQL 5.7 (и более поздние версии),\r\n  пользователь root в MySQL по умолчанию аутентифицируется с помощью плагина\r\n  auth_socket, а не по паролю. Это в целом более безопасно и удобно во многих\r\n  случаях, но не в случае, когда вам необходимо организовать доступ к MySQL со\r\n  стороны сторонней программы, например, phpMyAdmin.\r\n</p>\r\n<p>\r\n  Для того, чтобы пользователь root в MySQL мог использовать пароль для входа в\r\n  систему вам необходимо изменить метод аутентификации с auth_socket на\r\n  mysql_native_password. Для этого войдите в оболочку MySQL следующей командой:\r\n</p>\r\n<p></p>\r\n<pre><code class=\"hljs\">sudo mysql</code></pre>\r\n<p></p>\r\n<p>\r\n  Далее проверьте, какой метод аутентификации используется для каждого из ваших\r\n  пользователей MySQL:\r\n</p>\r\n<p></p>\r\n<pre><code class=\"hljs\">SELECT user,authentication_string,plugin,host FROM mysql.user;</code></pre>\r\n<p>\r\n  В этом примере ваш пользователь root использует аутентификацию с помощью\r\n  плагина auth_socket. Для изменения этой настройки на использование пароля\r\n  используйте следующую команду ALTER USER. Не забудьте изменить password на ваш\r\n  сильный пароль:\r\n</p>\r\n<p></p>\r\n<pre><code class=\"hljs\">ALTER USER \'root\'@\'localhost\' IDENTIFIED WITH \'password\';</code></pre>\r\n<p></p>\r\n<p></p>\r\n<pre><code class=\"hljs\">ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'MyNewPass\';</code></pre>\r\n<p></p>\r\n<p><br></p>',1,11,1,'2021-08-12 15:18:02','2021-08-17 10:07:36');
INSERT INTO `infos` VALUES (78,'Краткий обзор движков таблиц MySQL','<h2>\r\n  <span style=\"font-size: 0.9rem;\">Источники» </span><a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://itif.ru/otlichiya-myisam-innodb/\" role=\"button\">\r\n    itif.ru</a><br>\r\n</h2>\r\n\r\n<table class=\"table table-bordered table-hover\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Описание</th>\r\n      <th scope=\"col\"><b>MyISAM</b></th>\r\n      <th scope=\"col\"><b>InnoDB</b></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        <b>Транзакционный движек?</b> Транзакция (Transaction) — блок операторов\r\n        SQL , который в случае ошибки в одном запросе, возвращается к\r\n        предыдущему состоянию (Rollback), и только в случае выполнения всех\r\n        запросов подтверждается (Commit)\r\n      </td>\r\n      <td>нет</td>\r\n      <td>да</td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <b>Поддержка внешних ключей</b>Внешние ключи — это способ связать записи\r\n        в двух таблицах по определенным полям так, что при обновлении поля в\r\n        родительской автоматически происходит определенное изменение поля в\r\n        дочерней (дочернюю и родительскую выбираешь при создании ключа; точнее,\r\n        создаешь ключ в дочерней, который ссылается на родительскую).\r\n      </td>\r\n      <td>нет</td>\r\n      <td>да</td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <b>Блокировка</b> Блокировка на уровне строк, т.е. если процессу нужно\r\n        обновить строку в таблице, то он блокирует только эту строку, позволяя\r\n        другим обновлять другие строки параллельно\r\n      </td>\r\n      <td>Блокировка на уровне таблиц</td>\r\n      <td>Блокировка на уровне строк</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Одновременные запросы к разным частям таблицы.</td>\r\n      <td>Медленнее</td>\r\n      <td>Быстрее</td>\r\n    </tr>\r\n    <tr>\r\n      <td>При смешанной нагрузке в таблице (select/update/delete/insert)</td>\r\n      <td>Медленнее</td>\r\n      <td>Быстрее</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Операция Insert</td>\r\n      <td>Быстрее</td>\r\n      <td>Медленнее, ибо есть оверхед на транзакцию, но это цена надежности</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Если преобладают операции чтения (SELECT)</td>\r\n      <td>Работает быстрее</td>\r\n      <td>Работает медленнее</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Поддержка полнотекстового поиска</td>\r\n      <td>Да</td>\r\n      <td>Нет (доступен начиная с версии MySQL 5.6.4)</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Запрос Count(*)</td>\r\n      <td>Быстрее</td>\r\n      <td>Медленнее</td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <b>Поддержка mysqlhotcopy</b> Утилита mysqlhotcopy представляет собой\r\n        Perl-сценарий, использующий SQL-команды LOCK TABLES, FLUSH TABLES и\r\n        Unix-утилиты cp или scp для быстрого получения резервной копии базы\r\n        данных.\r\n      </td>\r\n      <td>Да</td>\r\n      <td>Нет</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Файловое хранение таблиц</td>\r\n      <td>Каждой таблице отдельный файл</td>\r\n      <td>\r\n        Данные при настройках по умолчанию хранятся в больших совместно\r\n        используемых файлах\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <b>Бинарное копировании таблиц?</b> Табличные файлы можно перемещать\r\n        между компьютерами разных архитектур и разными операционными системами\r\n        без всякого преобразования\r\n      </td>\r\n      <td>Да</td>\r\n      <td>Нет</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Размер таблиц в БД</td>\r\n      <td>Меньше</td>\r\n      <td>Больше</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Поведение в случае сбоя</td>\r\n      <td>Крашится вся таблица</td>\r\n      <td>По логам можно все восстановить</td>\r\n    </tr>\r\n    <tr>\r\n      <td>В случае хранения «логов» и подобного</td>\r\n      <td>Лучше</td>\r\n      <td>Хуже</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<h2>Выводы:</h2>\r\n<ul>\r\n  <li>\r\n    <b>MyISAM</b> стоит использовать, если нужен полнотекстовый поиск до версии\r\n    5.6. Также этот движок подойдет, когда в таблице очень мало записей и\r\n    большое количество чтений или преобладает один вид доступа: чтение\r\n    (новостной сайт) или запись (например, логирование);\r\n  </li>\r\n  <li>\r\n    Использование InnoDB имеет смысл во всех остальных случаях и случаях\r\n    повышенных требований по сохранности данных.\r\n  </li>\r\n</ul>',1,11,2,'2021-08-17 09:51:49','2021-08-17 09:53:17');
INSERT INTO `infos` VALUES (79,'Нормализация базы данных','<p>Источники»\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-fundamentals/creating-a-db\" role=\"button\">\r\n        devionity\r\n    </a>\r\n</p>\r\n<p>\r\n    это процесс приведения способа хранения информации к наиболее оптимальному, безопасному и гибкому. Проще говоря,\r\n    существуют несколько простых правил, которым следует следовать при моделировании базы данных. Эти правила образуют\r\n    т.н. нормальные формы. Перечислим основные правила нормализация.\r\n</p>\r\n<ul>\r\n    <li>\r\n        В каждой таблице должен быть <b>первичный ключ.</b>\r\n    </li>\r\n    <li>Записи каждой таблицы не должны повторяться (это следствие предыдущего пункта).\r\n    </li>\r\n    <li>В одной таблице не должно быть одинаковых полей.\r\n    </li>\r\n    <li>НАтомарность: таблица не может содержать другую таблицу, она может содержать только конкретное значение из\r\n        другой таблицы.\r\n    </li>\r\n    <li>Наличие внешнего ключа для связывания разных таблиц.</li>\r\n</ul>\r\n\r\n<h2>Типы данных:</h2>\r\n<p>\r\n    В MySQL числовые типы данных - это целые числа и числа с плавающей точкой..\r\n</p>\r\n<p>\r\n    Целые числа в MySQL определяются ключевыми словами TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT\r\n</p>\r\n<p>\r\n    Числа с плавающей точкой в MySQL определены ключевыми словами FLOAT и DOUBLE\r\n</p>\r\n<p>\r\n    Тип TINYINT определяет целые числа в диапазоне от -128 до 127 (включительно). При использовании атрибута\r\n    UNSIGNED(без\r\n    знака) этот диапазон будет включать числа от 0 до 255. Таким образом этот тип вмещает 28 чисел.<br>\r\n    Остальные целочисленные типы отличаются диапазоном,Рассмотрим целочисленные типы данных\r\n</p>\r\n<ul>\r\n    <li>\r\n        SMALLINT: 216 чисел, [ -32 768 ... 32 767 ]\r\n    </li>\r\n    <li>\r\n        SMALLINT UNSIGNED : [ 0 ... 65 535 ]\r\n    </li>\r\n    <li>\r\n        MEDIUMINT : 224 чисел, [ -8 388 608 ... 8 388 607 ]\r\n    </li>\r\n    <li>\r\n        MEDIUMINT UNSIGNED : [ 0 ... 16 777 215 ]\r\n    </li>\r\n    <li>\r\n        INT : 232 чисел, [ -2 147 483 648 ... 2 147 483 647 ]\r\n    </li>\r\n    <li>\r\n        INT UNSIGNED : [ 0 ... 4 294 967 295 ]\r\n    </li>\r\n    <li>\r\n        BIGINT : 264 чисел, [ -9 223 372 036 854 775 808 ... 9 223 372 036 854 775 807 ]\r\n    </li>\r\n    <li>\r\n        BIGINT UNSIGNED : [ 0 ... 18 446 744 073 709 551 615 ]\r\n    </li>\r\n</ul>\r\n\r\n<p>\r\n    Атрибут UNSIGNED означает неотрицательные числа. Фактически этот атрибут сдвигает диапазон так, чтобы он начинался с\r\n    нуля\r\n</p>\r\n<p>\r\n    После указания одного из этих типов допускается указание максимального количество символов для отображения этого\r\n    числа. Этот параметр не влияет на диапазон. Например INT(3) означает что отображение этого числа будет рассчитано на\r\n    трехзначные числа\r\n</p>\r\n\r\n<h2>Управление учетными записями</h2>\r\n<p>\r\n    Для создания пользователя используется оператор <b>CREATE USER</b>. В этом предложении необходимо также указать\r\n    сервер и\r\n    пароль. Базовая конструкция такого запроса выглядит так:\r\n</p>\r\n<pre>    <code>\r\n    CREATE USER \'имя_пользователя\'@\'сервер\' IDENTIFIED BY \'пароль\'\r\n    </code>\r\n</pre>\r\n<p>\r\n    Для того, чтобы просмотреть список пользователей и убедится, что мы действительно добавили нового, необходимо\r\n    исполнить запрос\r\n</p>\r\n<pre>    <code>\r\n    SELECT user FROM mysql.user;\r\n    </code>\r\n</pre>\r\n<p>\r\n    Далее необходимо задать права доступа этому пользователю. Для этого необходимо использовать предложение GRANT, в\r\n    котором указать к каким БД, таблицам он может обращаться и какие права доступа у него к этим БД и таблицам\r\n    (просмотр, редактирование, удаление и т.п.):\r\n</p>\r\n<pre>    <code>\r\n    GRANT указать_права ON база_данных.таблица TO \'имя_пользователя\'@\'сервер\'\r\n    </code>\r\n</pre>\r\nУказать права можно ключевыми словами:\r\n<ul>\r\n    <li>\r\n        <b>CREATE</b> - создание БД и таблиц\r\n    </li>\r\n    <li>\r\n        <b>DROP</b> - удаление БД и таблиц.\r\n    </li>\r\n    <li>\r\n        <b>DELETE</b> - удаление записей из таблиц.\r\n    </li>\r\n    <li>\r\n        <b>INSERT</b> - добавление записей в таблицу.\r\n    </li>\r\n    <li>\r\n        <b>SELECT</b> - выборки из таблиц.\r\n    </li>\r\n    <li>\r\n        <b>ALL PRIVILEGES</b> - полный доступ\r\n    </li>\r\n    <li>\r\n        <b>UPDATE</b> - обновление данных таблиц.\r\n    </li>\r\n    <li>\r\n        <b>GRANT OPTION</b> - право назначения доступа другим пользователям\r\n    </li>\r\n</ul>\r\n<p>\r\n    Если требуется дать конкретные права для всех БД и таблиц, то можно вместо названий записать\r\n</p>\r\n\r\n<pre>    <code>\r\nGRANT SELECT ON *.* TO \'bobby\'@\'localhost\';\r\n    </code>\r\n</pre>\r\n\r\n<h2>Транзакция</h2>\r\n<p>\r\n    это совокупность действий системы над данными, которые либо будут исполнены в полном объеме, либо вообще не будут\r\n    исполнены в случае сбоя в системе.\r\n</p>\r\n<p>\r\n    Для старта транзакции необходимо исполнить запрос<br><br>\r\n    <b>START TRANSACTION;</b><br>\r\n    Далее необходимо выполнить запросы в рамках транзакции. Для окончания транзакции необходимо исполнить запрос<br>\r\n    <b>COMMIT;</b>\r\n</p>\r\n<p>\r\n    Это значит, что все что было исполнено в рамках транзакции вступит в силу. Например:\r\n</p>\r\n<pre>    <code>\r\n        START TRANSACTION;\r\n        UPDATE teacher SET name=\'Hank\' WHERE id = 2;\r\n        COMMIT;\r\n    </code>\r\n</pre>\r\n\r\n<h2>Конструкции IF, CASE-WHEN</h2>\r\n<p>\r\n    Оператор IF - это аналог тернарного оператора PHP:<br>\r\n    IF (логическое выражение, значение-1, значение-2) вернет:<br>\r\n    значение-1, если логическое выражение - истина,<br>\r\n    иначе - будет возвращено значение-2.<br>\r\n    Например,<br>\r\n</p>\r\n<pre>    <code>\r\n        SELECT IF (0 > 2, \'yes\', \'nope\') AS testing;\r\n    </code>\r\n</pre>\r\n\r\n<p>Оператор <b>CASE</b> - это аналог оператора switch в PHP. Его конструкция выглядит следующим образом:</p>\r\n<pre>    <code>\r\n        CASE val\r\n        WHEN compare-1 THEN result-1\r\n        [ WHEN compare-2 THEN result-2\r\n        ...\r\n        WHEN compare-N THEN result-N\r\n        ELSE default-result ]\r\n        END;\r\n    </code>\r\n</pre>\r\n<pre>    <code>\r\n        SELECT name,\r\n        CASE age\r\n         WHEN 20 THEN \'is twenty\'\r\n         WHEN 21 THEN \'is tweny one\'\r\n         WHEN 22 THEN \'is twenty two\'\r\n         ELSE \'is older than 22\'\r\n        END\r\n        AS age_test\r\n        FROM student\r\n        ORDER BY age;\r\n    </code>\r\n</pre>\r\n<h2>Explain</h2>\r\n<pre>    <code>\r\n        EXPLAIN SELECT * FROM student \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: student\r\n         type: ALL\r\npossible_keys: NULL\r\n          key: NULL\r\n      key_len: NULL\r\n          ref: NULL\r\n         rows: 8\r\n        Extra: NULL\r\n1 row in set (0.00 sec)\r\n    </code>\r\n</pre>\r\n<ul>\r\n    <li>\r\n        <b>id</b> - номер строки в таблице EXPLAIN, строк будет столько, сколько операторов SELECT в запросе.\r\n    </li>\r\n    <li>\r\n        <b>select_type</b> - это тип запроса. Он говорит о том, является ли запрос простым (как в нашем случае) или же,\r\n        к примеру, вложенным - когда используются подзапросы (SUBQUERY). Среди возможных значений также могут быть:\r\n        <ul>\r\n            <li><b>PRIMARY</b> - внешний запрос при соединении JOIN</li>\r\n            <li><b>DERIVED</b> - запрос является подзапросом в предложении FROM</li>\r\n            <li><b>DEPENDENT SUBQUERY</b> - подзапрос SELECT, который зависит от подзапроса</li>\r\n            <li><b>UNION</b> - запрос, который записан после оператора UNION</li>\r\n            <li><b>DEPENDENT UNION</b> - запрос, который записан после оператора UNION и зависит от подсапроса</li>\r\n            <li><b>UNION RESULT</b> - результирующий запрос SELECT, в котором есть UNION</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <b>table</b> - таблица, которая использована для запроса. Значения могут совпадать с существующими таблицами,\r\n        либо могут принимать специальные значения, например derived если был записан запрос в предложении FROM или\r\n        union если был использован оператор UNION\r\n    </li>\r\n    <li>\r\n        <b>type</b> - то как система осуществляет соединение таблиц. Иногда говорят, что это то, как осуществляется\r\n        доступ к значениям в таблице. Например, производился поиск по всей таблице, либо же по определенному интервалу.\r\n        Или же поиск производился исключительно по индексу. Перечислим некоторые значения (от лучших к худшим):\r\n        <ul>\r\n            <li><b>system</b> - таблица имеет не более 1 строки.</li>\r\n            <li><b>const</b> - таблица содержит не более 1 совпадения по запросу. При этом критерий поиска был составлен\r\n                из индексов и в нем использовались лишь постоянные величины.\r\n            </li>\r\n            <li><b>eq_ref</b> - при соединении таблицы были использованы индексы PRIMARY или UNIQUE NOT NULL</li>\r\n            <li><b>ref</b> - при соединении таблицы были использованы индексы</li>\r\n            <li><b>unique_subquery</b> - это аналог ref, когда подзапрос в IN возвращает один результат при помощи\r\n                индекса\r\n            </li>\r\n            <li><b>index_subquery</b> - аналог unique_subquery, но результатов больше чем 1.</li>\r\n            <li><b>range</b> - поиск проводился в индексе по определенному промежутку. Например, при использовании\r\n                операторов сравнения.\r\n            </li>\r\n            <li><b>all</b> - была использована вся таблица для поиска записей. Это наиболее плохой результат.</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <b>possible_keys</b> - допустимые индексы для поиска записей\r\n    </li>\r\n    <li>\r\n        <b>keys</b> - индексы, которые были использованы для запроса\r\n    </li>\r\n    <li>\r\n        <b>key_len</b> -количество байт, которое занимает индекс\r\n    </li>\r\n    <li>\r\n        <b>ref</b> - столбцы которые сравнивались с индексами в key\r\n    </li>\r\n    <li>\r\n        <b>rows</b> - количество строк таблицы, которые исследованы для результата. Очевидно, что чем меньше это число -\r\n        тем лучше.\r\n    </li>\r\n    <li>\r\n        <b>extra</b> - дополнительная информация про запрос.\r\n    </li>\r\n</ul>\r\n<p>Примеры:</p>\r\n<div class=\"row\">\r\n    <div class=\"col-xl-6\">\r\n       <pre>           <code>\r\n EXPLAIN SELECT * FROM student WHERE id > 5 \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: student\r\n         type: range\r\npossible_keys: PRIMARY\r\n          key: PRIMARY\r\n      key_len: 4\r\n          ref: NULL\r\n         rows: 5\r\n        Extra: Using where\r\n1 row in set (0.01 sec)\r\n           </code>\r\n       </pre>\r\n    </div>\r\n    <div class=\"col-xl-6\">\r\n       <pre>           <code>\r\nEXPLAIN SELECT * FROM student WHERE id = 5 \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: student\r\n         type: const\r\npossible_keys: PRIMARY\r\n          key: PRIMARY\r\n      key_len: 4\r\n          ref: const\r\n         rows: 1\r\n        Extra: NULL\r\n1 row in set (0.00 sec)\r\n           </code>\r\n       </pre>\r\n    </div>\r\n    <div class=\"col-xl-6\">\r\n       <pre>           <code>\r\nEXPLAIN SELECT * FROM student s JOIN `group` g ON s.group_id = g.id  \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: g\r\n         type: ALL\r\npossible_keys: PRIMARY\r\n          key: NULL\r\n      key_len: NULL\r\n          ref: NULL\r\n         rows: 3\r\n        Extra: NULL\r\n*************************** 2. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: s\r\n         type: ref\r\npossible_keys: group_id\r\n          key: group_id\r\n      key_len: 2\r\n          ref: my_db.g.id\r\n         rows: 1\r\n        Extra: NULL\r\n2 rows in set (0.00 sec)\r\n           </code>\r\n       </pre>\r\n    </div>\r\n    <div class=\"col-xl-6\">\r\n       <pre>           <code>\r\nEXPLAIN SELECT * FROM student WHERE group_id IN (SELECT id FROM `group` WHERE id > 1 )  \\G\r\n*************************** 1. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: group\r\n         type: index\r\npossible_keys: PRIMARY\r\n          key: PRIMARY\r\n      key_len: 1\r\n          ref: NULL\r\n         rows: 3\r\n        Extra: Using where; Using index\r\n*************************** 2. row ***************************\r\n           id: 1\r\n  select_type: SIMPLE\r\n        table: student\r\n         type: ref\r\npossible_keys: group_id\r\n          key: group_id\r\n      key_len: 2\r\n          ref: my_db.group.id\r\n         rows: 1\r\n        Extra: NULL\r\n2 rows in set (0.01 sec)\r\n           </code>\r\n       </pre>\r\n    </div>\r\n</div>\r\n\r\n<p>Источники»\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://devionity.com/ru/courses/mysql-pro/stored-procedures\" role=\"button\">\r\n        Хранимые процедуры && тригеры\r\n    </a>\r\n</p>',1,11,6,'2021-08-17 10:06:35','2021-08-17 10:06:49');
INSERT INTO `infos` VALUES (80,'Observer','<h2>\r\n    </h2><pre class=\"prettyprint linenums\"><code class=\"language-php\">\r\n</code></pre><h2>Наблюдатель\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/observer\">\r\n        refactoring.guru\r\n    </a>\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://tproger.ru/translations/design-patterns-simple-words-1/#14\">\r\n        Интересный пример\r\n    </a>\r\n</h2>\r\n<p>\r\n    <b>Наблюдатель</b> — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним\r\n    объектам следить и реагировать на события, происходящие в других объектах.\r\n</p>\r\n<p>\r\n    <b>Проблема</b> Представьте, что вы имеете два объекта: Покупатель и Магазин. В магазин вот-вот должны завезти новый\r\n    товар, который интересен покупателю.\r\n</p>\r\n<p>\r\n    Покупатель может каждый день ходить в магазин, чтобы проверить наличие товара. Но при этом он будет злиться, без\r\n    толку тратя своё драгоценное время.\r\n</p>\r\n<p>\r\n    <b>Пример из жизни:</b> Хороший пример: люди, ищущие работу, подписываются на публикации на сайтах вакансий и получают\r\n    уведомления, когда появляются вакансии подходящие по параметрам.</p><pre class=\"prettyprint linenums\" style=\"font-size: 12.6px;\"><code class=\"language-php\">class Newspaper implements SplSubject\r\n{\r\n    /**\r\n     * @var array SplObserver\r\n     */\r\n    private $observers = [];\r\n\r\n    private $name;\r\n\r\n    public function __construct($name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function attach(SplObserver $observer)\r\n    {\r\n        $this->observers[] = $observer;\r\n    }\r\n\r\n    public function detach(SplObserver $observer)\r\n    {\r\n        $key = array_search($observer, $this->observers, true);\r\n        unset($this->observers[$key]);\r\n    }\r\n\r\n    public function notify()\r\n    {\r\n        foreach ($this->observers as $value) {\r\n            $value->update($this);\r\n        }\r\n    }\r\n}\r\n\r\nclass Reader implements SplObserver\r\n{\r\n    private $name;\r\n\r\n    /**\r\n     * Reader constructor.\r\n     * @param $name\r\n     */\r\n    public function __construct($name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function update(SplSubject $subject)\r\n    {\r\n        echo $this->name . \' is reading breakout news\';\r\n    }\r\n}\r\n\r\n$newspaper = new Newspaper(\'New York Times\');\r\n\r\n$allen = new Reader(\'Allen\');\r\n$jim = new Reader(\'Jim\');\r\n$linda = new Reader(\'Linda\');\r\n\r\n$newspaper->attach($allen);\r\n$newspaper->attach($jim);\r\n$newspaper->attach($linda);\r\n$newspaper->notify();</code></pre><p>\r\n</p>',1,38,1,'2021-08-17 10:26:16','2021-08-17 10:26:48');
INSERT INTO `infos` VALUES (81,'Facade','https://tproger.ru/translations/design-patterns-simple-words-2/#25\r\nhttps://refactoring.guru/ru/design-patterns/facade/php/example\r\n<p>\r\n    <b>Фасад</b> — это структурный паттерн, который предоставляет простой(но урезанный) интерфейс к сложной системе\r\n    объектов, библиотеке или фреймворку,позволяющий скрыть сложность системы путём сведения всех возможных внешних\r\n    вызовов к одному объекту, делегирующему их соответствующим объектам системы.\r\n</p>\r\n<p>\r\n    <b>Простыми словами</b>: Шаблон фасад предоставляет упрощенный интерфейс для сложной системы.\r\n</p>\r\n<p>Кроме того, что Фасад позволяет снизить общую сложность программы, он также помогает вынести код, зависимый от\r\n    внешней системы в единственное место.\r\n</p>\r\n\r\n<p><b>Признаки применения паттерна</b>: Фасад угадывается в классе, который имеет простой интерфейс, но делегирует\r\n    основную часть работы другим классам. Чаще всего, фасады сами следят за жизненным циклом объектов сложной системы.\r\n</p>\r\n\r\n<p>\r\n<ul>\r\n    <li>хороший фасад не содержит созданий экземпляров классов (new) внутри. Если внутри фасада создаются объекты для\r\n        реализации каждого метода, это не Фасад, это Строитель или [Абстрактная|Статическая|Простая] Фабрика [или\r\n        Фабричный Метод]. Если велик соблазн инициализировать объект внутри фасада, лучше посмотреть в сторону семейства\r\n        порождающих паттернов.\r\n    </li>\r\n    <li>\r\n        он никоем образом не ограничевает прямого доступа к классам. Это помощник, а не ограничитель.\r\n    </li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Пример из жизни</b>: суть паттерна похожа на пульт управления умным домом, если уж рассматривать его с точки\r\n    зрения домохозяйств. Допустим у вас дома есть кофемашина, телевизор и электрический тазик ноги парить. Вот теперь\r\n    представьте, что приходите вечером с работы домой. Уставший. А тут на тебе: нужно включить кофемашину, выбрать режим\r\n    \"руссиано\", включить телевизор, найти канал с футболом, включить тазик, выбрать режим массажера с подогревом. И\r\n    тогда наступит долгожданная лафа. В руке ароматный кофе, наши забили гол, ноги в тазике.\r\n\r\n    Но если у вас есть система умного дома, то можно заранее все это настроить, и запустить одной кнопкой. Даже\r\n    издалека, по мобиле.\r\n\r\n    Вот так же работает паттерн \"фасад\". В кодовом примере можно выразить так. Имеем три устройства, делающих жизнь\r\n    приятной:\r\n</p>\r\n\r\n<pre>\r\n    <code class=\"php\">\r\n        // Кофемашина\r\n        class CoffeeMachine\r\n        {\r\n            public function cappuccino()\r\n            {\r\n                return \'Cappuccino\';\r\n            }\r\n\r\n            public function russiano()\r\n            {\r\n                return \'Russiano\';\r\n            }\r\n        }\r\n\r\n        // Телевизор\r\n        class TV\r\n        {\r\n            protected $channels = [\r\n                1 => \'1tv\',\r\n                2 => \'RenTv\',\r\n                3 => \'MatchTv\'\r\n            ];\r\n\r\n            public function сhannelSelector($num)\r\n            {\r\n                return $this->channels[$num];\r\n            }\r\n        }\r\n\r\n        // Тазик, ноги парить.\r\n        class FootMassager\r\n        {\r\n            public function addColdWater()\r\n            {\r\n                return \'холодная вода\';\r\n            }\r\n\r\n            public function addHotWater()\r\n            {\r\n                return \'горячая вода\';\r\n            }\r\n        }\r\n\r\n        // Этот класс построен по принципу патерна Facade\r\n        class SmartHouse\r\n        {\r\n            public function __construct($cofeeMachine, $TV, $footMassager)\r\n            {\r\n                $this->cofeeMachine = $cofeeMachine;\r\n                $this->TV = $TV;\r\n                $this->footMassager = $footMassager;\r\n            }\r\n\r\n            public function sweetHome()\r\n            {   // Вызываем нужные методы из разных классов\r\n                $cofee = $this->cofeeMachine->russiano();\r\n                $football = $this->TV->сhannelSelector(3);\r\n                $water = $this->footMassager->addHotWater();\r\n                // Жизнь удалась.\r\n                return \'Хлебнуть \'. $cofee\r\n                      .\', посмотреть \'. $football\r\n                      .\', сунуть ноги в тазик, где \'. $water;\r\n            }\r\n        }\r\n\r\n            // Гаджеты\r\n        $cofeeMachine = new CoffeeMachine;\r\n        $TV = new TV;\r\n        $footMassager = new FootMassager;\r\n\r\n        // Умный дом\r\n        $smartHouse = new SmartHouse($cofeeMachine, $TV, $footMassager);\r\n        // Запускаем программу действий одним движением.\r\n        echo $smartHouse->sweetHome();\r\n    </code>\r\n</pre>\r\n\r\n<p><b>Пример из жизни</b>: Как вы включаете компьютер? Нажимаю на кнопку включения, скажете вы. Это то, во что вы\r\n    верите, потому что вы используете простой интерфейс, который компьютер предоставляет для доступа снаружи. Внутри же\r\n    должно произойти гораздо больше вещей. Этот простой интерфейс для сложной подсистемы называется фасадом.\r\n</p>\r\n<pre>\r\n    <code class=\"php\">\r\n    class Computer\r\n    {\r\n        public function getElectricShock()\r\n        {\r\n            echo \"Ай!\";\r\n        }\r\n\r\n        public function makeSound()\r\n        {\r\n            echo \"Бип-бип!\";\r\n        }\r\n\r\n        public function showLoadingScreen()\r\n        {\r\n            echo \"Загрузка..\";\r\n        }\r\n\r\n        public function bam()\r\n        {\r\n            echo \"Готов к использованию!\";\r\n        }\r\n\r\n        public function closeEverything()\r\n        {\r\n            echo \"Буп-буп-буп-бззз!\";\r\n        }\r\n\r\n        public function sooth()\r\n        {\r\n            echo \"Zzzzz\";\r\n        }\r\n\r\n        public function pullCurrent()\r\n        {\r\n            echo \"Аах!\";\r\n        }\r\n    }\r\n\r\n        Затем у нас есть фасад:\r\n\r\n       class ComputerFacade\r\n        {\r\n            protected $computer;\r\n\r\n            public function __construct(Computer $computer)\r\n            {\r\n                $this->computer = $computer;\r\n            }\r\n\r\n            public function turnOn()\r\n            {\r\n                $this->computer->getElectricShock();\r\n                $this->computer->makeSound();\r\n                $this->computer->showLoadingScreen();\r\n                $this->computer->bam();\r\n            }\r\n\r\n            public function turnOff()\r\n            {\r\n                $this->computer->closeEverything();\r\n                $this->computer->pullCurrent();\r\n                $this->computer->sooth();\r\n            }\r\n        }\r\n\r\n        //Пример использования:\r\n\r\n        $computer = new ComputerFacade(new Computer());\r\n        $computer->turnOn(); // Ай! Бип-бип! Загрузка.. Готов к использованию!\r\n        $computer->turnOff(); // Буп-буп-буп-бззз! Аах! Zzzzz\r\n    </code>\r\n</pre>',1,36,1,'2021-08-17 10:34:04','2021-08-17 10:34:04');
INSERT INTO `infos` VALUES (82,'Абстрактная фабрика','<h2>\r\n    Абстрактная фабрика\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://tproger.ru/translations/design-patterns-simple-words-1/#12\">\r\n        tproger\r\n    </a>\r\n    <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/abstract-factory/php/example#example-1\">\r\n        Интересный пример\r\n    </a>\r\n</h2>\r\n<p><b>В крупных приложениях могут понадобиться фабрики, формирующие связанные вместе совокупности классов. И эту\r\n        проблему позволяет решить шаблон Abstract Factory (Абстрактная фабрика).</b>\r\n    <br>\r\n    Абстрактная Фабрика возвращает тот или инной обьект в зависимости от условий или без условий.\r\n</p>\r\n<p>\r\n    Это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе,\r\n    позволяя подклассам изменять тип создаваемых объектов.редоставляет интерфейс для создания семейств взаимосвязанных\r\n    или взаимозависимых объектов, не специфицируя их конкретных классов. Шаблон реализуется созданием абстрактного\r\n    класса Factory, который представляет собой интерфейс для создания компонентов системы (например, для оконного\r\n    интерфейса он может создавать окна и кнопки). Затем пишутся классы, реализующие этот интерфейс.\r\n</p>\r\n\r\n<p>\r\n    <b>Пример из жизни</b>: В зависимости от ваших нужд вам понадобится деревянная дверь из одного магазина, железная\r\n    дверь — из другого или пластиковая — из третьего. Кроме того, вам понадобится соответствующий специалист: столяр для\r\n    деревянной двери, сварщик для железной двери и так далее. Как вы можете заметить, тут есть зависимость между\r\n    дверьми.\r\n    <b>Простыми словами</b>:Фабрика фабрик. Фабрика, которая группирует индивидуальные, но связанные/зависимые фабрики\r\n    без указания их конкретных классов. у нас есть несколько однотипных фабрик и мы хотим инкапсулировать логику выбора,\r\n    какую из фабрик использовать для той или иной задачи\r\n</p>\r\n<pre>    <code class=\"php\">\r\n     interface Door\r\n{\r\n    public function getDescription();\r\n}\r\n\r\nclass WoodenDoor implements Door\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'Я деревянная дверь\';\r\n    }\r\n}\r\n\r\nclass IronDoor implements Door\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'Я железная дверь\';\r\n    }\r\n}\r\n\r\ninterface DoorExpert\r\n{\r\n    public function getDescription();\r\n}\r\n\r\nclass Welder implements DoorExpert\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'Я работаю только с железными дверьми\';\r\n    }\r\n}\r\n\r\nclass Carpenter implements DoorExpert\r\n{\r\n    public function getDescription()\r\n    {\r\n        echo \'Я работаю только с деревянными дверьми\';\r\n    }\r\n}\r\n\r\n/**\r\n * Теперь у нас есть Абстрактная фабрика которая позволит нам создать фабрику\r\n */\r\nabstract class DoorFactory\r\n{\r\n    public static $config = 1;\r\n\r\n    /**\r\n     * Возвращает фабрику\r\n     *\r\n     * @return DoorFactory - дочерний объект\r\n     */\r\n    public static function getFactory()\r\n    {\r\n        switch (self::$config) {\r\n            case 1:\r\n                return new WoodenDoorFactory();\r\n            case 2:\r\n                return new IronDoorFactory();\r\n        }\r\n    }\r\n\r\n    abstract public function makeDoor(): Door;\r\n\r\n    abstract public function makeExpert(): DoorExpert;\r\n}\r\n\r\n// Деревянная фабрика вернет деревянную дверь\r\nclass WoodenDoorFactory extends DoorFactory\r\n{\r\n    public function makeDoor(): Door\r\n    {\r\n        return new WoodenDoor();\r\n    }\r\n\r\n    public function makeExpert(): DoorExpert\r\n    {\r\n        return new Carpenter();\r\n    }\r\n}\r\n\r\n// Железная фабрика вернет железную дверь\r\nclass IronDoorFactory extends DoorFactory\r\n{\r\n    public function makeDoor(): Door\r\n    {\r\n        return new IronDoor();\r\n    }\r\n\r\n    public function makeExpert(): DoorExpert\r\n    {\r\n        return new Welder();\r\n    }\r\n}\r\n\r\n$woodenFactory = DoorFactory::getFactory();\r\n$woodenFactory-&gt;makeDoor()-&gt;getDescription(); //Вывод: Я деревянная дверь\r\n$woodenFactory-&gt;makeExpert()-&gt;getDescription(); //Вывод: Я работаю только с деревянными дверьми\r\n\r\nDoorFactory::$config = 2;\r\n\r\n// Аналогично для железной двери\r\n$ironFactory = DoorFactory::getFactory();\r\n$ironFactory-&gt;makeDoor()-&gt;getDescription(); //Вывод: Я железная дверь\r\n$ironFactory-&gt;makeExpert()-&gt;getDescription(); //Вывод: Я работаю только с железными дверьми\r\n\r\ninterface IResponseFactory\r\n{\r\n    public const JSON_RESPONSE = \'json\';\r\n\r\n    public const HTML_RESPONSE = \'html\';\r\n\r\n    public function makeResponse(string $class): IResponse;\r\n\r\n    public function redirectTo();\r\n\r\n    public function file();\r\n\r\n    public function json();\r\n\r\n    public function html();\r\n}\r\n\r\ninterface IResponse\r\n{\r\n    public function response();\r\n}\r\n\r\nclass JsonResponse implements IResponse\r\n{\r\n    public function response()\r\n    {\r\n        echo json_encode([34]);\r\n    }\r\n}\r\n\r\nclass HtmlResponse implements IResponse\r\n{\r\n    public function response()\r\n    {\r\n      echo \'html\';\r\n    }\r\n}\r\n\r\nclass ResponseFactory implements IResponseFactory\r\n{\r\n    public function makeResponse(string $class): IResponse\r\n    {\r\n        switch ($class) {\r\n            case self::HTML_RESPONSE:\r\n                return $this-&gt;html();\r\n                break;\r\n            case self::JSON_RESPONSE:\r\n                return $this-&gt;json();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public function file()\r\n    {\r\n        return new JsonResponse();\r\n    }\r\n\r\n    public function redirectTo()\r\n    {\r\n        return $location??\'\';\r\n    }\r\n\r\n    public function json()\r\n    {\r\n        return new JsonResponse();\r\n    }\r\n\r\n    public function html()\r\n    {\r\n        return new HtmlResponse();\r\n    }\r\n}\r\n\r\n$response = new ResponseFactory();\r\n$response-&gt;makeResponse(ResponseFactory::JSON_RESPONSE)-&gt;response();\r\n$response-&gt;json()-&gt;response();\r\n$response-&gt;file()-&gt;response();\r\n$response-&gt;html()-&gt;response();\r\n$response-&gt;redirectTo();\r\n    </code>\r\n</pre>\r\n<p>\r\n    <b>Когда использовать</b>: Когда есть взаимосвязанные зависимости с не очень простой логикой создания.\r\n</p>',1,31,1,'2021-08-17 10:36:24','2021-08-17 10:36:24');
INSERT INTO `infos` VALUES (83,'Fabric method','<h2>\r\n  Фабричный метод\r\n  <a class=\"btn btn-secondary\" target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/factory-method/php/example\">\r\n    refactoring.guru\r\n  </a>\r\n</h2>\r\n\r\n<p>\r\n  Это порождающий паттерн проектирования, который решает проблему создания\r\n  различных продуктов, без указания конкретных классов продуктов.\r\n</p>\r\n<p>\r\n  Фабричный метод задаёт метод, который следует использовать вместо вызова\r\n  оператора new для создания объектов-продуктов. Подклассы могут переопределить\r\n  этот метод, чтобы изменять тип создаваемых продуктов.\r\n</p>\r\n<p>\r\n  <b>Проблема</b> Представьте, что вы создаёте программу управления грузовыми\r\n  перевозками. Сперва вы рассчитываете перевозить товары только на автомобилях.\r\n  Поэтому весь ваш код работает с объектами класса Грузовик. В какой-то момент\r\n  ваша программа становится настолько известной, что морские перевозчики\r\n  выстраиваются в очередь и просят добавить поддержку морской логистики в\r\n  программу.\r\n</p>\r\n<p>\r\n  Отличные новости, правда?! Но как насчёт кода? Большая часть существующего\r\n  кода жёстко привязана к классам Грузовиков. Чтобы добавить в программу классы\r\n  морских Судов, понадобится перелопатить всю программу. Более того, если вы\r\n  потом решите добавить в программу ещё один вид транспорта, то всю эту работу\r\n  придётся повторить. В итоге вы получите ужасающий код, наполненный условными\r\n  операторами, которые выполняют то или иное действие, в зависимости от класса\r\n  транспорта.\r\n</p>\r\n<p>\r\n  Решение Паттерн Фабричный метод предлагает создавать объекты не напрямую,\r\n  используя оператор new, а через вызов особого фабричного метода. Не пугайтесь,\r\n  объекты всё равно будут создаваться при помощи new, но делать это будет\r\n  фабричный метод.\r\n</p>\r\n<p>\r\n  <b>Пример из жизни</b>: Рассмотрим пример с менеджером по найму. Невозможно\r\n  одному человеку провести собеседования со всеми кандидатами на все вакансии. В\r\n  зависимости от вакансии он должен распределить этапы собеседования между\r\n  разными людьми.<br>\r\n  <b>Простыми словами</b>: данный шаблон делегирует создание объектов\r\n  наследникам родительского класса\r\n</p>\r\n<pre>    <code class=\"php\">\r\n        <!--?= $content ?-->\r\n    </code>\r\n</pre>\r\n<p>\r\n  <b>Когда использовать</b>: Полезен, когда есть некоторая общая обработка в\r\n  классе, но необходимый подкласс динамически определяется во время выполнения.\r\n  Иными словами, когда клиент не знает, какой именно подкласс ему может\r\n  понадобиться.\r\n</p>',1,31,2,'2021-08-17 10:44:26','2021-08-17 11:25:04');
INSERT INTO `infos` VALUES (84,'Вопрос - ответ','<a href=\"/solid/single_responsibility\" target=\"_blank\" class=\"list-group-item list-group-item-action\">\r\n    Solid.<br>\r\n    Что такое программирование на основе интерфейса. Нужен пример.\r\n</a>\r\n<a href=\"#solid1\" data-toggle=\"collapse\" target=\"_blank\" class=\"list-group-item list-group-item-action\">\r\n    В чем основной смысл принципа инверсии зависимостей? Что именно мы инвертируем?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"solid1\">\r\n    <div class=\"card card-body\">\r\n        Зависимость от абстракций, а не от чего-то конкретного. Применяя этот принцип, одни модули можно легко\r\n        заменять другими, всего лишь меняя модуль зависимости, и тогда никакие перемены в низкоуровневом модуле не\r\n        повлияют на высокоуровневый.\r\n    </div>\r\n</div>\r\n<a href=\"/php/kiss_and_dry\" class=\"list-group-item list-group-item-action\">\r\n    DRY &amp;&amp; KISS\r\n</a>\r\n<a href=\"#a1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Нужно реализовать функционал авторизации. На какие компоненты вы бы его разделили, так, чтобы соблюсти принцип\r\n    Single responsibility?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"a1\">\r\n    <div class=\"card card-body\">\r\n        Валидация<br>\r\n        Работа с БД<br>\r\n        Чекер<br>\r\n        Сессия<br>\r\n    </div>\r\n</div>\r\n<a href=\"/php/class_object_oop\" target=\"_blank\" class=\"list-group-item list-group-item-action\">\r\n    Какие парадигмы ООП можешь назвать? (Инкапсуляция, Наследование, Полиморфизм, Абстракция)\r\n</a>\r\n<a href=\"#a2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое композиция?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"a2\">\r\n    <div class=\"card card-body\">\r\n        В объектно-ориентированных языках программирования существует способы организации взаимодействия между\r\n        классами.\r\n        <ul>\r\n            <li><b>Наследование</b> — это когда класс-наследник имеет все поля и методы родительского класса, и, как\r\n                правило,\r\n                добавляет какой-то новый функционал или/и поля. Наследование описывается словом «является». Легковой\r\n                автомобиль\r\n                является автомобилем.\r\n            </li>\r\n            <li><b>Композиция</b> – Свойство,которое будет содержать ссылку на другой объект этого класса, когда один\r\n                объект\r\n                предоставляет другому свою функциональность частично или полностью. Экземпляр зависимого обьекта будет\r\n                создаваться в конструкторе. Двигатель не существует отдельно от автомобиля. Он создается при создании\r\n                автомобиля\r\n                и полностью управляется автомобилем.\r\n            </li>\r\n            <li><b>Агрегация</b> – это когда экземпляр зависимого обьекта создается где-то в другом месте кода, и\r\n                передается в\r\n                конструктор в качестве параметра.\r\n            </li>\r\n        </ul>\r\n        <a href=\"https://habr.com/ru/post/354046/\" target=\"_blank\" class=\"btn btn-primary\">\r\n            https://habr.com/ru/post/354046/\r\n        </a>\r\n        <br>\r\n        <a href=\"https://habr.com/ru/post/325478/\" target=\"_blank\" class=\"btn btn-primary\">\r\n            https://habr.com/ru/post/325478/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#proektir\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Нарушает ли паттерн Active Record какой-либо из принципов SOLID?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"proektir\">\r\n    <div class=\"card card-body\">\r\n        Реализации данного шаблона часто нарушают принцип единственной ответственности (SRP), совмещая в одном объекте\r\n        как представление и внутреннюю логику самого объекта, так и механизмы CRUD, поэтому Active Record может\r\n        считаться антипаттерном\r\n        <pre>            <code class=\"php\">\r\n                class Foo\r\n                {\r\n                    protected $db;\r\n                    public $id;\r\n                    public $bar;\r\n\r\n                    public function __construct(PDO $db)\r\n                    {\r\n                        $this-&gt;db = $db;\r\n                    }\r\n\r\n                    public function do_something()\r\n                    {\r\n                        $this-&gt;bar .= uniqid();\r\n                    }\r\n\r\n                    public function save()\r\n                    {\r\n                        if ($this-&gt;id) {\r\n                            $sql = \"UPDATE foo SET bar = :bar WHERE id = :id\";\r\n                            $statement = $this-&gt;db-&gt;prepare($sql);\r\n                            $statement-&gt;bindParam(\"bar\", $this-&gt;bar);\r\n                            $statement-&gt;bindParam(\"id\", $this-&gt;id);\r\n                            $statement-&gt;execute();\r\n                        }\r\n                        else {\r\n                            $sql = \"INSERT INTO foo (bar) VALUES (:bar)\";\r\n                            $statement = $this-&gt;db-&gt;prepare($sql);\r\n                            $statement-&gt;bindParam(\"bar\", $this-&gt;bar);\r\n                            $statement-&gt;execute();\r\n                            $this-&gt;id = $this-&gt;db-&gt;lastInsertId();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Insert\r\n                $foo = new Foo($db);\r\n                $foo-&gt;bar = \'baz\';\r\n                $foo-&gt;save();\r\n            </code>\r\n        </pre>\r\n        <a href=\"https://ru.wikipedia.org/wiki/ActiveRecord\" target=\"_blank\" class=\"btn btn-primary\">\r\n            https://ru.wikipedia.org/wiki/ActiveRecord\r\n        </a>\r\n        <br>\r\n        <a href=\"https://habr.com/ru/post/198450/\" target=\"_blank\" class=\"btn btn-primary\">\r\n            https://habr.com/ru/post/198450/\r\n        </a>\r\n    </div>\r\n</div>\r\n<hr>\r\nПаттерны\r\n<hr>\r\n<a href=\"#pattern3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужны паттерны?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern3\">\r\n    <div class=\"card card-body\">\r\n        Это часто встречающееся решение определённой проблемы при проектировании архитектуры программ.\r\n        <ul>\r\n            <li><b>Проверенные решения.</b> Вы тратите меньше времени, используя готовые решения, вместо повторного\r\n                изобретения\r\n                велосипеда.\r\n            </li>\r\n            <li><b>Стандартизация кода.</b> Вы делаете меньше просчётов при проектировании, используя типовые\r\n                унифицированные решения, так как все скрытые проблемы в них уже давно найдены.\r\n            </li>\r\n            <li><b>Общий программистский словарь.</b> Вы произносите название паттерна, вместо того, чтобы час объяснять\r\n                другим программистам, какой крутой дизайн вы придумали и какие классы для этого нужны.\r\n            </li>\r\n        </ul>\r\n        <a href=\"https://refactoring.guru/ru/design-patterns/why-learn-patterns\" class=\"btn btn-secondary\">\r\n            https://refactoring.guru/ru/design-patterns/why-learn-patterns\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#pattern1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\" tabindex=\"-1\">\r\n    Какие паттерны знаешь?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern1\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li>\r\n                <b>Порождающие</b> - Отвечают за удобное и безопасное создание новых объектов\r\n                <ul>\r\n                    <li><b>Фабричный метод</b> - Это способ делегирования логики создания объектов\r\n                        дочерним классам.\r\n                    </li>\r\n                    <li><b>Абстрактная фабрика</b> - Это фабрика фабрик. То есть фабрика, группирующая индивидуальные,\r\n                        но взаимосвязанные/взаимозависимые фабрики без указания для них конкретных классо\r\n                    </li>\r\n                    <li><b>Строитель</b> - озволяет создавать сложные объекты пошагово</li>\r\n                    <li><b>Прототип</b> - позволяет копировать объекты, не вдаваясь в подробности их реализации</li>\r\n                    <li><b>Одиночка</b> - гарантирует, что у класса есть только один экземпляр</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Структурные</b> - облегчают проектирование, определяя простой способ реализации взаимоотношений между\r\n                сущностями.\r\n                <ul>\r\n                    <li><b>Адаптер</b>- позволяет объектам с несовместимыми интерфейсами работать вместе.</li>\r\n                    <li><b>Мост</b> Отделить абстракцию от её реализации так, что они могут изменяться независимо друг\r\n                        от друга.\r\n                    </li>\r\n                    <li><b>Декоратор</b> позволяет динамически добавлять объектам новую функциональность, оборачивая их\r\n                        в\r\n                        полезные «обёртки».\r\n                    </li>\r\n                    <li><b>Реестр</b>Для реализации централизованного хранения объектов, часто используемых во всем\r\n                        приложении,как правило, реализуется с помощью абстрактного класса только c статическими методами\r\n                    </li>\r\n                    <li><b>Фасад</b></li>\r\n                    <li><b>Компоновщик (Composite)</b> - Взаимодействие с иерархической группой объектов также, как и с\r\n                        отдельно взятым экземпляром.\r\n                    </li>\r\n                    <li><b>Прокси (Proxy)</b> Создать интерфейс взаимодействия с любым классом, который трудно или\r\n                        невозможно использовать в оригинальном виде\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Поведенческие</b> - Решают задачи эффективного и безопасного взаимодействия между объектами\r\n                программы.\r\n                <ul>\r\n                    <li>\r\n                        <b>Цепочка обязанностей</b> - Построить цепочку объектов для обработки вызова в последовательном\r\n                        порядке. Если один объект не может справиться с вызовом, он делегирует вызов для следующего в\r\n                        цепи и так далее.\r\n                    </li>\r\n                    <li><b>Команда</b></li>\r\n                    <li><b>Итератор</b></li>\r\n                    <li><b>Посредник (Mediator)</b></li>\r\n                    <li><b>Хранитель (Memento)</b></li>\r\n                    <li><b>Наблюдатель (Observer)</b> создаёт механизм подписки, позволяющий одним объектам следить и\r\n                        реагировать на события, происходящие в других объектах.\r\n                    </li>\r\n                    <li><b>Состояние (State)</b></li>\r\n                    <li><b>Стратегия (Strategy)</b>Шаблон стратегия позволяет переключаться между алгоритмами или\r\n                        стратегиями в зависимости от ситуации\r\n                    </li>\r\n                    <li><b>Посетитель (Visitor)</b></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n        <a target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/catalog\" class=\"btn btn-secondary\">\r\n            https://refactoring.guru/ru/design-patterns/catalog\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://designpatternsphp.readthedocs.io/ru/latest/Structural/Proxy/README.html\" class=\"btn btn-secondary\">\r\n            designpatternsphp\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://habr.com/ru/company/mailru/blog/325492\" class=\"btn btn-secondary\">\r\n            habr\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://habr.com/ru/post/214285/\" class=\"btn btn-secondary\">\r\n            habr\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#pattern2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие использовал?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern2\">\r\n    <div class=\"card card-body\">\r\n        синглетон,репозиторий,билдер\r\n        <a href=\"https://refactoring.guru/ru/design-patterns/catalog\" class=\"btn btn-secondary\">\r\n            https://refactoring.guru/ru/design-patterns/catalog\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#pattern4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какую задачу решает паттерн Внедрение зависимостей (Dependency Injection)\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern4\">\r\n    <div class=\"card card-body\">\r\n        Уменьшить связность кода,также чтобы получить более тестируемый, сопровождаемый и расширяемый код.\r\n    </div>\r\n</div>\r\n<a href=\"#pattern5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Пример использование паттерна Строитель (Builder)?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern5\">\r\n    <div class=\"card card-body\">\r\n        В системе могут существовать сложные объекты, создание которых за одну операцию затруднительно или невозможно.\r\n        Требуется поэтапное построение объектов(cоздавать объекты пошагово).\r\n        <br>\r\n        Одним из лучших применений паттерна Строитель является конструктор запросов SQL.\r\n        <br>\r\n        <a target=\"_blank\" href=\"https://refactoring.guru/ru/design-patterns/builder/php/example#example-1\" class=\"btn btn-secondary\">\r\n            https://refactoring.guru/ru/design-patterns/builder/php/example#example-1\r\n        </a>\r\n        <br>Небольшой пример\r\n        <a target=\"_blank\" href=\"https://tproger.ru/translations/design-patterns-simple-words-1/#12\" class=\"btn btn-secondary\">\r\n            https://tproger.ru/translations/design-patterns-simple-words-1/#12\r\n        </a>\r\n        <br>\r\n        <pre>            <code class=\"php\">\r\n                <!--?=$buider?-->\r\n            </code>\r\n        </pre>\r\n\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#pattern6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем плюсы и минусы паттерна Singleton?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pattern6\">\r\n    <div class=\"card card-body\">\r\n        Один из главных минусов паттерна “Одиночка” — он сильно затрудняет юнит-тестирование. “Одиночка” привносит в\r\n        программу глобальное состояние, поэтому вы не можете просто взять и изолировать классы, которые полагаются на\r\n        Singelton. Поэтому, если вы хотите протестировать какой-то класс, то вы обязаны вместе с ним тестировать и\r\n        Singleton, но это ещё полбеды. Состояние “Одиночки” может меняться, что порождает следующие проблемы:\r\n        <ul>\r\n            <li>Порядок тестов теперь имеет значение;</li>\r\n            <li>Тесты могут иметь нежелательные сторонние эффекты, порождённые Singleton’ом;</li>\r\n            <li>Вы не можете запускать несколько тестов параллельно;</li>\r\n            <li>Несколько вызовов одного и того же теста могут приводить к разным результатам.</li>\r\n        </ul>\r\n        <br>\r\n        <a target=\"_blank\" href=\"https://tproger.ru/translations/singleton-pitfalls/\" class=\"btn btn-secondary\">\r\n            https://tproger.ru/translations/singleton-pitfalls/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n\r\n<hr>\r\nАрхитектура\r\n<hr>\r\n<a href=\"#arc1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Нам нужно отдавать файл только авторизованным пользователям. Как это сделать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"arc1\">\r\n    <div class=\"card card-body\">\r\n        header authorisation Bearer or check is userAuth by session\r\n    </div>\r\n</div>\r\n<a href=\"#arc2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Immutable object – в чем суть? Когда можно/нужно использовать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"arc2\">\r\n    <div class=\"card card-body\">\r\n        <h3>Неизменяемые объекты в PHP</h3>\r\n        <p>\r\n            Неизменяемыми называются объекты, чьё состояние остаётся постоянным с момента их создания. Обычно такие\r\n            объекты очень просты.\r\n        </p>\r\n        При реализации неизменяемых объектов необходимо:\r\n        <ul>\r\n            <li>\r\n                Объявить класс как final, чтобы его нельзя было переопределить при добавлении методов, изменяющих\r\n                внутреннее состояние.\r\n            </li>\r\n            <li>\r\n                Объявить свойства как private, чтобы опять же их нельзя было изменить.\r\n            </li>\r\n            <li>\r\n                Избегать сеттеров и использовать конструктор для задания параметров.\r\n            </li>\r\n            <li>\r\n                Не хранить ссылки на изменяемые объекты или коллекции. Если вы внутри неизменяемого объекта храните\r\n                коллекцию, то она тоже должна быть неизменяемой.\r\n            </li>\r\n            <li>\r\n                Проверять, что, если вам нужно модифицировать неизменяемый объект, вы делали его копию, а не\r\n                переиспользовали существующий.\r\n            </li>\r\n        </ul>\r\n        <a target=\"_blank\" href=\" https://habr.com/ru/company/mailru/blog/301004/\" class=\"btn btn-secondary\">\r\n            https://habr.com/ru/company/mailru/blog/301004/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#arc3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Компонент B зависит от компонента A. Но бизнес требует, чтобы оба компонента разрабатывались одновременно. Как это\r\n    организовать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"arc3\">\r\n    <div class=\"card card-body\">\r\n        <h2>В процессе</h2>\r\n    </div>\r\n</div>\r\n<a href=\"#arc4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Микросервисная архитектура: Зачем и когда использовать? Какие сложности?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"arc4\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" href=\"https://habr.com/ru/company/raiffeisenbank/blog/346380/\" class=\"btn btn-secondary\">\r\n            https://habr.com/ru/company/raiffeisenbank/blog/346380/\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://habr.com/ru/post/249183/\" class=\"btn btn-secondary\">\r\n            https://habr.com/ru/post/249183/\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://www.dataart.ru/news/microservices-kak-pravil-no-delat-i-kogda-primenyat/\" class=\"btn btn-secondary\">\r\n            https://www.dataart.ru/news/microservices-kak-pravil-no-delat-i-kogda-primenyat/\r\n        </a>\r\n        <a target=\"_blank\" href=\"https://proglib.io/p/microservices/\" class=\"btn btn-secondary\">\r\n            https://proglib.io/p/microservices/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\n\r\nWorkers\r\n<hr>\r\n<a href=\"#workers1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как реализовать автоматический запуск воркера (чтобы не запускать его вручную)\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"workers1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            <b>Воркер</b> - это интерфейс, который позволяет подключаться и общаться с самой очередью\r\n        </p>\r\n        есть несколько подходов\r\n        <ul>\r\n            <li><b>Cron</b></li>\r\n            <li><b>Supervisord</b> - монитор процессов</li>\r\n        </ul>\r\n        Для запуска нескольких копий одного процесса необходимо также указать параметр process_name для определения\r\n        уникального имени процесса.\r\n        <br>\r\n        добавляется строчка process_name=%(program_name)s_%(process_num)02d, которая задает имена всех копий процесса, в\r\n        нашем случае worker_00, worker_01 и т.д.\r\n        <br>\r\n        В файле конфигурации (nano /etc/supervisor/supervisord.conf), в самом низу добавляем настройки для нужного\r\n        воркера:\r\n        <pre>            <code>\r\n                [program:worker]\r\n                command=/usr/bin/php /var/www/worker.php\r\n                process_name=%(program_name)s_%(process_num)02d\r\n                numprocs=10\r\n                directory=/var/www/worker\r\n                stdout_logfile=/var/log/worker.log\r\n                autostart=true\r\n                autorestart=true\r\n                user=www-data\r\n                stopsignal=KILL\r\n            </code>\r\n        </pre>\r\n        Supervisor сам будет следить за процессами, запускать их в случае падения, а также после перезагрузки системы.\r\n        Вы можете запускать несколько копий.\r\n\r\n        <ul>\r\n            <li><b>[program:worker]</b> — название процесса/воркера, к которому будут относиться все последующие\r\n                параметры секции;\r\n            </li>\r\n            <li><b>command=/usr/bin/php /var/www/worker.php</b> — команда на запуск файла, то есть путь к нужному файлу;\r\n            </li>\r\n            <li><b>stdout_logfile=/var/log/worker.log</b> — вывод консоли в файл;</li>\r\n            <li><b>autostart=true</b> — запуск воркера вместе с запуском supervisor;</li>\r\n            <li><b>autorestart=true</b> — перезапуск воркера, если тот по какой-то причине упал;</li>\r\n            <li><b>user=www-data</b> — запуск процесса под определенным пользователем;</li>\r\n            <li><b>stopsignal=KILL</b> — сигнал остановки (убийства) процесса. Если не определяется, то используется\r\n                команда по умолчанию — TERM;\r\n            </li>\r\n            <li><b>numprocs=1</b> — количество инстансов заданного воркера</li>\r\n        </ul>\r\n        <b>После добавления новых процессов/воркеров не забывайте перезагружать supervisor</b>\r\n        <b>Supervisor дергает пхп скрипты(воркеры) а воркеры дергают сервер очередей</b>\r\n    </div>\r\n</div>\r\n<a href=\"#workers2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как перезапускать воркера? В каких случаях это нужно делать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"workers2\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            <b>Воркеры очереди</b> - длительные процессы и хранят в памяти состояние загруженного приложения.(создает\r\n            екземпляр класса и хранить его в памяти) В результате, они не заметят изменений в вашей базе кода после\r\n            своего запуска. Поэтому самый простой способ развернуть приложения используя воркеры очереди - перезагрузить\r\n            воркеров во время процесса развертывания\r\n        </p>\r\n        <b>For supervisor </b>supervisorctl restart &lt; name &gt; || service supervisor restart\r\n        <br>\r\n        <b>For cron </b>sudo service cron reload || /etc/init.d/cron reload\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://ruhighload.com/%D0%97%D0%B0%D0%BF%D1%83%D1%81%D0%BA+%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D0%B2+%D0%B2+supervisor\">\r\n            ruhighload\r\n        </a>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://badcode.ru/chto-takoie-php-ochieried-zadach/\">\r\n            ruhighload\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#workers3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Очереди-воркеры\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"workers3\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Очередь записывает в <b>сторендж</b>(РЕДИС,МУСКУЛЬ).<br>\r\n            <b>Демон</b> - длительные процессы(фоновые циклы) которые дергают обработчики(воркеры),а они дергают\r\n            сторендж,которые были кинуты извне(в очередь кинутые).\r\n            <br>\r\n            супервизор следить за демоном,потомучто пхп демон падает,супервизор его перезапускает.\r\n        </p>\r\n    </div>\r\n</div>\r\n<a href=\"#workers4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как делать мониторинг воркеров? Воркера не смотрят наружу, и нет способа понять, живой воркер или не живой. Какие\r\n    есть варианты?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"workers4\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Supervisord Multi Server Monitoring Tool !!<b>Read stderr log</b>\r\n        </p>\r\n    </div>\r\n</div>\r\n\r\n\r\n<hr>\r\nPSR\r\n<hr>\r\n<a href=\"#psr1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое PSR-стандарты и зачем они нужны?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"psr1\">\r\n    <div class=\"card card-body\">\r\n        Стандарты рекоммендаций PHP\r\n        <ul>\r\n            <li>PSR-1 — основной стандарт написания кода.</li>\r\n            <li>PSR-2 — руководство по стилю написания кода.</li>\r\n            <li>PSR-3 — описание единого интерфейса для ведения логирования.</li>\r\n            <li>PSR-4 — стандарт автозагрузки.</li>\r\n            <li>PSR-6 — стандарт интерфейсов кеширования.</li>\r\n            <li>PSR-7 — стандарт интерфейса HTTP-сообщений.</li>\r\n            <li>PSR-11 — стандарт контейнера интерфейсов.</li>\r\n            <li>PSR-15 — стандарт гиперссылок.</li>\r\n            <li>PSR-16 — стандарт простого кеширования.</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://world-hello.ru/php/psr/about-psr.html\">\r\n            https://world-hello.ru/php/psr/about-psr.html\r\n        </a>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php-fig.org/psr/\">\r\n            https://www.php-fig.org/psr/\r\n        </a>\r\n\r\n    </div>\r\n</div>\r\n<a href=\"#psr2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    PSR-4 (Autoload),PSR-2 (Coding Style Guide) зачем нужен и что решает? PSR-7 (Request) зачем нужен и что решает?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"psr2\">\r\n    <div class=\"card card-body\">\r\n        <h3>PSR2</h3>\r\n        <ul>\r\n            <li>Файлы НЕОБХОДИМО представлять только в кодировке UTF-8 без BOM-байта.</li>\r\n            <li>Имена классов ДОЛЖНЫ быть объявлены используя StudlyCaps.</li>\r\n            <li>Константы класса ДОЛЖНЫ быть объявлены в верхнем регистре с подчеркиванием в качестве разделителей.</li>\r\n            <li>Имена методов ДОЛЖНЫ быть объявлены используя camelCase.</li>\r\n            <li>Полностью сформированное пространство имен и класс должны иметь следующую структуру \\&lt; Vendor Name&gt;\\(&lt;\r\n                Namespace&gt;\\)*&lt; Class Name&gt;\r\n            </li>\r\n            <li>Каждое пространство имен должно иметь пространство имен верхнего уровня (\"Vendor Name\").</li>\r\n            <li>Каждый разделитель пространств имен преобразуется в DIRECTORY_SEPARATOR при загрузке из файловой\r\n                системы.\r\n            </li>\r\n            <li>Полностью сформированное пространство имен и класс дополняются суффиксом .php при загрузке из файловой\r\n                системы.\r\n            </li>\r\n            <li>Для оформления отступов ДОЛЖНЫ использоваться четыре пробела (но не знак табуляции).</li>\r\n            <li>НЕДОПУСТИМО жёстко ограничивать длину строки; мягкое ограничение ДОЛЖНО составлять 120 символов; СЛЕДУЕТ\r\n                стараться, чтобы длина строки составляла 80 символов или менее.\r\n            </li>\r\n            <li>После определения пространства имён (namespace) и после блока импорта пространств имён (use) ДОЛЖНА быть\r\n                одна пустая строка.\r\n            </li>\r\n            <li>Открывающая фигурная скобка в определении класса ДОЛЖНА располагаться на новой строке, а закрывающая\r\n                фигурная скобка ДОЛЖНА располагаться на следующей строке после тела класса.\r\n            </li>\r\n            <li>Область видимости ДОЛЖНА быть указана явно для всех свойств и методов;</li>\r\n            <li>Константы PHP true, false и null ДОЛЖНЫ быть написаны в нижнем регистре.</li>\r\n            <li>Ключевые слова extends и implements ДОЛЖНЫ находиться на той же строке, на которой находится имя\r\n                класса.\r\n            </li>\r\n            <li></li>\r\n        </ul>\r\n        <h3>PSR-4</h3>\r\n        <ul>\r\n            <li>Полностью сформированное пространство имен и класс должны иметь следующую структуру \\&lt; Vendor Name&gt;\\(&lt;\r\n                Namespace&gt;\\)*&lt; Class Name&gt;\r\n            </li>\r\n            <li>Каждое пространство имен должно иметь пространство имен верхнего уровня (\"Vendor Name\").</li>\r\n            <li></li>\r\n        </ul>\r\n        <h3>PSR-7</h3>\r\n        Методы для работы с реквестом\r\n        <ul>\r\n            <li>getProtocolVersion</li>\r\n            <li>getHeaders</li>\r\n            <li>hasHeader</li>\r\n            <li>hasHeader</li>\r\n            <li>getBody</li>\r\n            <li>getMethod</li>\r\n            <li>getUri</li>\r\n            <li></li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://idealcms.ru/blog/PSR-1-basic-coding-standard.html\">\r\n            http://idealcms.ru/blog/PSR-1-basic-coding-standard.html\r\n        </a>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://svyatoslav.biz/misc/psr_translation/\">\r\n            https://svyatoslav.biz/misc/psr_translation/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nPHP: Base (типы данных, type hint, global vars)\r\n<hr>\r\n<a href=\"#base1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие типы данных PHP?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"base1\">\r\n    <div class=\"card card-body\">\r\n        Bool, int, float, string, array, object, callback, iterable,resource,null\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.types.intro.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#base2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое type hinting?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"base2\">\r\n    <div class=\"card card-body\">\r\n        type-hint (\"намек на тип\") -- указание на ожидаемый тип значения (например, для входных аргументов функции).\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.oop5.typehinting.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#base3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Чем отличается isset от empty?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"base3\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            <b>isset</b> — Определяет, была ли установлена переменная значением, отличным от <b>NULL</b>\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/function.isset.php\">\r\n            www.php.net isset\r\n        </a>\r\n        <br>\r\n        <p>\r\n\r\n            <b>empty</b> — Проверяет, пуста ли переменная.\r\n        </p>\r\n        <br>\r\n        Следующие значения воспринимаются как пустые:\r\n        <ul>\r\n            <li>\"\" (пустая строка)</li>\r\n            <li>0 (целое число)</li>\r\n            <li>0.0 (число с плавающей точкой)</li>\r\n            <li>\"0\" (строка)</li>\r\n            <li>NULL</li>\r\n            <li>FALSE</li>\r\n            <li>array() (пустой массив)</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/function.empty.php\">\r\n            www.php.net empty\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#base4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    &gt;Какие суперглобальные переменные в PHP знаешь?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"base4\">\r\n    <div class=\"card card-body\">\r\n        $_SERVER, $_GET, $_POST, $_REQUEST, $_COOKIE, $_SESSION, $_FILES, $_ENV, $GLOBALS\r\n        <br>\r\n        $_REQUEST — Переменные HTTP-запроса.Ассоциативный массив (array), который по умолчанию содержит данные\r\n        переменных $_GET, $_POST и $_COOKIE.\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.variables.superglobals.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#base5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как получить тело PUT-запроса в PHP?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"base5\">\r\n    <div class=\"card card-body\">\r\n        php:// — Доступ к различным потокам ввода-вывода\r\n        file_get_contents(\'php://input \');\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/wrappers.php.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nPHP: Common (session, exceptions)\r\n<hr>\r\n\r\n<a href=\"#common1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем разница между include и require в PHP?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"common1\">\r\n    <div class=\"card card-body\">\r\n        Конструкция include выдаст предупреждение уровня E_WARNING, если не сможет найти файл; поведение отлично от\r\n        require, который выдаст фатальную ошибку уровня E_COMPILE_ERROR.\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#common2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Exception vs Throwable?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"common2\">\r\n    <div class=\"card card-body\">\r\n        <b>Exception</b> это базовый класс для всех исключений в PHP 5 и базовый класс для всех пользовательских\r\n        исключений в PHP 7.\r\n        <br>\r\n        <b>Throwable</b> является родительским интерфейсом для всех объектов, выбрасывающихся с помощью выражения throw\r\n        в PHP7, включая классы Error( базовый класс для всех внутренних ошибок PHP) и Exception.\r\n    </div>\r\n</div>\r\n<a href=\"#common3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как работает сессия в PHP? Где она хранится? Как связывается браузер с сессией.\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"common3\">\r\n    <div class=\"card card-body\">\r\n        Сессии являются простым способом хранения информации для отдельных пользователей с уникальным идентификатором\r\n        сессии.Это может использоваться для сохранения состояния между запросами страниц. Идентификаторы сессий обычно\r\n        отправляются браузеру через сессионный cookie и используются для получения имеющихся данных сессии.\r\n        <br>\r\n        По умолчанию PHP использует внутренний обработчик files для сохранения сессий, который установлен в\r\n        INI-переменной session.save_handler. Этот обработчик сохраняет данные на сервере в директории, указанной в\r\n        конфигурационной директиве session.save_path.\r\n        <br>\r\n        Сессии могут запускаться вручную с помощью функции session_start(). Если директива session.auto_start\r\n        установлена в 1, сессия автоматически запустится, в начале запроса.\r\n        <br>\r\n        Существуют два метода передачи идентификатора сессии:\r\n        <ul>\r\n            <li>Cookies</li>\r\n            <li>Индефикатор через параметр URL</li>\r\n        </ul>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/session.examples.basic.php\">\r\n            www.php.net\r\n        </a>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/session.idpassing.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#common4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем разница между сессией и кукой?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"common4\">\r\n    <div class=\"card card-body\">\r\n        Cookies - это механизм хранения данных браузером,которые храняться на стороне клиента\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/features.cookies.php\">\r\n            www.php.net\r\n        </a>\r\n        <br>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/session.idpassing.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#common5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как можно использовать наследование исключений?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"common5\">\r\n    <div class=\"card card-body\">\r\n\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nPHP: OOP (interfaces, traits)\r\n<hr>\r\n\r\n<a href=\"#oop1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что мы описываем в Interface: сигнатуры методов, методы, константы? Какие области видимости мы можем использовать в\r\n    Interface: public, protected, private?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop1\">\r\n    <div class=\"card card-body\">\r\n        Интерфейсы объектов позволяют создавать код, который указывает, какие методы должен реализовать класс, без\r\n        необходимости определять, как именно они должны быть реализованы.\r\n        <br>\r\n        Интерфейсы объявляются так же, как и обычные классы, но с использованием ключевого слова interface вместо class.\r\n        Тела методов интерфейсов должны быть пустыми.\r\n        <br>\r\n        Все методы, определенные в интерфейсах должны быть общедоступными, что следует из самой природы интерфейса.\r\n        <br>\r\n        Обратите внимание, что возможно объявить конструктор в интерфейсе. Это может быть полезно для некоторых задач,\r\n        например при реализации фабрик.\r\n        <br>\r\n        Интерфейс, совместно с контролем типов, предоставляет отличный способ проверки того, что определенный объект\r\n        содержит определенный набор методов\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.oop5.interfaces.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#oop2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие магические методы ты знаешь?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop2\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/php/class_object_oop\">\r\n            own\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.oop5.magic.php\">\r\n            www.php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужны Traits в PHP? Есть же абстрактный класс.\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop3\">\r\n    <div class=\"card card-body\">\r\n        Они нужны для избавления от дублирования кода, ну или например для множественного наследования.\r\n        <br>\r\n        Traits - это механизм обеспечения повторного использования кода в языках с поддержкой только одиночного\r\n        наследования, таких как PHP. Трейт предназначен для уменьшения некоторых ограничений одиночного наследования,\r\n        позволяя разработчику повторно использовать наборы методов свободно, в нескольких независимых классах и\r\n        реализованных с использованием разных архитектур построения классов. Семантика комбинации трейтов и классов\r\n        определена таким образом, чтобы снизить уровень сложности, а также избежать типичных проблем, связанных с\r\n        множественным наследованием и смешиванием.\r\n        <br>\r\n        <h3>Приоритет</h3>\r\n        Наследуемый член из базового класса переопределяется членом, находящимся в трейте. Порядок приоритета следующий:\r\n        члены из текущего класса переопределяют методы в трейте, которые в свою очередь переопределяют унаследованные\r\n        методы\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.oop5.traits.php\">\r\n            own\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен Interface? Есть же абстрактный класс.\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop4\">\r\n    <div class=\"card card-body\">\r\n        Абстрактный класс нужен, когда нужно семейство классов, у которых есть много общего. Конечно, можно применить и\r\n        интерфейс, но тогда нужно будет писать много идентичного кода.\r\n        <br>\r\n        Интерфейс представляет собой контракт для взаимодействий\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В абстрактном классе какие области видимости можно использовать для абстрактных методов: public, protected, private?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop5\">\r\n    <div class=\"card card-body\">\r\n        public, protected\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://php.net/manual/ru/language.oop5.abstract.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    1.Можно ли в классе переопределить метод трэйта?\r\n    <br>\r\n    2.Можно ли в трейте объявить константы?\r\n    <br>\r\n    3.Можно ли Trait использовать в Type hint?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop6\">\r\n    <div class=\"card card-body\">\r\n        <p>1. ДА, Если два трейта вставляют метод с одним и тем же именем, это приводит к фатальной ошибке в случае,\r\n            если конфликт явно не разрешен.<br>\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n                  use A, B {\r\n                        B::smallTalk insteadof A; //использовать метод smallTalk трейта B вместо А\r\n                        A::bigTalk insteadof B;   //использовать метод bigTalk трейта A вместо B\r\n                        B::bigTalk as talk;       //переименовать  метод bigTalk трейта B как talk\r\n                        B::bigTalk as private talk; //переименовать и изменить областьвидимости метода bigTalk трейта B как talk b\r\n                    }\r\n            </code>\r\n        </pre>\r\n        <p>\r\n            <b>Приоритет</b> -Наследуемый член из базового класса переопределяется членом, находящимся в трейте. Порядок\r\n            приоритета следующий: члены из текущего класса переопределяют методы в трейте, которые в свою очередь\r\n            переопределяют унаследованные методы.\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n                  class Base {\r\n                        public function sayHello() {\r\n                            echo \'Hello \';\r\n                        }\r\n                    }\r\n\r\n                    trait SayWorld {\r\n                        public function sayHello() {\r\n                            parent::sayHello();\r\n                            echo \'World!\';\r\n                        }\r\n                    }\r\n\r\n                    class MyHelloWorld extends Base {\r\n                        use SayWorld;\r\n                    }\r\n\r\n                    $o = new MyHelloWorld();\r\n                    $o-&gt;sayHello(); // Hello World!\r\n            </code>\r\n        </pre>\r\n        <p>2. Трейты не могут иметь констант</p>\r\n        <p>Да, можо использовать в Type hint</p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.oop5.traits.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop7\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В каких случаях можно/стоить делать закрытый (private/protected) конструктор?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop7\">\r\n    <div class=\"card card-body\">\r\n        Извне не возможно было создать екземпляр класса.\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#oop8\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как реализовать singleton в PHP?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"oop8\">\r\n    <div class=\"card card-body\">\r\n        <pre>            <code class=\"php\">\r\n        class TestController\r\n        {\r\n            public static $instance;\r\n\r\n            private function __construct()\r\n            {\r\n                // приватный конструктор ограничивает реализацию getInstance ()\r\n            }\r\n\r\n            protected function __clone()\r\n            {\r\n                // ограничивает клонирование объекта\r\n            }\r\n\r\n            public static function getInstance()\r\n            {\r\n                if (!self::$instance) {\r\n                    self::$instance = new self();\r\n                }\r\n                return self::$instance;\r\n            }\r\n        }\r\n            </code>\r\n        </pre>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nPHP: Advanced (Iterators, generators, links)\r\n<hr>\r\n<a href=\"#advanced1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен интерфейс ArrayAccess?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"advanced1\">\r\n    <div class=\"card card-body\">\r\n        Интерфейс обеспечивает доступ к объектам в виде массивов.\r\n        <pre>            <code class=\"php\">\r\n                ArrayAccess {\r\n                /* Методы */\r\n                abstract public offsetExists ( mixed $offset ) : bool  // on isset($obj[\"key\"])\r\n                abstract public offsetGet ( mixed $offset ) : mixed   // $obj[\"key\"]\r\n                abstract public offsetSet ( mixed $offset , mixed $value ) : void  // $obj[\"key\"] =\'value\'\r\n                abstract public offsetUnset ( mixed $offset ) : void   // unset($obj[\"key\"])\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/class.arrayaccess.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#advanced2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен интерфейс Iterator?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"advanced2\">\r\n    <div class=\"card card-body\">\r\n        Интерфейс для внешних итераторов или объектов, которые могут повторять себя изнутри.\r\n        <pre>            <code class=\"php\">\r\n               Iterator extends Traversable {\r\n                /* Методы */\r\n                abstract public rewind ( void ) : void    //Перемотать итератор на первый элемент\r\n                ||\r\n                abstract public next ( void ) : void      //Переход к следующему элементу\r\n\r\n                abstract public valid ( void ) : bool     //Проверяет корректность||isset текущей позиции\r\n                abstract public current ( void ) : mixed  //Возврат текущего элемента\r\n                abstract public key ( void ) : scalar     //Возврат ключа текущего элемента\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/class.iterator.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#advanced3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как работают генераторы в PHP? Для чего это можно использовать?\r\n    Как написать простой генератор?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"advanced3\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Генератор позволяет вам писать код, использующий foreach для перебора набора данных без необходимости\r\n            создания массива в памяти, что может привести к превышению лимита памяти, либо потребует довольно много\r\n            времени для его создания. Вместо этого, вы можете написать функцию-генератор, которая, по сути, является\r\n            обычной функцией, за исключением того, что вместо возврата единственного значения, генератор может\r\n            возвращать (yield) столько раз, сколько необходимо для генерации значений, позволяющих перебрать исходный\r\n            набор данных.\r\n        </p>\r\n        <p>\r\n            Наглядным примером вышесказанного может послужить использование функции range() как генератора. Стандартная\r\n            функция range() должна генерировать массив, состоящий из значений, и возвращать его, что может послужить\r\n            результатом генерации огромных массивов: например, вызов range(0, 1000000), приведёт к использованию более\r\n            100 МБ используемой памяти.\r\n        </p>\r\n        <p>\r\n            Когда функция генератор вызывается, она вернет объект встроенного класса Generator.\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n                Generator implements Iterator {\r\n                /* Методы */\r\n                public current ( void ) : mixed  //получить текущее значение генератора\r\n                public getReturn ( void ) : mixed  //Получить значение, возвращаемое генератором\r\n                public key ( void ) : mixed //Получить ключ сгенерированного элемента\r\n                public next ( void ) : void //Возобновить работу генератора\r\n                public rewind ( void ) : void //Перемотать итератор\r\n                public send ( mixed $value ) : mixed //Передать значение в генератор\r\n                public throw ( Throwable $exception ) : mixed //Бросить исключение в генератор\r\n                public valid ( void ) : bool //Проверка, закрыт ли итератор\r\n                public __wakeup ( void ) : void //Callback-функция сериализации\r\n                }\r\n            </code>\r\n        </pre>\r\n        Примеры :\r\n        <pre>            <code class=\"php\">\r\n                function getLines($file) {\r\n                    $f = fopen($file, \'r\');\r\n                    try {\r\n                        while ($line = fgets($f)) {\r\n                            yield $line;\r\n                        }\r\n                    } finally {\r\n                        fclose($f);\r\n                    }\r\n                }\r\n\r\n                foreach (getLines(\"file.txt\") as $n =&gt; $line) {\r\n                    if ($n &gt; 5) break;\r\n                    echo $line;\r\n                }\r\n\r\n                //another example\r\n\r\n                function gen_one_to_three() {\r\n                    echo 55; //one time\r\n                    for ($i = 1; $i &lt;= 3; $i++) {\r\n                        // Обратите внимание, что $i сохраняет свое значение между вызовами.\r\n                        yield $i;\r\n                    }\r\n                }\r\n                foreach (gen_one_to_three() as $value) {\r\n                    echo \"$value\\n\";\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.generators.overview.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#advanced4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как меняется поведение PHP если включить Strict Mode?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"advanced4\">\r\n    <div class=\"card card-body\">\r\n        <b>declare(strict_types=1);</b> <br>\r\n        Строгая типизация. Не преобразовывает типы.\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/functions.arguments.php#functions.arguments.type-declaration.strict\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#advanced5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие побитовые операции ты знаешь\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"advanced5\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li>$a &amp; $b <b>И</b> Устанавливаются только те биты, которые установлены и в $a, и в $b.</li>\r\n            <li>$a | $b <b>Или</b> Устанавливаются те биты, которые установлены в $a или в $b.</li>\r\n            <li>$a ^ $b <b>Исключающее или</b> Устанавливаются только те биты, которые установлены либо только в $a,\r\n                либо\r\n                только в $b, но не в обоих одновременно.\r\n            </li>\r\n            <li>~ $a <b>Отрицание</b> Устанавливаются те биты, которые не установлены в $a, и наоборот.</li>\r\n            <li>$a &lt;&lt; $b <b>Сдвиг влево</b> Все биты переменной $a сдвигаются на $b позиций влево (каждая позиция\r\n                подразумевает\r\n                \"умножение на 2\")\r\n            </li>\r\n            <li>$a &gt;&gt; $b <b>Сдвиг вправо</b> Все биты переменной $a сдвигаются на $b позиций вправо (каждая позиция\r\n                подразумевает \"деление на 2\")\r\n            </li>\r\n        </ul>\r\n        AND (&amp;), OR (|), NOT (~), XOR (^), &lt;&lt;, &gt;&gt;\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.php.net/manual/ru/language.operators.bitwise.php\">\r\n            php.net\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nFrameworks Laravel\r\n<hr>\r\n<a href=\"#laravel1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужны Service Providers?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Сервис-провайдеры лежат в основе первоначальной загрузки всех приложений на Laravel. И ваше приложение, и\r\n            все базовые сервисы Laravel загружаются через сервис-провайдеры.\r\n        </p>\r\n        <p>\r\n            Но что мы понимаем под \"первоначальной загрузкой\"? В общих чертах, мы имеем ввиду регистрацию таких вещей,\r\n            как биндингов в IoC-контейнер (фасадов и т.д.), слушателей событий, фильтров роутов и даже самих роутов.\r\n            Сервис-провайдеры - центральное место для конфигурирования вашего приложения.\r\n        </p>\r\n        <p>\r\n            Если вы откроете файл config/app.php, поставляемый с Laravel, то увидите массив providers. В нём перечислены\r\n            все классы сервис-провайдеров, которые загружаются для вашего приложения. Конечно, многие из них являются\r\n            \"отложенными\" провайдерами, т.е. они не загружаются при каждом запросе, а только при необходимости.\r\n        </p>\r\n        <p>\r\n            В этом обзоре вы узнаете, как создавать свои собственные сервис-провайдеры и регистрировать их в своём\r\n            приложении.\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/providers\">\r\n            http://laravel.su/docs/5.4/providers\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#laravel2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как работает Middlewares?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel2\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Посредники предоставляют удобный механизм для фильтрации HTTP-запросов вашего приложения. Например, в\r\n            Laravel есть посредник для проверки аутентификации пользователя. Если пользователь не аутентифицирован,\r\n            посредник перенаправит его на страницу входа в систему. Если же пользователь аутентифицирован, посредник\r\n            позволит запросу пройти далее в приложение.\r\n        </p>\r\n        <p>\r\n            Конечно, посредники нужны не только для авторизации. CORS-посредник может пригодиться для добавления особых\r\n            заголовков ко всем ответам в вашем приложении. А посредник логов может зарегистрировать все входящие\r\n            запросы.\r\n        </p>\r\n        <p>\r\n            В Laravel есть несколько стандартных посредников, включая посредники для аутентификации и CSRF-защиты. Все\r\n            они расположены в директории app/Http/Middleware.\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/laravel/laravel-middleware.png\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/middleware\">\r\n            http://laravel.su/docs/5.4/middleware\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#laravel3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как работает Faсade?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel3\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            <b>Сервис-контейнер в Laravel</b> — это мощное средство для управления зависимостями классов и внедрения\r\n            зависимостей. Внедрение зависимостей — это распространенный термин, который означает добавление других\r\n            классов в этот класс через конструктор или, в некоторых случаях, метод-сеттер.\r\n        </p>\r\n        <p>\r\n            Фасады предоставляют \"статический\" интерфейс к классам, доступным в сервис-контейнере. Laravel поставляется\r\n            со множеством фасадов, которые предоставляют доступ практически ко всем функциям Laravel. Фасады Laravel\r\n            служат \"статическими прокси\" для основополагающих классов в сервис-контейнере, предоставляя преимущество\r\n            лаконичного, выразительного синтаксиса, сохраняя при этом большую тестируемость и гибкость по сравнению с\r\n            обычными статическими методами.\r\n            Все фасады Laravel определены в пространстве имен Illuminate\\Support\\Facades\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/container\">\r\n            http://laravel.su/docs/5.4/container\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/facades\">\r\n            http://laravel.su/docs/5.4/facades\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#laravel4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Если ты хочешь после каждой созданной задачи отправлять почту тому, на кого эту задачу поставили - опиши свои\r\n    действия.\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel4\">\r\n    <div class=\"card card-body\">\r\n        Observer, Mail drivers, Queue\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/facades\">\r\n            http://laravel.su/docs/5.4/facades\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#laravel5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Должны ли фигурировать в коде вызовы функции env()?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel5\">\r\n    <div class=\"card card-body\">\r\n        нет\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#laravel6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужны параметры роутинга?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel6\">\r\n    <div class=\"card card-body\">\r\n        захватить сегменты URI\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/routing#route-parameters\">\r\n            http://laravel.su/docs/5.4/routing#route-parameters\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#laravel7\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как можно создать новый класс?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel7\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li>new Class</li>\r\n            <li>app(Class::class)</li>\r\n            <li>DI: __construct(Class $class)</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4\">\r\n            http://laravel.su/docs/5.4\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#laravel8\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    1. Если ты хочешь проверить может ли юзер изменять объект, как ты будешь это делать?\r\n    <br>\r\n    2. Как работают Policies?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel8\">\r\n    <div class=\"card card-body\">\r\n        1.Authorization, Policies\r\n        <br>\r\n        2 .Сначала мы разберем шлюзы, а затем рассмотрим политики\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/authorization\">\r\n            http://laravel.su/docs/5.4/authorization\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#laravel9\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как можно кастомизировать ошибку валидации формы?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"laravel9\">\r\n    <div class=\"card card-body\">\r\n        используя в form request метод messages\r\n        <pre>            <code class=\"php\">\r\n                public function messages()\r\n                {\r\n                    return [\r\n                        \'title.required\' =&gt; \'A title is required\',\r\n                        \'body.required\'  =&gt; \'A message is required\',\r\n                    ];\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/validation#customizing-the-error-messages\">\r\n            http://laravel.su/docs/5.4/validation#customizing-the-error-messages\r\n        </a>\r\n        <p>\r\n            При необходимости, вы можете использовать свои сообщения об ошибках вместо значений по умолчанию. Существует\r\n            несколько способов для указания кастомных сообщений. Во-первых, можно передать сообщения в качестве третьего\r\n            аргумента в метод Validator::make:\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n                $messages = [\r\n                    \'required\' =&gt; \'The :attribute field is required.\',\r\n                ];\r\n\r\n                $validator = Validator::make($input, $rules, $messages);\r\n            </code>\r\n        </pre>\r\n        <p>\r\n            В этом примере :attributeбудет заменен на имя проверяемого поля. Вы также можете использовать и другие\r\n            строки-переменные. Пример:\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n              $messages = [\r\n                    \'same\'    =&gt; \'The :attribute and :other must match.\',\r\n                    \'size\'    =&gt; \'The :attribute must be exactly :size.\',\r\n                    \'between\' =&gt; \'The :attribute must be between :min - :max.\',\r\n                    \'in\'      =&gt; \'The :attribute must be one of the following types: :values\',\r\n                ];\r\n            </code>\r\n        </pre>\r\n        <p>\r\n            Иногда есть необходимость указать собственное сообщение для конкретного поля, это можно сделать с помощью\r\n            синтаксиса с точкой. Просто укажите имя атрибута и текст сообщения:\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n              $messages = [\r\n                    \'email.required\' =&gt; \'We need to know your e-mail address!\',\r\n                ];\r\n            </code>\r\n        </pre>\r\n\r\n        <p>\r\n            Также можно определять сообщения в файле локализации вместо того, чтобы передавать их в валидатор напрямую.\r\n            Для этого добавьте сообщения в массив custom файла локализации resources/lang/xx/validation.php.\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n            \'custom\' =&gt; [\r\n            \'email\' =&gt; [\r\n                    \'required\' =&gt; \'We need to know your e-mail address!\',\r\n                ],\r\n            ],\r\n            </code>\r\n        </pre>\r\n        <p>\r\n            Если вы хотите, чтобы :attribute был заменен на кастомное имя, можно указать в массиве attributes файле\r\n            локализации resources/lang/xx/validation.php\r\n        </p>\r\n        <pre>            <code class=\"php\">\r\n            \'attributes\' =&gt; [\r\n            \'email\' =&gt; \'email address\',\r\n        ]\r\n            </code>\r\n        </pre>\r\n\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/validation#custom-error-messages\">\r\n            http://laravel.su/docs/5.4/validation#custom-error-messages\r\n        </a>\r\n\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nБазы данных\r\n<hr>\r\n<a href=\"#mysql1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие движки в MySQL ты знаешь?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql1\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/engine\">\r\n            mysql/engine\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#mysql2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем разница между InnoDB и MyISAM в MySQL?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql2\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/engine\">\r\n            mysql/engine\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#mysql3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какую задачу решает HAVING? Чем не устраивает WHERE?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql3\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/query\">\r\n            /mysql/query\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#mysql4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое INSERT.. ON DUPLICATE KEY UPDATE... Для чего? По какому индексу проверяет уникальность записи?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql4\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            unique, Primary key\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"http://laravel.su/docs/5.4/providers\">\r\n            http://laravel.su/docs/5.4/providers\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#mysql5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    При создании таблиц пишут INT(11) - что означает 11? Всегда ли 11?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql5\">\r\n    <div class=\"card card-body\">\r\n        Отображение символов в колонке\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#mysql6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие варианты хранения md5 в базе\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql6\">\r\n    <div class=\"card card-body\">\r\n        CHAR 32\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nПроектирование\r\n<hr>\r\n<a href=\"#pr1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как реализовать связь многие ко многим?Как реализовать связь один ко многим?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pr1\">\r\n    <div class=\"card card-body\">\r\n        Связывающея таблца\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/relation_type\">\r\n            /mysql/relation_type\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#pr2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие варианты хранения JSON в реляционной БД существуют. Какой вариант предпочтительнее?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pr2\">\r\n    <div class=\"card card-body\">\r\n        json_decode, json_encode ??????\r\n    </div>\r\n</div>\r\n<a href=\"#pr3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Если мы храним JSON в текстовом поле, то как потом искать по какому-то полю из JSON?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"pr3\">\r\n    <div class=\"card card-body\">\r\n        Like??????\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nMySQL Indexes\r\n<hr>\r\n<a href=\"#index1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Почему не стоит добавлять индексы сразу на каждую колонку?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index1\">\r\n    <div class=\"card card-body\">\r\n        Ефекта не будет + место будет занимать + условия запросов поиска надо предосмотреть\r\n    </div>\r\n</div>\r\n<a href=\"#index2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    ак работают внешние ключи (foreign keys)?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index2\">\r\n    <div class=\"card card-body\">\r\n        ссылка на запись с другой таблицы\r\n    </div>\r\n</div>\r\n<a href=\"#index3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В каких случаях не стоит использовать индексы\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index3\">\r\n    <div class=\"card card-body\">\r\n        когда записей мало,селективность к нулю\r\n    </div>\r\n</div>\r\n<a href=\"#index4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Задача: Если у нас есть составной индекс по двум колонкам, и мы делаем выборку только по первой колонке, сможет ли\r\n    MySQL использовать этот индекс? А если только по второй колонке?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index4\">\r\n    <div class=\"card card-body\">\r\n        очередность важна.По первому да,по второму - нет\r\n    </div>\r\n</div>\r\n<a href=\"#index5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие типы индексов ты знаешь?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index5\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li><b>btree</b>(хранит элементы в отсортированном порядке) -поиск по диапазонам, =, &gt;, &gt;=, &lt;, &lt;=, or\r\n                BETWEEN operators\r\n                <ul>\r\n                    <li>primary</li>\r\n                    <li>unique</li>\r\n                    <li>key|index</li>\r\n                    <li>FULLTEXT</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>hash</b> MEMORY table \"=\" очень быстро, не может использоваться для операций диапазонов &gt; и &lt;</li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n<a href=\"#index6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как устроен индекс?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index6\">\r\n    <div class=\"card card-body\">\r\n        Файл со сотритрованной колонкой -&gt; id строки\r\n    </div>\r\n</div>\r\n<a href=\"#index7\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Нужен ли индекс на поле со значениями (0 и 1)? Почему?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index7\">\r\n    <div class=\"card card-body\">\r\n        селективность, количество уныкальных значений индекса/количество строк\r\n    </div>\r\n</div>\r\n<a href=\"#index8\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В БД есть 1 млн записей, и 80% из них имеют одинаковое значение. Нужен ли индекс на это поле? Почему?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"index8\">\r\n    <div class=\"card card-body\">\r\n        Если по 80 то не нужен ????\r\n    </div>\r\n</div>\r\n\r\n\r\n<hr>\r\nTransactions\r\n<hr>\r\n<a href=\"#transaction1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как работают транзакции?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"transaction1\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/useful_information\">\r\n            /mysql/useful_information\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#transaction2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Если у меня есть две разные БД, и мне нужно консистентно что-то менять в обоих БД, могу ли я использовать\r\n    транзакции?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"transaction2\">\r\n    <div class=\"card card-body\">\r\n        Нет\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nExplain\r\n<hr>\r\n<a href=\"#explain1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как профилировать запросы?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"explain1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Профилирование запросов MySQL – это полезный метод анализа общей производительности приложений на основе БД.\r\n            Лог медленных запросов MySQL (или slow query log) — это лог, в который MySQL отправляет медленные и\r\n            потенциально проблемные запросы. Эта функция поставляется с MySQL, но по умолчанию отключена. MySQL\r\n            определяет, какие запросы нужно внести в этот лог, с помощью специальных переменных, которые позволяют\r\n            профилировать запрос на основе требований к производительности приложения. Обычно в этот лог вносятся\r\n            запросы, обработка которых занимает больше времени, и запросы, которые неправильно индексы.\r\n            <b>/etc/mysql/mysql.conf.d/mysqld.cnf</b>\r\n        </p>\r\n        <pre>            <code>\r\n            #slow_query_log         = 1   //булево значение включающее лог\r\n            #slow_query_log_file    = /var/log/mysql/mysql-slow.log  //путь абсолютный путь к файлу лога.\r\n                                        Владельцем каталога должен быть пользователь mysqld, а также директория должна\r\n                                        иметь корректные разрешения для чтения и записи. Чаще всего демон mysql работает\r\n                                        от имени пользователя mysql.\r\n            #long_query_time = 2 //время в секундах для проверки продолжительности запроса &gt;2\r\n            #log-queries-not-using-indexes  //тут не надо значение, включает сохранение запросов не использующих индексы\r\n            #min_examined_row_limit     //указывает минимальное значение количества рядов данных для анализа. Значение\r\n                                            1000 проигнорирует запросы возвращающие меньше 1000 рядов значений.\r\n\r\n            </code>\r\n        </pre>\r\n        Изменения вступят только при очередном запуске MySQL, если вам необходимо динамическое изменение параметров,\r\n        используйте другие методы установки переменных:\r\n        <pre>            <code>\r\n                mysql&gt; SET GLOBAL slow_query_log = \'ON\';\r\n                mysql&gt; SET GLOBAL slow_query_log_file = \'/var/log/mysql/localhost-slow.log\';\r\n                mysql&gt; SET GLOBAL log_queries_not_using_indexes = \'ON\';\r\n                mysql&gt; SET SESSION long_query_time = 1;\r\n                mysql&gt; SET SESSION min_examined_row_limit = 100;\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://www.8host.com/blog/profilirovanie-zaprosov-mysql/\">\r\n            https://www.8host.com/blog/profilirovanie-zaprosov-mysql/\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://devacademy.ru/article/profilirovanie-zaprosov-v-mysql/\">\r\n            https://devacademy.ru/article/profilirovanie-zaprosov-v-mysql/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#explain2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое Explain?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"explain2\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Когда вы выполняете какой-нибудь запрос, оптимизатор запросов MySQL пытается придумать оптимальный план\r\n            выполнения этого запроса. Вы можете посмотреть этот самый план используя запрос с ключевым словом EXPLAIN.\r\n            EXPLAIN – это один из самых мощных инструментов, предоставленных в ваше распоряжение для понимания\r\n            MySQL-запросов и их оптимизации\r\n        </p>\r\n    </div>\r\n</div>\r\n<a href=\"#explain3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Есть запрос, который тормозит. С чего стоит начать поиск проблем?<br>\r\n    Куда смотреть в Explain, чтобы понять, что идет не так?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"explain3\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            Колонка <b>key</b> показывает используемый индекс. Колонка <b>possible_keys</b> показывает все индексы,\r\n            которые могут быть использованы для этого запроса. Колонка <b>rows</b> показывает число записей, которые\r\n            пришлось прочитать базе данных для выполнения этого запроса\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/useful_information\">\r\n            /mysql/useful_information\r\n        </a>\r\n    </div>\r\n</div>\r\n<hr>\r\nJOIN\r\n<hr>\r\n<a href=\"#join1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие типы JOIN ты знаешь\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"join1\">\r\n    <div class=\"card card-body\">\r\n        LEFT, RIGHT, INNER, OUTER\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/mysql/query\">\r\n            /mysql/query\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#join2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Если объеденить через JOIN две таблицы, при этом ни в WHERE ни в ON ничего не написав, то, что мы получим в\r\n    результате? (SELECT a.*, b.* FROM a JOIN b)\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"join2\">\r\n    <div class=\"card card-body\">\r\n        выборка вернёт т.н. декартово произведение, в котором каждая строка одной таблицы будет сопоставлена с каждой\r\n        строкой другой таблицы:\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://anton-pribora.ru/articles/mysql/mysql-join/\">\r\n            https://anton-pribora.ru/articles/mysql/mysql-join/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#join3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    У нас есть две таблицу: users и profiles. В таблицу profiles есть поле user_id. Как нам выбрать юзеров, у которых\r\n    нет профиля?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"join3\">\r\n    <div class=\"card card-body\">\r\n        <pre>            <code>\r\n                SELECT *\r\n                FROM user\r\n                left join profiles on user.id = profiles.user_id;\r\n                where profiles.user_id is null\r\n\r\n                SELECT *\r\n                FROM user\r\n                WHERE id NOT IN (SELECT user_id FROM profiles );\r\n\r\n                SELECT *\r\n                FROM user\r\n                WHERE NOT EXISTS (SELECT user_id FROM profiles WHERE user.id=profiles.user_id);\r\n            </code>\r\n        </pre>\r\n        <p>\r\n            По скорости исполнения вариант с <b>LEFT JOIN</b> сильно проигрывает вариантам со вложеными запросами.\r\n            Вариант с\r\n            NOT IN всегда быстрее варианта с <b>NOT EXIST</b> в случаях, когда число записей в таблице user больше числа\r\n            записей в таблице profiles. В противном случае, <b>NOT IN</b> оказывается быстрее только на таблицах с\r\n            небольшим числом записей, а на больших объемах уже проигрывает <b>NOT EXIST</b>. Причем чем больше записей в\r\n            таблице profiles тем существеннее разница в скорости выполнения.\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://shpargalki.org.ua/146/poisk-zapisei-v-odnoi-tablitse-kotorym-net-sootvetstviya-v-drugoi-tablitse\">\r\n            https://shpargalki.org.ua/146/poisk-zapisei-v-odnoi-tablitse-kotorym-net-sootvetstviya-v-drugoi-tablitse\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nMySQL Admin (Slow log, Backup)\r\n<hr>\r\n<a href=\"#mysql_admin1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как сделать дамп базы данных?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql_admin1\">\r\n    <div class=\"card card-body\">\r\n        <pre>            <code>\r\n                mysqldump -uUSER -pPASSWORD DB_NAME &gt; FILE_NAME_TO_SAVE\r\n                //example\r\n                mysqldump -uroot -p123456 mydb &gt; dump.sql\r\n            </code>\r\n        </pre>\r\n        <ul>\r\n            <li><b>uUser</b> — имя пользователя базы в формате типа -u[root]</li>\r\n            <li>-<b>pPassword</b> — пароль пользователя в формате типа -p[123456]</li>\r\n            <li><b>DB_NAME</b> — имя базы данных</li>\r\n            <li><b>FILE_NAME_TO_SAVE</b> — куда сохранять дамп</li>\r\n        </ul>\r\n        <pre>            <code>\r\n            Создаём структуру базы без данных\r\n            mysqldump --no-data - u USER -pPASSWORD DATABASE &gt; /path/to/file/schema.sql\r\n\r\n            Если нужно сделать дамп только одной или нескольких таблиц\r\n            mysqldump -u USER -pPASSWORD DATABASE TABLE1 TABLE2 TABLE3 &gt; /path/to/file/dump_table.sql\r\n\r\n            Создаём бекап и сразу его архивируем\r\n            mysqldump -u USER -pPASSWORD DATABASE | gzip &gt; /path/to/outputfile.sql.gz\r\n\r\n            Создание бекапа с указанием его даты\r\n            mysqldump -u USER -pPASSWORD DATABASE | gzip &gt; `date +/path/to/outputfile.sql.%Y%m%d.%H%M%S.gz`\r\n\r\n            Заливаем бекап в базу данных\r\n            mysql -u USER -pPASSWORD DATABASE &lt; /path/to/dump.sql\r\n\r\n            Заливаем архив бекапа в базу\r\n            gunzip &lt; /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE\r\n            или так\r\n            zcat /path/to/outputfile.sql.gz | mysql -u USER -pPASSWORD DATABASE\r\n\r\n            Создаём новую базу данных\r\n            mysqladmin -u USER -pPASSWORD create NEWDATABASE\r\n            </code>\r\n        </pre>\r\n\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://habr.com/ru/post/105954/\">\r\n            https://habr.com/ru/post/105954/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#mysql_admin2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Если у нас есть подозрение, что в БД что-то тормозит, как нам найти тормозной запрос средствами БД?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"mysql_admin2\">\r\n    <div class=\"card card-body\">\r\n        Show full proccess list\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nМодульное тестирование (Unit)\r\n<hr>\r\n<a href=\"#unit_test1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое PHPUnit?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"unit_test1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            PHPUnit – это система для юнит-тестирования приложений, написанных на языке PHP.\r\n            <br>\r\n            Идея юнит-тестирования состоит в том, чтобы проверять на корректность небольшие участки больших программ –\r\n            прогонять на некоторых «хитрых» тестовых наборах данных.\r\n        </p>\r\n    </div>\r\n</div>\r\n<a href=\"#unit_test2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое TDD?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"unit_test2\">\r\n    <div class=\"card card-body\">\r\n        Test drive development сначало тесты потом код(разработка через тестирование)\r\n    </div>\r\n</div>\r\n<a href=\"#unit_test3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Mock, Fixture, Stub, Fake - в чем разница?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"unit_test3\">\r\n    <div class=\"card card-body\">\r\n        моки - Тестовые двойники,имитируют поведение\r\n        <br>\r\n        стабы - заглушки,имитируют данные\r\n        <br>\r\n        <pre>            <code>\r\n                class StubTest extends TestCase\r\n                {\r\n                    public function testStub()\r\n                    {\r\n                        // Создать подставной объект для класса Observer, имитируя\r\n                        // метод reportError()\r\n                        $observer = $this-&gt;getMockBuilder(Observer::class)\r\n                                         -&gt;setMethods([\'reportError\'])\r\n                                         -&gt;getMock();\r\n\r\n                        // Создать заглушку для класса SomeClass.\r\n                        $stub = $this-&gt;createMock(SomeClass::class);\r\n\r\n                        // Настроить заглушку.\r\n                        $stub-&gt;method(\'doSomething\')\r\n                             -&gt;willReturn(\'foo\');\r\n                                ||\r\n                                returnValue\r\n\r\n                        // Вызов $stub-&gt;doSomething() теперь вернёт \'foo\'.\r\n                        $this-&gt;assertSame(\'foo\', $stub-&gt;doSomething());\r\n                    }\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://phpunit.readthedocs.io/ru/latest/test-doubles.html\">\r\n            https://phpunit.readthedocs.io/ru/latest/test-doubles.html\r\n        </a>\r\n        Fake - фейковые данные\r\n        <br>\r\n        Фикстуры - написание кода для настройки тестового окружения в известное состояние, а затем возврат его в\r\n        исходное состояние, когда тест будет завершён\r\n        <br>\r\n        Но в phpunit моки могут и то и другое\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://phpunit.readthedocs.io/ru/latest/fixtures.html\">\r\n            https://phpunit.readthedocs.io/ru/latest/fixtures.html\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#unit_test4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен Data Provider в PHPUnit?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"unit_test4\">\r\n    <div class=\"card card-body\">\r\n        Набор входных данных для тестирования\r\n        <pre>            <code>\r\n                /**\r\n                 * @dataProvider additionProvider\r\n                 */\r\n                public function testAdd($a, $b, $expected)\r\n                {\r\n                    $this-&gt;assertSame($expected, $a + $b);\r\n                }\r\n\r\n                public function additionProvider()\r\n                {\r\n                    return [\r\n                        [0, 0, 0],\r\n                        [0, 1, 1],\r\n                        [1, 0, 1],\r\n                        [1, 1, 3]\r\n                    ];\r\n                }\r\n            </code>\r\n        </pre>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://phpunit.readthedocs.io/ru/latest/writing-tests-for-phpunit.html#writing-tests-for-phpunit-data-providers\">\r\n            https://phpunit.readthedocs.io/ru/latest/writing-tests-for-phpunit.html#writing-tests-for-phpunit-data-providers\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#unit_test5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое покрытие и как его считать? Процент покрытого кода покрытого тестами\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"unit_test5\">\r\n    <div class=\"card card-body\">\r\n        Процент покрытого кода тестами\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://phpunit.readthedocs.io/ru/latest/code-coverage-analysis.html\">\r\n            https://phpunit.readthedocs.io/ru/latest/code-coverage-analysis.html\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nФункциональное тестирование\r\n<hr>\r\n<a href=\"#func_test1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое Codeception?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"func_test1\">\r\n    <div class=\"card card-body\">\r\n        Либа для тестов\r\n    </div>\r\n</div>\r\n<a href=\"#func_test2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем отличие Unit-тестов от функциональных тестов\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"func_test2\">\r\n    <div class=\"card card-body\">\r\n        unit - определенный модуль(небольшие участки), функциональный - взаимосвязь модулей\r\n    </div>\r\n</div>\r\n<a href=\"#func_test3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое BDD?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"func_test3\">\r\n    <div class=\"card card-body\">\r\n        Behavior-driven development\r\n        <br>\r\n        BDD методология является расширением TDD в том смысле, что перед тем как написать какой-либо тест необходимо\r\n        сначала описать желаемый результат от добавляемой функциональности на предметно-ориентированном языке. После\r\n        того как это будет проделано, конструкции этого языка переводятся специалистами или специальным программным\r\n        обеспечением в описание теста.\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://dou.ua/forums/topic/8897/\">\r\n            https://phpunit.readthedocs.io/ru/latest/code-coverage-analysis.html\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#func_test4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое Selenium WebDriver?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"func_test4\">\r\n    <div class=\"card card-body\">\r\n        Емиляция всего веб браузера\r\n    </div>\r\n</div>\r\n<a href=\"#integration_test1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужно интеграционное тестирование?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"integration_test1\">\r\n    <div class=\"card card-body\">\r\n        Интеграция со стронними сервисами\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#load_test2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое нагрузочное тестирование, и для чего оно нужно?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"load_test2\">\r\n    <div class=\"card card-body\">\r\n        тестирования производительности, сбор показателей и определение производительности и времени отклика\r\n    </div>\r\n</div>\r\n<a href=\"#load_test3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какими единицами можно расчитывать нагрузку?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"load_test3\">\r\n    <div class=\"card card-body\">\r\n        Время выполнения запроса\r\n        <br>\r\n        Потребление оперативной памяти\r\n        <br>\r\n        Работа с дисковой подсистемой\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BE%D1%87%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\">\r\n            https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BE%D1%87%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#load_test4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие средства для проведения нагрузочного тестирования вы знаете\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"load_test4\">\r\n    <div class=\"card card-body\">\r\n        JMeter ,HP LoadRunner\r\n    </div>\r\n</div>\r\n<a href=\"#load_test5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как провести нагрузочное тестирование таким образом, чтобы не уронить сервис, работающий в продакшене?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"load_test5\">\r\n    <div class=\"card card-body\">\r\n        Сделать копию и погонять, увеличивать нагрузку и наблюдать за ресурсами сервера\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nTechnologies\r\n<hr>\r\n<a href=\"#git0\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Git\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git0\">\r\n    <div class=\"card card-body\">\r\n        Есть 3 зоны:\r\n        <ul>\r\n            <li>1. рабочая директория</li>\r\n            <li>2. проиндексированная</li>\r\n            <li>3. репозиторий</li>\r\n        </ul>\r\n        <p>\r\n            1.рабочая директория - untracked\r\n            <br>\r\n            2. git add file\r\n            <br>\r\n            3. индекс - список файлов отслеживаемый системой гит\r\n            4.git commit\r\n            <br>\r\n            5.репозиторий\r\n        </p>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://learn.javascript.ru/screencast/git#basics-first-commit\">\r\n            https://learn.javascript.ru/screencast/git#basics-first-commit\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#git1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Чем отличается branch от pull request\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git1\">\r\n    <div class=\"card card-body\">\r\n        Branch - ветка, pull request -запрос на применения изменение\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#git2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какими способами можно отменить предыдущий коммит?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git2\">\r\n    <div class=\"card card-body\">\r\n        git --amend, git reset , git revert commit\r\n    </div>\r\n</div>\r\n<a href=\"#git3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужны команды pull и fetch? В чем разница между ними?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git3\">\r\n    <div class=\"card card-body\">\r\n        При использовании fetch, git собирает все коммиты из целевой ветки, которых нет в текущей ветке, и сохраняет их\r\n        в локальном репозитории. Однако он не сливает их в текущую ветку.\r\n        <br>\r\n        Pull обновить и применить fetch-обновить.\r\n        <br>\r\n        Грубо говоря, по дефолту git pull — это шоткод для последовательности двух команд: git fetch (получение\r\n        изменений с сервера) и git merge (сливание в локальную копию).\r\n    </div>\r\n</div>\r\n<a href=\"#git4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем разница между commit и push?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git4\">\r\n    <div class=\"card card-body\">\r\n        commit - Запись изменений в репозиторий\r\n        <br>\r\n        push - отправить коммиты на удаленный репозитоий\r\n    </div>\r\n</div>\r\n<a href=\"#git5\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие типы reset ты знаешь\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git5\">\r\n    <div class=\"card card-body\">\r\n        reset --hard LOG_HASH|HEAD - отктываеться до рабочей директории коммита, хеда\r\n        <br>\r\n        reset --soft LOG_HASH|HEAD - отктываеться до коммита, не трогая рабочую директорию и проидексированные файлы\r\n        <br>\r\n        reset --mixed LOG_HASH|HEAD - отктываеться до коммита, не трогая рабочую директорию (без git add.)\r\n    </div>\r\n    <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://learn.javascript.ru/screencast/git#reset-mixed\">\r\n        https://learn.javascript.ru/screencast/git#reset-mixed\r\n    </a>\r\n</div>\r\n<a href=\"#git6\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое cherry-pick, и как его использовать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git6\">\r\n    <div class=\"card card-body\">\r\n        Копирование коммитов<br>\r\n        <b>git cherry-pick COMMIT_HASH</b>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://learn.javascript.ru/screencast/git#copy-cherry-pick\">\r\n            https://learn.javascript.ru/screencast/git#copy-cherry-pick\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#git7\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    git reset, git revert, git rebase\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git7\">\r\n    <div class=\"card card-body\">\r\n        git reset - отмена коммита<br>\r\n        git rebase - отредактирование историю разработки<br>\r\n        git revert - коммит с противополжными изменениями коммита(смотрит изменения в указаном коммите и отменяет\r\n        изменения еще одним коммитом)<br>\r\n    </div>\r\n    <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://learn.javascript.ru/screencast/git#revert-starting-video\">\r\n        https://learn.javascript.ru/screencast/git#revert-starting-video\r\n    </a>\r\n</div>\r\n<a href=\"#git8\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Когда мне стоит использовать git stash\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git8\">\r\n    <div class=\"card card-body\">\r\n        stash - как корзина на винде удаляем и затем можно восстановить\r\n    </div>\r\n</div>\r\n<a href=\"#git9\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Когда мне стоит использовать git stash\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git9\">\r\n    <div class=\"card card-body\">\r\n        В чем разница между командами merge и rebase? Что лучше использовать?\r\n    </div>\r\n    <a target=\"_blank\" class=\"btn btn-secondary\" href=\"/git/rebase\">\r\n        /git/rebase\r\n    </a>\r\n    <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://learn.javascript.ru/screencast/git#move-rebase\">\r\n        https://learn.javascript.ru/screencast/git#move-rebase\r\n    </a>\r\n</div>\r\n<a href=\"#git10\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем разница между командами merge и rebase? Что лучше использовать?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"git10\">\r\n    merge- слияние с сохраненной историей\r\n</div>\r\n<hr>\r\nComposer\r\n<hr>\r\n<a href=\"#composer1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что делает команда Install, и какие файлики ей нужны для работы?\r\n    Что делает команда Update, и какие файлики ей нужны для работы?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"composer1\">\r\n    <div class=\"card card-body\">\r\n        Install смотрить сначало в composer.lock затем composer.json\r\n        <br>\r\n        Update в composer.json\r\n    </div>\r\n</div>\r\n<a href=\"#composer2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужен файлик composer.lock?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"composer2\">\r\n    <div class=\"card card-body\">\r\n        Запысываються текущие версии жестко! Версии мы можем жестко указать прям в composer.json.\r\n    </div>\r\n</div>\r\n<a href=\"#composer3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое semver (семантическое версионирование)?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"composer3\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://semver.org/lang/ru/\">\r\n            https://semver.org/lang/ru/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nAPI: REST, oauth, HTTP-methods\r\n<hr>\r\n<a href=\"#api0\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    HTTP методы?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api0\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li><b>GET</b> запрашивает представление ресурса. Запросы с использованием этого метода могут\r\n                только извлекать данные.\r\n            </li>\r\n            <li><b>HEAD</b> запрашивает ресурс так же, как и метод GET, но без тела ответа. обычно применяется для\r\n                извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с\r\n                момента последнего обращения.\r\n            </li>\r\n            <li><b>POST</b> Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах\r\n                посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются\r\n                серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами —\r\n                текст комментария) включаются в тело запроса. Аналогично с помощью метода POST обычно загружаются файлы\r\n                на сервер.\r\n            </li>\r\n            <li><b>PUT</b> Применяется для загрузки содержимого запроса на указанный в запросе URI.<br>\r\n                Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод\r\n                POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом\r\n                содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся\r\n                по данному URI ресурсу.<br>\r\n                Сообщения ответов сервера на метод PUT не кэшируются.\r\n            </li>\r\n            <li><b>PATCH</b> Применяется для загрузки содержимого запроса на указанный в запросе URI.</li>\r\n            <li><b>DELETE</b> Удаляет указанный ресурс.</li>\r\n            <li><b>OPTIONS</b> используется для описания параметров соединения с ресурсом.</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://developer.mozilla.org/ru/docs/Web/HTTP/Methods\">\r\n            https://developer.mozilla.org/ru/docs/Web/HTTP/Methods\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://ru.wikipedia.org/wiki/HTTP\">\r\n            https://ru.wikipedia.org/wiki/HTTP\r\n        </a>\r\n\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#api01\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Коды состояния\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api01\">\r\n    <div class=\"card card-body\">\r\n        <ul>\r\n            <li>1xx Информирование о процессе передачи.</li>\r\n            <li>2xx Информирование о случаях успешного принятия и обработки запроса клиента.</li>\r\n            <li>3xx Сообщает клиенту, что для успешного выполнения операции необходимо сделать другой запрос</li>\r\n            <li>4xx Указание ошибок со стороны клиента.</li>\r\n            <li>5xx ошибка сервера</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://developer.mozilla.org/ru/docs/Web/HTTP/Methods\">\r\n            https://developer.mozilla.org/ru/docs/Web/HTTP/Methods\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://ru.wikipedia.org/wiki/HTTP\">\r\n            https://ru.wikipedia.org/wiki/HTTP\r\n        </a>\r\n\r\n    </div>\r\n</div>\r\n<a href=\"#api1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Принципы и соглашения в REST?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            REST — передача/изменения состояния через представления,-это архитектурный стиль, некоторое множество\r\n            ограничений, для построения распределенных приложений.\r\n        </p>\r\n        <ul>\r\n            <li><b>Конечные точки в URL имя существительное, не глагол</b>\r\n                <ul>\r\n                    <li>/farmers not getFarmers</li>\r\n                    <li>/crops not getCrops</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Множественное число</b>\r\n                <ul>\r\n                    <li>/farmers not farmer</li>\r\n                    <li>/crops not crop</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Документация</b> это документация с перечисленными в ней конечными точками, и описывающая список\r\n                операций для каждой из них.\r\n            </li>\r\n            <li><b>Версия вашего приложения</b>\r\n                <ul>\r\n                    <li>URI версии -host/v2/farmers,host/v1/farmers</li>\r\n                    <li>Мультимедиа версии -информации в заголовке Content-Type: application/vnd.farmers.v1+json ||\r\n                        Accept: application/vnd.farmers.v1+json\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Пагинация</b>Отправка большого объема данных через HTTP не очень хорошая идея. Безусловно, возникнут\r\n                проблемы с производительностью, поскольку сериализация больших объектов JSON станет дорогостоящей. Best\r\n                practice является разбиение результатов на части, а не отправка всех записей сразу.\r\n            </li>\r\n            <li><b>Использование SSL</b> - SSL должен быть! Вы всегда должны применять SSL для своего REST приложения.\r\n                Доступ к вашему приложения будет осуществляется из любой точки мира, и нет никакой гарантии, что к нему\r\n                будет обеспечен безопасный доступ. С ростом числа инцидентов с киберпреступностью мы обязательно должны\r\n                обеспечить безопасность своему приложению.\r\n            </li>\r\n            <li><b>Эффективное использование кодов ответов HTTP</b>\r\n                <ul>\r\n                    <li><b>GET</b> - Обычно используется для извлечения информации</li>\r\n                    <li><b>POST</b> -метод наиболее широко используется для создания ресурсов</li>\r\n                    <li><b>PUT</b> -обновление наиболее широко используется для создания ресурсов</li>\r\n                    <li><b>DELETE</b> -обновление наиболее широко используется для удаление ресурса</li>\r\n                    <li><b>HEAD</b> этот метод используется для запроса ресурса c сервера.</li>\r\n                </ul>\r\n            </li>\r\n\r\n            <li><b>HTTP методы</b></li>\r\n            <li>что содержится в теле самого запроса</li>\r\n        </ul>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://habr.com/ru/post/351890/\">\r\n            https://habr.com/ru/post/351890/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#api2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие существуют способы авторизации для API\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api2\">\r\n    <div class=\"card card-body\">\r\n        Oauth,tokens\r\n    </div>\r\n</div>\r\n<a href=\"#api3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен access token в oauth? Есть ли у него время жизни?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api3\">\r\n    <div class=\"card card-body\">\r\n        access token - ключ (обычно просто набор символов), предъявление которого является пропуском к защищенным\r\n        ресурсам. Обращение к ним в самом простом случае происходит по HTTPS с указанием в заголовках или в качестве\r\n        одного из параметров полученного access token\'а.\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://habr.com/ru/company/mailru/blog/115163/\">\r\n            https://habr.com/ru/company/mailru/blog/115163/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#api4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Для чего нужен refresh token в oauth? В чем его смысл? Есть ли у него время жизни?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"api4\">\r\n    <div class=\"card card-body\">\r\n        Обычно, access token имеет ограниченный срок годности. Это может быть полезно, например, если он передается по\r\n        открытым каналам. Чтобы не заставлять пользователя проходить авторизацию после истечения срока действия access\r\n        token\'а, во всех перечисленных выше вариантах, в дополнение к access token\'у может возвращаться еще refresh\r\n        token. По нему можно получить access token с помощью HTTP-запроса, аналогично авторизации по логину и паролю.\r\n        Неограничено\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nWeb servers (apache, nginx, phpfpm, virtual hosts)\r\n<hr>\r\n<a href=\"#web_servers_1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужны virtual hosts?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"web_servers_1\">\r\n    <div class=\"card card-body\">\r\n        добавление локальных хостов\r\n    </div>\r\n</div>\r\n<a href=\"#web_servers_2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Какие принципиальные отличия между apache и nginx?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"web_servers_2\">\r\n    <div class=\"card card-body\">\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://ekaterinagoltsova.github.io/posts/apache-vs-nginx/\">\r\n            https://ekaterinagoltsova.github.io/posts/apache-vs-nginx/\r\n        </a>\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://habr.com/ru/post/267721/\">\r\n            https://habr.com/ru/post/267721/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#web_servers_3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Зачем нужен phpfpm?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"web_servers_3\">\r\n    <div class=\"card card-body\">\r\n        процес,который позволяеться выполнять пхп скрипты\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://perfect-inc.com/blog/nginx-php-fpm-i-chto-eto-voobshche/\">\r\n            https://perfect-inc.com/blog/nginx-php-fpm-i-chto-eto-voobshche/\r\n        </a>\r\n    </div>\r\n</div>\r\n<a href=\"#web_servers_4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Использовал ли встроенный в PHP вебсервер (php -S). Для чего он нужен?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"web_servers_4\">\r\n    <div class=\"card card-body\">\r\n        встроенный сервер, созданный специально для разработки и тестирования. Теперь вы можете писать и тестировать\r\n        свой код не имея полноценного веб-сервера\r\n        <pre>            <code>\r\n                 $ cd ~/public_html\r\n                 $ php -S localhost:8000\r\n\r\n                 Кроме того,. вы может указать имя конкретного файла-роутера. Например:\r\n                 php -S &gt;localhost or your public IP&gt;:8080 -t /home/ec2-user/public public/index.php\r\n            </code>\r\n        </pre>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nNetworks (TCP vs UDP, HTTP vs HTTPS, DNS, NAT)\r\n<hr>\r\n<a href=\"#network1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем отличие между HTTPS и HTTP? Где лучше использовать HTTP, а где HTTPS? Стоит ли вообще использовать HTTP в наше\r\n    время?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"network1\">\r\n    <div class=\"card card-body\">\r\n        <p>\r\n            HTTP — это протокол, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать\r\n            веб-страницы, а серверу — получить информацию, которую пользователь ввёл на сайте.\r\n            <br>\r\n            HTTPS — это тот же протокол, но с надстройкой безопасности.\r\n            По HTTP информация передаётся в обычном виде, а по HTTPS — в зашифрованном. Шифровать данные нужно, чтобы\r\n            хакеры не смогли ничего прочитать, если перехватят их.\r\n            <br>\r\n            Допустим, вы проходите опрос на сайте, который работает по HTTP-протоколу. Вот вы заполнили пустые поля и\r\n            нажали кнопку «Отправить». Браузер отправляет ваши ответы серверу. В этот момент хакер может перехватить\r\n            информацию и прочитать, что вы там наотвечали. Вы этого даже не заметите.\r\n            <br>\r\n            Скорее всего, хакеров не интересуют ваши ответы на опрос. Но перехватить можно любую информацию. Например,\r\n            ваши пароли или номер банковской карты.\r\n            <br>\r\n            Чтобы этого не произошло, HTTP-протокол решили усовершенствовать. К существующей технологии добавили\r\n            шифрование и получился HTTPS — безопасный протокол передачи данных.\r\n            <br>\r\n            Когда вы вводите что-то на сайте, который работает по HTTPS, перед отправкой данных на сервер браузер\r\n            зашифровывает информацию. Чтобы расшифровать и прочитать её, нужен специальный ключ, который хранится только\r\n            на сервере. Такое шифрование называется криптографическим\r\n        </p>\r\n    </div>\r\n</div>\r\n<a href=\"#network2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем отличие между TCP и UDP пакетами? Где можно использовать UDP?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"network2\">\r\n    <div class=\"card card-body\">\r\n        Протоколы транспортного уровня.<br>\r\n        отличие в так называемой “гарантии доставки”. TCP считается надежным,исключает потери данных, дублирование и\r\n        перемешивание пакетов, задержки.<br>\r\n        UDP не надо ждать ответа\r\n        <a target=\"_blank\" class=\"btn btn-secondary\" href=\"https://thedifference.ru/chem-otlichaetsya-protokol-tcp-ot-udp/\">\r\n            https://thedifference.ru/chem-otlichaetsya-protokol-tcp-ot-udp/\r\n        </a>\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nSecurity (XSS, CSRF, Brute-force)\r\n<hr>\r\n<a href=\"#security1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое уязвимость XSS? Как бороться?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"security1\">\r\n    <div class=\"card card-body\">\r\n        Cross Site Sсriрting - Яваскрипты атака. В генерируемые сервером страницы внедряется непредусмотренный код\r\n        Javascript, который будет выполнен в пользовательском браузере после открытия этой страницы.\r\n        комменты\r\n        <br>\r\n        екранировать (htmlspecialchars)\r\n    </div>\r\n</div>\r\n<a href=\"#security2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое SQL-инъекция? Как ее предотвратить?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"security2\">\r\n    <div class=\"card card-body\">\r\n        внедрение в данные произвольного SQL кода\r\n        екранировать (mysql_real_escape_string)\r\n    </div>\r\n</div>\r\n<a href=\"#security3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое CSRF? Как бороться?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"security3\">\r\n    <div class=\"card card-body\">\r\n        Сross Site Request Forgery — «межсайтовая подделка запроса»,Если жертва заходит на сайт, созданный\r\n        злоумышленником, от её лица тайно отправляется запрос на другой сервер/<br>\r\n        Каждый раз обновляться токен CSRF\r\n    </div>\r\n</div>\r\n<a href=\"#security4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Как правильно хранить пароли? Чем плох md5?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"security4\">\r\n    <div class=\"card card-body\">\r\n        md5(md5($pass).md5($salt))\r\n        мдп5-перебер\r\n        <pre>            <code>\r\n                $hash = crypt(\'password\'); // crypt генерирует соль и хэширует, используя алгоритм по умолчанию\r\n                // crypt извлекает соль из существующего хэша и хэширует входящий пароль с её использованием\r\n                if (crypt($password, $hash) == $hash) {\r\n                   // Пароль верен\r\n                }\r\n\r\n                || hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] ) : string\r\n                //algo - Имя выбранного алгоритма хеширования (например, \"md5\", \"sha256\", \"haval160,4\" и т.д.)\r\n                //key - Общий секретный ключ, используемый для генерации HMAC хеш-кода.\r\n            </code>\r\n        </pre>\r\n    </div>\r\n</div>\r\n<a href=\"#security4\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Что такое Brute-force, и как с ним бороться\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"security4\">\r\n    <div class=\"card card-body\">\r\n        Перебор, количество считать\r\n    </div>\r\n</div>\r\n\r\n<hr>\r\nRedis and Memcached\r\n<hr>\r\n<a href=\"#cache1\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Стоит ли в кеш ложить данные размером в 2 МБ?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"cache1\">\r\n    <div class=\"card card-body\">\r\n        нет,не поддерживает\r\n    </div>\r\n</div>\r\n<a href=\"#cache2\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    Стоит ли в кеш ложить данные размером в 2 МБ?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"cache2\">\r\n    <div class=\"card card-body\">\r\n        нет,не поддерживает,макс 1 мб\r\n    </div>\r\n</div>\r\n\r\n<a href=\"#cache3\" data-toggle=\"collapse\" class=\"list-group-item list-group-item-action\">\r\n    В чем принципиальное отличие между Redis и Memcached? Где нам лучше использовать Redis, а где Memcached?\r\n</a>\r\n<div class=\"collapse multi-collapse\" id=\"cache3\">\r\n    <div class=\"card card-body\">\r\n        мемкеш- сет,гет,делить,и только стр ложить.Если память полная -вытисняет\r\n        Редис — типы данных разные ложить,ложить на диск если много значей\r\n    </div>\r\n</div>\r\n// полиформизм\r\n// декотаратор - дополняе\r\n// адаптер изменяет\r\n// psr-7 интерфейсы над реквестом рекоммендующих методов\r\n..проверит компиляция',1,7,3,'2021-08-17 10:55:48','2021-08-17 10:55:48');
/*!40000 ALTER TABLE `infos` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (1,'2014_10_12_000000_create_users_table',1);
INSERT INTO `migrations` VALUES (2,'2019_08_19_000000_create_failed_jobs_table',1);
INSERT INTO `migrations` VALUES (3,'2020_08_17_075421_create_categories_table',1);
INSERT INTO `migrations` VALUES (4,'2020_08_17_081111_create_infos_table',1);
INSERT INTO `migrations` VALUES (5,'2020_09_28_114454_create_configs_table',1);
INSERT INTO `migrations` VALUES (6,'2020_12_03_195058_create_todo_lists_table',1);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `todo_lists`
--

DROP TABLE IF EXISTS `todo_lists`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `todo_lists` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `label` tinytext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `sort` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `todo_lists`
--

LOCK TABLES `todo_lists` WRITE;
/*!40000 ALTER TABLE `todo_lists` DISABLE KEYS */;
INSERT INTO `todo_lists` VALUES (11,'Add count info for each  category',0,'category',1,'2021-02-08 23:22:06','2021-02-10 21:40:01');
INSERT INTO `todo_lists` VALUES (12,'Add list for info by category(for sort and moving to another category)',0,'category',2,'2021-02-08 23:25:14','2021-02-10 21:40:01');
INSERT INTO `todo_lists` VALUES (13,'add ability for change editor in article(codemiror, simple texarea or ck_editor)',0,'editor',3,'2021-02-08 23:41:27','2021-02-10 21:40:01');
INSERT INTO `todo_lists` VALUES (14,'category,todo,table_list(save,del,edit) refactor  function',0,'JS',NULL,'2021-02-10 23:08:59','2021-02-10 23:08:59');
INSERT INTO `todo_lists` VALUES (15,'table.js :fix animate.css',0,'JS',NULL,'2021-02-10 23:10:02','2021-02-10 23:10:02');
/*!40000 ALTER TABLE `todo_lists` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-08-17 11:30:27
