version: "3.7"
#https://www.digitalocean.com/community/tutorials/how-to-containerize-a-laravel-application-for-development-with-docker-compose-on-ubuntu-18-04-ru

services:
  main:
    build:
      context: ./docker
      args:
        XDEBUG: '${XDEBUG:-on}'
        USER: '${CONTAINER_USER}'
    image: '${APP_NAME}-app'
    restart: unless-stopped
    container_name: '${APP_NAME}-app'
    ports:
        - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
    volumes:
      - './:/var/www/html'
      - './storage/logs/php:/var/log/php'
      - './docker/etc/php/conf.d/custom.ini:/usr/local/etc/php/conf.d/custom.ini'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ./docker/docker-compose.env
    networks:
      - study-network

  #Nginx Service https://hub.docker.com/_/nginx
  nginx:
    image: nginx:latest
    container_name: '${APP_NAME}-nginx'
    restart: unless-stopped
    ports:
      - '${APP_PORT:-80}:80'
      - '${APP_PORT_SSL:-443}:443'
    volumes:
      - './:/var/www/html'
      - './storage/logs/nginx:/var/log/nginx'
      - './docker/etc/nginx/default.conf:/etc/nginx/conf.d/default.conf'
    networks:
      - study-network

  #MySQL Service https://hub.docker.com/_/mysql
  mysql:
    image: mysql:8.0
    container_name: '${APP_NAME}-db'
    restart: unless-stopped
    ports:
      - '${FORWARD_DB_PORT:-3306}:3306'
    environment:
      MYSQL_ROOT_PASSWORD: 12345
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - 'study:/var/lib/mysql'
      - './docker/etc/mysql/conf.d:/etc/mysql/conf.d'
      - './docker/etc/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
    networks:
      - study-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
      retries: 3
      timeout: 5s

  redis:
    image: redis:alpine
    container_name: '${APP_NAME}-redis'
    restart: unless-stopped
    volumes:
      - 'study-redis:/data'
    networks:
      - study-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s

  memcached:
    image: memcached:alpine
    container_name: '${APP_NAME}-memcached'
    ports:
      - '${FORWARD_MEMCACHED_PORT:-11211}:11211'
    networks:
      - study-network

  adminer:
    image: adminer
    container_name: '${APP_NAME}-adminer'
    restart: always
    ports:
      - '${ADMINER_PORT:-8080}:8080'
    networks:
      - study-network

#Docker Networks
networks:
  study-network:

#Volumes
volumes:
  study:
  study-redis:
